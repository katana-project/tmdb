// Code generated by ogen, DO NOT EDIT.

package tmdb

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *AccountAddFavoriteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountAddFavoriteOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountAddFavoriteOK = [2]string{
	0: "status_code",
	1: "status_message",
}

// Decode decodes AccountAddFavoriteOK from json.
func (s *AccountAddFavoriteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountAddFavoriteOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountAddFavoriteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountAddFavoriteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountAddFavoriteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountAddFavoriteReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountAddFavoriteReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("RAW_BODY")
		e.Str(s.RAWBODY)
	}
}

var jsonFieldsNameOfAccountAddFavoriteReq = [1]string{
	0: "RAW_BODY",
}

// Decode decodes AccountAddFavoriteReq from json.
func (s *AccountAddFavoriteReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountAddFavoriteReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "RAW_BODY":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RAWBODY = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RAW_BODY\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountAddFavoriteReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAccountAddFavoriteReq) {
					name = jsonFieldsNameOfAccountAddFavoriteReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountAddFavoriteReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountAddFavoriteReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountAddToWatchlistOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountAddToWatchlistOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountAddToWatchlistOK = [2]string{
	0: "status_code",
	1: "status_message",
}

// Decode decodes AccountAddToWatchlistOK from json.
func (s *AccountAddToWatchlistOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountAddToWatchlistOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountAddToWatchlistOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountAddToWatchlistOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountAddToWatchlistOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountAddToWatchlistReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountAddToWatchlistReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("RAW_BODY")
		e.Str(s.RAWBODY)
	}
}

var jsonFieldsNameOfAccountAddToWatchlistReq = [1]string{
	0: "RAW_BODY",
}

// Decode decodes AccountAddToWatchlistReq from json.
func (s *AccountAddToWatchlistReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountAddToWatchlistReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "RAW_BODY":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RAWBODY = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RAW_BODY\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountAddToWatchlistReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAccountAddToWatchlistReq) {
					name = jsonFieldsNameOfAccountAddToWatchlistReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountAddToWatchlistReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountAddToWatchlistReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Avatar.Set {
			e.FieldStart("avatar")
			s.Avatar.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.IncludeAdult.Set {
			e.FieldStart("include_adult")
			s.IncludeAdult.Encode(e)
		}
	}
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountDetailsOK = [7]string{
	0: "avatar",
	1: "id",
	2: "iso_639_1",
	3: "iso_3166_1",
	4: "name",
	5: "include_adult",
	6: "username",
}

// Decode decodes AccountDetailsOK from json.
func (s *AccountDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetailsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "avatar":
			if err := func() error {
				s.Avatar.Reset()
				if err := s.Avatar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"avatar\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "include_adult":
			if err := func() error {
				s.IncludeAdult.Reset()
				if err := s.IncludeAdult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"include_adult\"")
			}
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountDetailsOKAvatar) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountDetailsOKAvatar) encodeFields(e *jx.Encoder) {
	{
		if s.Gravatar.Set {
			e.FieldStart("gravatar")
			s.Gravatar.Encode(e)
		}
	}
	{
		if s.Tmdb.Set {
			e.FieldStart("tmdb")
			s.Tmdb.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountDetailsOKAvatar = [2]string{
	0: "gravatar",
	1: "tmdb",
}

// Decode decodes AccountDetailsOKAvatar from json.
func (s *AccountDetailsOKAvatar) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetailsOKAvatar to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "gravatar":
			if err := func() error {
				s.Gravatar.Reset()
				if err := s.Gravatar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gravatar\"")
			}
		case "tmdb":
			if err := func() error {
				s.Tmdb.Reset()
				if err := s.Tmdb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tmdb\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountDetailsOKAvatar")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountDetailsOKAvatar) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetailsOKAvatar) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountDetailsOKAvatarGravatar) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountDetailsOKAvatarGravatar) encodeFields(e *jx.Encoder) {
	{
		if s.Hash.Set {
			e.FieldStart("hash")
			s.Hash.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountDetailsOKAvatarGravatar = [1]string{
	0: "hash",
}

// Decode decodes AccountDetailsOKAvatarGravatar from json.
func (s *AccountDetailsOKAvatarGravatar) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetailsOKAvatarGravatar to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "hash":
			if err := func() error {
				s.Hash.Reset()
				if err := s.Hash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hash\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountDetailsOKAvatarGravatar")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountDetailsOKAvatarGravatar) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetailsOKAvatarGravatar) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountDetailsOKAvatarTmdb) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountDetailsOKAvatarTmdb) encodeFields(e *jx.Encoder) {
	{
		if s.AvatarPath.Set {
			e.FieldStart("avatar_path")
			s.AvatarPath.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountDetailsOKAvatarTmdb = [1]string{
	0: "avatar_path",
}

// Decode decodes AccountDetailsOKAvatarTmdb from json.
func (s *AccountDetailsOKAvatarTmdb) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetailsOKAvatarTmdb to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "avatar_path":
			if err := func() error {
				s.AvatarPath.Reset()
				if err := s.AvatarPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"avatar_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountDetailsOKAvatarTmdb")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountDetailsOKAvatarTmdb) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetailsOKAvatarTmdb) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountFavoriteTvOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountFavoriteTvOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountFavoriteTvOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes AccountFavoriteTvOK from json.
func (s *AccountFavoriteTvOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountFavoriteTvOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]AccountFavoriteTvOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountFavoriteTvOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountFavoriteTvOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountFavoriteTvOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountFavoriteTvOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountFavoriteTvOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountFavoriteTvOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountFavoriteTvOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "origin_country",
	5:  "original_language",
	6:  "original_name",
	7:  "overview",
	8:  "popularity",
	9:  "poster_path",
	10: "first_air_date",
	11: "name",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes AccountFavoriteTvOKResultsItem from json.
func (s *AccountFavoriteTvOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountFavoriteTvOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountFavoriteTvOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountFavoriteTvOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountFavoriteTvOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountGetFavoritesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountGetFavoritesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountGetFavoritesOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes AccountGetFavoritesOK from json.
func (s *AccountGetFavoritesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountGetFavoritesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]AccountGetFavoritesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountGetFavoritesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountGetFavoritesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountGetFavoritesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountGetFavoritesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountGetFavoritesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountGetFavoritesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountGetFavoritesOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes AccountGetFavoritesOKResultsItem from json.
func (s *AccountGetFavoritesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountGetFavoritesOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountGetFavoritesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountGetFavoritesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountGetFavoritesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountListsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountListsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountListsOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes AccountListsOK from json.
func (s *AccountListsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountListsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]AccountListsOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountListsOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountListsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountListsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountListsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountListsOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountListsOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.FavoriteCount.Set {
			e.FieldStart("favorite_count")
			s.FavoriteCount.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ItemCount.Set {
			e.FieldStart("item_count")
			s.ItemCount.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.ListType.Set {
			e.FieldStart("list_type")
			s.ListType.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountListsOKResultsItem = [8]string{
	0: "description",
	1: "favorite_count",
	2: "id",
	3: "item_count",
	4: "iso_639_1",
	5: "list_type",
	6: "name",
	7: "poster_path",
}

// Decode decodes AccountListsOKResultsItem from json.
func (s *AccountListsOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountListsOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "favorite_count":
			if err := func() error {
				s.FavoriteCount.Reset()
				if err := s.FavoriteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"favorite_count\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "item_count":
			if err := func() error {
				s.ItemCount.Reset()
				if err := s.ItemCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_count\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "list_type":
			if err := func() error {
				s.ListType.Reset()
				if err := s.ListType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list_type\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountListsOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountListsOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountListsOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountRatedMoviesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountRatedMoviesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountRatedMoviesOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes AccountRatedMoviesOK from json.
func (s *AccountRatedMoviesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountRatedMoviesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]AccountRatedMoviesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountRatedMoviesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountRatedMoviesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountRatedMoviesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountRatedMoviesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountRatedMoviesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountRatedMoviesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Rating.Set {
			e.FieldStart("rating")
			s.Rating.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountRatedMoviesOKResultsItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
	14: "rating",
}

// Decode decodes AccountRatedMoviesOKResultsItem from json.
func (s *AccountRatedMoviesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountRatedMoviesOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "rating":
			if err := func() error {
				s.Rating.Reset()
				if err := s.Rating.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rating\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountRatedMoviesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountRatedMoviesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountRatedMoviesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountRatedTvEpisodesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountRatedTvEpisodesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountRatedTvEpisodesOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes AccountRatedTvEpisodesOK from json.
func (s *AccountRatedTvEpisodesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountRatedTvEpisodesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]AccountRatedTvEpisodesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountRatedTvEpisodesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountRatedTvEpisodesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountRatedTvEpisodesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountRatedTvEpisodesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountRatedTvEpisodesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountRatedTvEpisodesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AirDate.Set {
			e.FieldStart("air_date")
			s.AirDate.Encode(e)
		}
	}
	{
		if s.EpisodeNumber.Set {
			e.FieldStart("episode_number")
			s.EpisodeNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.ProductionCode.Set {
			e.FieldStart("production_code")
			s.ProductionCode.Encode(e)
		}
	}
	{
		if s.Runtime.Set {
			e.FieldStart("runtime")
			s.Runtime.Encode(e)
		}
	}
	{
		if s.SeasonNumber.Set {
			e.FieldStart("season_number")
			s.SeasonNumber.Encode(e)
		}
	}
	{
		if s.ShowID.Set {
			e.FieldStart("show_id")
			s.ShowID.Encode(e)
		}
	}
	{
		if s.StillPath.Set {
			e.FieldStart("still_path")
			s.StillPath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Rating.Set {
			e.FieldStart("rating")
			s.Rating.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountRatedTvEpisodesOKResultsItem = [13]string{
	0:  "air_date",
	1:  "episode_number",
	2:  "id",
	3:  "name",
	4:  "overview",
	5:  "production_code",
	6:  "runtime",
	7:  "season_number",
	8:  "show_id",
	9:  "still_path",
	10: "vote_average",
	11: "vote_count",
	12: "rating",
}

// Decode decodes AccountRatedTvEpisodesOKResultsItem from json.
func (s *AccountRatedTvEpisodesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountRatedTvEpisodesOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "air_date":
			if err := func() error {
				s.AirDate.Reset()
				if err := s.AirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"air_date\"")
			}
		case "episode_number":
			if err := func() error {
				s.EpisodeNumber.Reset()
				if err := s.EpisodeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "production_code":
			if err := func() error {
				s.ProductionCode.Reset()
				if err := s.ProductionCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_code\"")
			}
		case "runtime":
			if err := func() error {
				s.Runtime.Reset()
				if err := s.Runtime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runtime\"")
			}
		case "season_number":
			if err := func() error {
				s.SeasonNumber.Reset()
				if err := s.SeasonNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"season_number\"")
			}
		case "show_id":
			if err := func() error {
				s.ShowID.Reset()
				if err := s.ShowID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_id\"")
			}
		case "still_path":
			if err := func() error {
				s.StillPath.Reset()
				if err := s.StillPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"still_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "rating":
			if err := func() error {
				s.Rating.Reset()
				if err := s.Rating.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rating\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountRatedTvEpisodesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountRatedTvEpisodesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountRatedTvEpisodesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountRatedTvOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountRatedTvOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountRatedTvOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes AccountRatedTvOK from json.
func (s *AccountRatedTvOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountRatedTvOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]AccountRatedTvOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountRatedTvOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountRatedTvOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountRatedTvOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountRatedTvOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountRatedTvOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountRatedTvOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Rating.Set {
			e.FieldStart("rating")
			s.Rating.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountRatedTvOKResultsItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "origin_country",
	5:  "original_language",
	6:  "original_name",
	7:  "overview",
	8:  "popularity",
	9:  "poster_path",
	10: "first_air_date",
	11: "name",
	12: "vote_average",
	13: "vote_count",
	14: "rating",
}

// Decode decodes AccountRatedTvOKResultsItem from json.
func (s *AccountRatedTvOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountRatedTvOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "rating":
			if err := func() error {
				s.Rating.Reset()
				if err := s.Rating.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rating\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountRatedTvOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountRatedTvOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountRatedTvOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountWatchlistMoviesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountWatchlistMoviesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountWatchlistMoviesOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes AccountWatchlistMoviesOK from json.
func (s *AccountWatchlistMoviesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountWatchlistMoviesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]AccountWatchlistMoviesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountWatchlistMoviesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountWatchlistMoviesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountWatchlistMoviesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountWatchlistMoviesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountWatchlistMoviesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountWatchlistMoviesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountWatchlistMoviesOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes AccountWatchlistMoviesOKResultsItem from json.
func (s *AccountWatchlistMoviesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountWatchlistMoviesOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountWatchlistMoviesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountWatchlistMoviesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountWatchlistMoviesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountWatchlistTvOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountWatchlistTvOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountWatchlistTvOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes AccountWatchlistTvOK from json.
func (s *AccountWatchlistTvOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountWatchlistTvOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]AccountWatchlistTvOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountWatchlistTvOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountWatchlistTvOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountWatchlistTvOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountWatchlistTvOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountWatchlistTvOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountWatchlistTvOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountWatchlistTvOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "origin_country",
	5:  "original_language",
	6:  "original_name",
	7:  "overview",
	8:  "popularity",
	9:  "poster_path",
	10: "first_air_date",
	11: "name",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes AccountWatchlistTvOKResultsItem from json.
func (s *AccountWatchlistTvOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountWatchlistTvOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountWatchlistTvOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountWatchlistTvOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountWatchlistTvOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AlternativeNamesCopyOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AlternativeNamesCopyOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Logos != nil {
			e.FieldStart("logos")
			e.ArrStart()
			for _, elem := range s.Logos {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAlternativeNamesCopyOK = [2]string{
	0: "id",
	1: "logos",
}

// Decode decodes AlternativeNamesCopyOK from json.
func (s *AlternativeNamesCopyOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AlternativeNamesCopyOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "logos":
			if err := func() error {
				s.Logos = make([]AlternativeNamesCopyOKLogosItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AlternativeNamesCopyOKLogosItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Logos = append(s.Logos, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logos\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AlternativeNamesCopyOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AlternativeNamesCopyOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AlternativeNamesCopyOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AlternativeNamesCopyOKLogosItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AlternativeNamesCopyOKLogosItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.FileType.Set {
			e.FieldStart("file_type")
			s.FileType.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
}

var jsonFieldsNameOfAlternativeNamesCopyOKLogosItem = [8]string{
	0: "aspect_ratio",
	1: "file_path",
	2: "height",
	3: "id",
	4: "file_type",
	5: "vote_average",
	6: "vote_count",
	7: "width",
}

// Decode decodes AlternativeNamesCopyOKLogosItem from json.
func (s *AlternativeNamesCopyOKLogosItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AlternativeNamesCopyOKLogosItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "file_type":
			if err := func() error {
				s.FileType.Reset()
				if err := s.FileType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_type\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AlternativeNamesCopyOKLogosItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AlternativeNamesCopyOKLogosItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AlternativeNamesCopyOKLogosItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthenticationCreateGuestSessionOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthenticationCreateGuestSessionOK) encodeFields(e *jx.Encoder) {
	{
		if s.Success.Set {
			e.FieldStart("success")
			s.Success.Encode(e)
		}
	}
	{
		if s.GuestSessionID.Set {
			e.FieldStart("guest_session_id")
			s.GuestSessionID.Encode(e)
		}
	}
	{
		if s.ExpiresAt.Set {
			e.FieldStart("expires_at")
			s.ExpiresAt.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthenticationCreateGuestSessionOK = [3]string{
	0: "success",
	1: "guest_session_id",
	2: "expires_at",
}

// Decode decodes AuthenticationCreateGuestSessionOK from json.
func (s *AuthenticationCreateGuestSessionOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticationCreateGuestSessionOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "success":
			if err := func() error {
				s.Success.Reset()
				if err := s.Success.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success\"")
			}
		case "guest_session_id":
			if err := func() error {
				s.GuestSessionID.Reset()
				if err := s.GuestSessionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guest_session_id\"")
			}
		case "expires_at":
			if err := func() error {
				s.ExpiresAt.Reset()
				if err := s.ExpiresAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expires_at\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticationCreateGuestSessionOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthenticationCreateGuestSessionOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticationCreateGuestSessionOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthenticationCreateRequestTokenOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthenticationCreateRequestTokenOK) encodeFields(e *jx.Encoder) {
	{
		if s.Success.Set {
			e.FieldStart("success")
			s.Success.Encode(e)
		}
	}
	{
		if s.ExpiresAt.Set {
			e.FieldStart("expires_at")
			s.ExpiresAt.Encode(e)
		}
	}
	{
		if s.RequestToken.Set {
			e.FieldStart("request_token")
			s.RequestToken.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthenticationCreateRequestTokenOK = [3]string{
	0: "success",
	1: "expires_at",
	2: "request_token",
}

// Decode decodes AuthenticationCreateRequestTokenOK from json.
func (s *AuthenticationCreateRequestTokenOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticationCreateRequestTokenOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "success":
			if err := func() error {
				s.Success.Reset()
				if err := s.Success.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success\"")
			}
		case "expires_at":
			if err := func() error {
				s.ExpiresAt.Reset()
				if err := s.ExpiresAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expires_at\"")
			}
		case "request_token":
			if err := func() error {
				s.RequestToken.Reset()
				if err := s.RequestToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_token\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticationCreateRequestTokenOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthenticationCreateRequestTokenOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticationCreateRequestTokenOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthenticationCreateSessionFromLoginOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthenticationCreateSessionFromLoginOK) encodeFields(e *jx.Encoder) {
	{
		if s.Success.Set {
			e.FieldStart("success")
			s.Success.Encode(e)
		}
	}
	{
		if s.ExpiresAt.Set {
			e.FieldStart("expires_at")
			s.ExpiresAt.Encode(e)
		}
	}
	{
		if s.RequestToken.Set {
			e.FieldStart("request_token")
			s.RequestToken.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthenticationCreateSessionFromLoginOK = [3]string{
	0: "success",
	1: "expires_at",
	2: "request_token",
}

// Decode decodes AuthenticationCreateSessionFromLoginOK from json.
func (s *AuthenticationCreateSessionFromLoginOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticationCreateSessionFromLoginOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "success":
			if err := func() error {
				s.Success.Reset()
				if err := s.Success.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success\"")
			}
		case "expires_at":
			if err := func() error {
				s.ExpiresAt.Reset()
				if err := s.ExpiresAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expires_at\"")
			}
		case "request_token":
			if err := func() error {
				s.RequestToken.Reset()
				if err := s.RequestToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_token\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticationCreateSessionFromLoginOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthenticationCreateSessionFromLoginOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticationCreateSessionFromLoginOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthenticationCreateSessionFromLoginReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthenticationCreateSessionFromLoginReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("RAW_BODY")
		e.Str(s.RAWBODY)
	}
}

var jsonFieldsNameOfAuthenticationCreateSessionFromLoginReq = [1]string{
	0: "RAW_BODY",
}

// Decode decodes AuthenticationCreateSessionFromLoginReq from json.
func (s *AuthenticationCreateSessionFromLoginReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticationCreateSessionFromLoginReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "RAW_BODY":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RAWBODY = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RAW_BODY\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticationCreateSessionFromLoginReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAuthenticationCreateSessionFromLoginReq) {
					name = jsonFieldsNameOfAuthenticationCreateSessionFromLoginReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthenticationCreateSessionFromLoginReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticationCreateSessionFromLoginReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthenticationCreateSessionFromV4TokenOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthenticationCreateSessionFromV4TokenOK) encodeFields(e *jx.Encoder) {
	{
		if s.Success.Set {
			e.FieldStart("success")
			s.Success.Encode(e)
		}
	}
	{
		if s.SessionID.Set {
			e.FieldStart("session_id")
			s.SessionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthenticationCreateSessionFromV4TokenOK = [2]string{
	0: "success",
	1: "session_id",
}

// Decode decodes AuthenticationCreateSessionFromV4TokenOK from json.
func (s *AuthenticationCreateSessionFromV4TokenOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticationCreateSessionFromV4TokenOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "success":
			if err := func() error {
				s.Success.Reset()
				if err := s.Success.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success\"")
			}
		case "session_id":
			if err := func() error {
				s.SessionID.Reset()
				if err := s.SessionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"session_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticationCreateSessionFromV4TokenOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthenticationCreateSessionFromV4TokenOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticationCreateSessionFromV4TokenOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthenticationCreateSessionFromV4TokenReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthenticationCreateSessionFromV4TokenReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("RAW_BODY")
		e.Str(s.RAWBODY)
	}
}

var jsonFieldsNameOfAuthenticationCreateSessionFromV4TokenReq = [1]string{
	0: "RAW_BODY",
}

// Decode decodes AuthenticationCreateSessionFromV4TokenReq from json.
func (s *AuthenticationCreateSessionFromV4TokenReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticationCreateSessionFromV4TokenReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "RAW_BODY":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RAWBODY = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RAW_BODY\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticationCreateSessionFromV4TokenReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAuthenticationCreateSessionFromV4TokenReq) {
					name = jsonFieldsNameOfAuthenticationCreateSessionFromV4TokenReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthenticationCreateSessionFromV4TokenReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticationCreateSessionFromV4TokenReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthenticationCreateSessionOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthenticationCreateSessionOK) encodeFields(e *jx.Encoder) {
	{
		if s.Success.Set {
			e.FieldStart("success")
			s.Success.Encode(e)
		}
	}
	{
		if s.SessionID.Set {
			e.FieldStart("session_id")
			s.SessionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthenticationCreateSessionOK = [2]string{
	0: "success",
	1: "session_id",
}

// Decode decodes AuthenticationCreateSessionOK from json.
func (s *AuthenticationCreateSessionOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticationCreateSessionOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "success":
			if err := func() error {
				s.Success.Reset()
				if err := s.Success.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success\"")
			}
		case "session_id":
			if err := func() error {
				s.SessionID.Reset()
				if err := s.SessionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"session_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticationCreateSessionOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthenticationCreateSessionOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticationCreateSessionOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthenticationCreateSessionReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthenticationCreateSessionReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("RAW_BODY")
		e.Str(s.RAWBODY)
	}
}

var jsonFieldsNameOfAuthenticationCreateSessionReq = [1]string{
	0: "RAW_BODY",
}

// Decode decodes AuthenticationCreateSessionReq from json.
func (s *AuthenticationCreateSessionReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticationCreateSessionReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "RAW_BODY":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RAWBODY = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RAW_BODY\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticationCreateSessionReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAuthenticationCreateSessionReq) {
					name = jsonFieldsNameOfAuthenticationCreateSessionReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthenticationCreateSessionReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticationCreateSessionReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthenticationDeleteSessionOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthenticationDeleteSessionOK) encodeFields(e *jx.Encoder) {
	{
		if s.Success.Set {
			e.FieldStart("success")
			s.Success.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthenticationDeleteSessionOK = [1]string{
	0: "success",
}

// Decode decodes AuthenticationDeleteSessionOK from json.
func (s *AuthenticationDeleteSessionOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticationDeleteSessionOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "success":
			if err := func() error {
				s.Success.Reset()
				if err := s.Success.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticationDeleteSessionOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthenticationDeleteSessionOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticationDeleteSessionOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthenticationDeleteSessionReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthenticationDeleteSessionReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("RAW_BODY")
		e.Str(s.RAWBODY)
	}
}

var jsonFieldsNameOfAuthenticationDeleteSessionReq = [1]string{
	0: "RAW_BODY",
}

// Decode decodes AuthenticationDeleteSessionReq from json.
func (s *AuthenticationDeleteSessionReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticationDeleteSessionReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "RAW_BODY":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RAWBODY = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RAW_BODY\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticationDeleteSessionReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAuthenticationDeleteSessionReq) {
					name = jsonFieldsNameOfAuthenticationDeleteSessionReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthenticationDeleteSessionReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticationDeleteSessionReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthenticationValidateKeyOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthenticationValidateKeyOK) encodeFields(e *jx.Encoder) {
	{
		if s.Success.Set {
			e.FieldStart("success")
			s.Success.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthenticationValidateKeyOK = [3]string{
	0: "success",
	1: "status_code",
	2: "status_message",
}

// Decode decodes AuthenticationValidateKeyOK from json.
func (s *AuthenticationValidateKeyOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticationValidateKeyOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "success":
			if err := func() error {
				s.Success.Reset()
				if err := s.Success.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticationValidateKeyOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthenticationValidateKeyOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticationValidateKeyOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthenticationValidateKeyUnauthorized) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthenticationValidateKeyUnauthorized) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
	{
		if s.Success.Set {
			e.FieldStart("success")
			s.Success.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthenticationValidateKeyUnauthorized = [3]string{
	0: "status_code",
	1: "status_message",
	2: "success",
}

// Decode decodes AuthenticationValidateKeyUnauthorized from json.
func (s *AuthenticationValidateKeyUnauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticationValidateKeyUnauthorized to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		case "success":
			if err := func() error {
				s.Success.Reset()
				if err := s.Success.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticationValidateKeyUnauthorized")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthenticationValidateKeyUnauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticationValidateKeyUnauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Certifications.Set {
			e.FieldStart("certifications")
			s.Certifications.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOK = [1]string{
	0: "certifications",
}

// Decode decodes CertificationMovieListOK from json.
func (s *CertificationMovieListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certifications":
			if err := func() error {
				s.Certifications.Reset()
				if err := s.Certifications.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certifications\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertifications) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertifications) encodeFields(e *jx.Encoder) {
	{
		if s.AU != nil {
			e.FieldStart("AU")
			e.ArrStart()
			for _, elem := range s.AU {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.BG != nil {
			e.FieldStart("BG")
			e.ArrStart()
			for _, elem := range s.BG {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.BR != nil {
			e.FieldStart("BR")
			e.ArrStart()
			for _, elem := range s.BR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CA != nil {
			e.FieldStart("CA")
			e.ArrStart()
			for _, elem := range s.CA {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CAMinusQC != nil {
			e.FieldStart("CA-QC")
			e.ArrStart()
			for _, elem := range s.CAMinusQC {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DE != nil {
			e.FieldStart("DE")
			e.ArrStart()
			for _, elem := range s.DE {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DK != nil {
			e.FieldStart("DK")
			e.ArrStart()
			for _, elem := range s.DK {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ES != nil {
			e.FieldStart("ES")
			e.ArrStart()
			for _, elem := range s.ES {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.FI != nil {
			e.FieldStart("FI")
			e.ArrStart()
			for _, elem := range s.FI {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.FR != nil {
			e.FieldStart("FR")
			e.ArrStart()
			for _, elem := range s.FR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.GB != nil {
			e.FieldStart("GB")
			e.ArrStart()
			for _, elem := range s.GB {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.HU != nil {
			e.FieldStart("HU")
			e.ArrStart()
			for _, elem := range s.HU {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.IN != nil {
			e.FieldStart("IN")
			e.ArrStart()
			for _, elem := range s.IN {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.IT != nil {
			e.FieldStart("IT")
			e.ArrStart()
			for _, elem := range s.IT {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.LT != nil {
			e.FieldStart("LT")
			e.ArrStart()
			for _, elem := range s.LT {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.MY != nil {
			e.FieldStart("MY")
			e.ArrStart()
			for _, elem := range s.MY {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NL != nil {
			e.FieldStart("NL")
			e.ArrStart()
			for _, elem := range s.NL {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NO != nil {
			e.FieldStart("NO")
			e.ArrStart()
			for _, elem := range s.NO {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NZ != nil {
			e.FieldStart("NZ")
			e.ArrStart()
			for _, elem := range s.NZ {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PH != nil {
			e.FieldStart("PH")
			e.ArrStart()
			for _, elem := range s.PH {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PT != nil {
			e.FieldStart("PT")
			e.ArrStart()
			for _, elem := range s.PT {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RU != nil {
			e.FieldStart("RU")
			e.ArrStart()
			for _, elem := range s.RU {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SE != nil {
			e.FieldStart("SE")
			e.ArrStart()
			for _, elem := range s.SE {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.US != nil {
			e.FieldStart("US")
			e.ArrStart()
			for _, elem := range s.US {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.KR != nil {
			e.FieldStart("KR")
			e.ArrStart()
			for _, elem := range s.KR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SK != nil {
			e.FieldStart("SK")
			e.ArrStart()
			for _, elem := range s.SK {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TH != nil {
			e.FieldStart("TH")
			e.ArrStart()
			for _, elem := range s.TH {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.MX != nil {
			e.FieldStart("MX")
			e.ArrStart()
			for _, elem := range s.MX {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID != nil {
			e.FieldStart("ID")
			e.ArrStart()
			for _, elem := range s.ID {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TR != nil {
			e.FieldStart("TR")
			e.ArrStart()
			for _, elem := range s.TR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AR != nil {
			e.FieldStart("AR")
			e.ArrStart()
			for _, elem := range s.AR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.GR != nil {
			e.FieldStart("GR")
			e.ArrStart()
			for _, elem := range s.GR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TW != nil {
			e.FieldStart("TW")
			e.ArrStart()
			for _, elem := range s.TW {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ZA != nil {
			e.FieldStart("ZA")
			e.ArrStart()
			for _, elem := range s.ZA {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SG != nil {
			e.FieldStart("SG")
			e.ArrStart()
			for _, elem := range s.SG {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.IE != nil {
			e.FieldStart("IE")
			e.ArrStart()
			for _, elem := range s.IE {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PR != nil {
			e.FieldStart("PR")
			e.ArrStart()
			for _, elem := range s.PR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.JP != nil {
			e.FieldStart("JP")
			e.ArrStart()
			for _, elem := range s.JP {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.VI != nil {
			e.FieldStart("VI")
			e.ArrStart()
			for _, elem := range s.VI {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CH != nil {
			e.FieldStart("CH")
			e.ArrStart()
			for _, elem := range s.CH {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.IL != nil {
			e.FieldStart("IL")
			e.ArrStart()
			for _, elem := range s.IL {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.HK != nil {
			e.FieldStart("HK")
			e.ArrStart()
			for _, elem := range s.HK {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.MO != nil {
			e.FieldStart("MO")
			e.ArrStart()
			for _, elem := range s.MO {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.LV != nil {
			e.FieldStart("LV")
			e.ArrStart()
			for _, elem := range s.LV {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.LU != nil {
			e.FieldStart("LU")
			e.ArrStart()
			for _, elem := range s.LU {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertifications = [45]string{
	0:  "AU",
	1:  "BG",
	2:  "BR",
	3:  "CA",
	4:  "CA-QC",
	5:  "DE",
	6:  "DK",
	7:  "ES",
	8:  "FI",
	9:  "FR",
	10: "GB",
	11: "HU",
	12: "IN",
	13: "IT",
	14: "LT",
	15: "MY",
	16: "NL",
	17: "NO",
	18: "NZ",
	19: "PH",
	20: "PT",
	21: "RU",
	22: "SE",
	23: "US",
	24: "KR",
	25: "SK",
	26: "TH",
	27: "MX",
	28: "ID",
	29: "TR",
	30: "AR",
	31: "GR",
	32: "TW",
	33: "ZA",
	34: "SG",
	35: "IE",
	36: "PR",
	37: "JP",
	38: "VI",
	39: "CH",
	40: "IL",
	41: "HK",
	42: "MO",
	43: "LV",
	44: "LU",
}

// Decode decodes CertificationMovieListOKCertifications from json.
func (s *CertificationMovieListOKCertifications) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertifications to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "AU":
			if err := func() error {
				s.AU = make([]CertificationMovieListOKCertificationsAUItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsAUItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AU = append(s.AU, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AU\"")
			}
		case "BG":
			if err := func() error {
				s.BG = make([]CertificationMovieListOKCertificationsBGItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsBGItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.BG = append(s.BG, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BG\"")
			}
		case "BR":
			if err := func() error {
				s.BR = make([]CertificationMovieListOKCertificationsBRItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsBRItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.BR = append(s.BR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BR\"")
			}
		case "CA":
			if err := func() error {
				s.CA = make([]CertificationMovieListOKCertificationsCAItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsCAItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CA = append(s.CA, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CA\"")
			}
		case "CA-QC":
			if err := func() error {
				s.CAMinusQC = make([]CertificationMovieListOKCertificationsCAMinusQCItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsCAMinusQCItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CAMinusQC = append(s.CAMinusQC, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CA-QC\"")
			}
		case "DE":
			if err := func() error {
				s.DE = make([]CertificationMovieListOKCertificationsDEItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsDEItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.DE = append(s.DE, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DE\"")
			}
		case "DK":
			if err := func() error {
				s.DK = make([]CertificationMovieListOKCertificationsDKItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsDKItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.DK = append(s.DK, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DK\"")
			}
		case "ES":
			if err := func() error {
				s.ES = make([]CertificationMovieListOKCertificationsESItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsESItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ES = append(s.ES, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ES\"")
			}
		case "FI":
			if err := func() error {
				s.FI = make([]CertificationMovieListOKCertificationsFIItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsFIItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.FI = append(s.FI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FI\"")
			}
		case "FR":
			if err := func() error {
				s.FR = make([]CertificationMovieListOKCertificationsFRItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsFRItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.FR = append(s.FR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FR\"")
			}
		case "GB":
			if err := func() error {
				s.GB = make([]CertificationMovieListOKCertificationsGBItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsGBItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.GB = append(s.GB, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GB\"")
			}
		case "HU":
			if err := func() error {
				s.HU = make([]CertificationMovieListOKCertificationsHUItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsHUItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.HU = append(s.HU, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HU\"")
			}
		case "IN":
			if err := func() error {
				s.IN = make([]CertificationMovieListOKCertificationsINItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsINItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.IN = append(s.IN, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IN\"")
			}
		case "IT":
			if err := func() error {
				s.IT = make([]CertificationMovieListOKCertificationsITItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsITItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.IT = append(s.IT, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IT\"")
			}
		case "LT":
			if err := func() error {
				s.LT = make([]CertificationMovieListOKCertificationsLTItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsLTItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.LT = append(s.LT, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LT\"")
			}
		case "MY":
			if err := func() error {
				s.MY = make([]CertificationMovieListOKCertificationsMYItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsMYItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.MY = append(s.MY, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MY\"")
			}
		case "NL":
			if err := func() error {
				s.NL = make([]CertificationMovieListOKCertificationsNLItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsNLItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.NL = append(s.NL, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NL\"")
			}
		case "NO":
			if err := func() error {
				s.NO = make([]CertificationMovieListOKCertificationsNOItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsNOItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.NO = append(s.NO, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NO\"")
			}
		case "NZ":
			if err := func() error {
				s.NZ = make([]CertificationMovieListOKCertificationsNZItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsNZItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.NZ = append(s.NZ, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NZ\"")
			}
		case "PH":
			if err := func() error {
				s.PH = make([]CertificationMovieListOKCertificationsPHItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsPHItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PH = append(s.PH, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PH\"")
			}
		case "PT":
			if err := func() error {
				s.PT = make([]CertificationMovieListOKCertificationsPTItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsPTItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PT = append(s.PT, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PT\"")
			}
		case "RU":
			if err := func() error {
				s.RU = make([]CertificationMovieListOKCertificationsRUItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsRUItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.RU = append(s.RU, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RU\"")
			}
		case "SE":
			if err := func() error {
				s.SE = make([]CertificationMovieListOKCertificationsSEItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsSEItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SE = append(s.SE, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SE\"")
			}
		case "US":
			if err := func() error {
				s.US = make([]CertificationMovieListOKCertificationsUSItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsUSItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.US = append(s.US, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"US\"")
			}
		case "KR":
			if err := func() error {
				s.KR = make([]CertificationMovieListOKCertificationsKRItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsKRItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.KR = append(s.KR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"KR\"")
			}
		case "SK":
			if err := func() error {
				s.SK = make([]CertificationMovieListOKCertificationsSKItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsSKItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SK = append(s.SK, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SK\"")
			}
		case "TH":
			if err := func() error {
				s.TH = make([]CertificationMovieListOKCertificationsTHItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsTHItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.TH = append(s.TH, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TH\"")
			}
		case "MX":
			if err := func() error {
				s.MX = make([]CertificationMovieListOKCertificationsMXItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsMXItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.MX = append(s.MX, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MX\"")
			}
		case "ID":
			if err := func() error {
				s.ID = make([]CertificationMovieListOKCertificationsIDItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsIDItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ID = append(s.ID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ID\"")
			}
		case "TR":
			if err := func() error {
				s.TR = make([]CertificationMovieListOKCertificationsTRItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsTRItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.TR = append(s.TR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TR\"")
			}
		case "AR":
			if err := func() error {
				s.AR = make([]CertificationMovieListOKCertificationsARItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsARItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AR = append(s.AR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AR\"")
			}
		case "GR":
			if err := func() error {
				s.GR = make([]CertificationMovieListOKCertificationsGRItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsGRItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.GR = append(s.GR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GR\"")
			}
		case "TW":
			if err := func() error {
				s.TW = make([]CertificationMovieListOKCertificationsTWItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsTWItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.TW = append(s.TW, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TW\"")
			}
		case "ZA":
			if err := func() error {
				s.ZA = make([]CertificationMovieListOKCertificationsZAItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsZAItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ZA = append(s.ZA, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ZA\"")
			}
		case "SG":
			if err := func() error {
				s.SG = make([]CertificationMovieListOKCertificationsSGItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsSGItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SG = append(s.SG, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SG\"")
			}
		case "IE":
			if err := func() error {
				s.IE = make([]CertificationMovieListOKCertificationsIEItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsIEItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.IE = append(s.IE, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IE\"")
			}
		case "PR":
			if err := func() error {
				s.PR = make([]CertificationMovieListOKCertificationsPRItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsPRItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PR = append(s.PR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PR\"")
			}
		case "JP":
			if err := func() error {
				s.JP = make([]CertificationMovieListOKCertificationsJPItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsJPItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.JP = append(s.JP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JP\"")
			}
		case "VI":
			if err := func() error {
				s.VI = make([]CertificationMovieListOKCertificationsVIItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsVIItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VI = append(s.VI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"VI\"")
			}
		case "CH":
			if err := func() error {
				s.CH = make([]CertificationMovieListOKCertificationsCHItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsCHItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CH = append(s.CH, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CH\"")
			}
		case "IL":
			if err := func() error {
				s.IL = make([]CertificationMovieListOKCertificationsILItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsILItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.IL = append(s.IL, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IL\"")
			}
		case "HK":
			if err := func() error {
				s.HK = make([]CertificationMovieListOKCertificationsHKItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsHKItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.HK = append(s.HK, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HK\"")
			}
		case "MO":
			if err := func() error {
				s.MO = make([]CertificationMovieListOKCertificationsMOItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsMOItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.MO = append(s.MO, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MO\"")
			}
		case "LV":
			if err := func() error {
				s.LV = make([]CertificationMovieListOKCertificationsLVItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsLVItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.LV = append(s.LV, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LV\"")
			}
		case "LU":
			if err := func() error {
				s.LU = make([]CertificationMovieListOKCertificationsLUItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationMovieListOKCertificationsLUItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.LU = append(s.LU, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LU\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertifications")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertifications) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertifications) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsARItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsARItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsARItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsARItem from json.
func (s *CertificationMovieListOKCertificationsARItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsARItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsARItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsARItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsARItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsAUItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsAUItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsAUItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsAUItem from json.
func (s *CertificationMovieListOKCertificationsAUItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsAUItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsAUItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsAUItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsAUItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsBGItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsBGItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsBGItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsBGItem from json.
func (s *CertificationMovieListOKCertificationsBGItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsBGItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsBGItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsBGItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsBGItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsBRItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsBRItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsBRItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsBRItem from json.
func (s *CertificationMovieListOKCertificationsBRItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsBRItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsBRItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsBRItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsBRItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsCAItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsCAItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsCAItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsCAItem from json.
func (s *CertificationMovieListOKCertificationsCAItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsCAItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsCAItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsCAItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsCAItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsCAMinusQCItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsCAMinusQCItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsCAMinusQCItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsCAMinusQCItem from json.
func (s *CertificationMovieListOKCertificationsCAMinusQCItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsCAMinusQCItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsCAMinusQCItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsCAMinusQCItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsCAMinusQCItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsCHItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsCHItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsCHItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsCHItem from json.
func (s *CertificationMovieListOKCertificationsCHItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsCHItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsCHItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsCHItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsCHItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsDEItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsDEItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsDEItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsDEItem from json.
func (s *CertificationMovieListOKCertificationsDEItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsDEItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsDEItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsDEItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsDEItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsDKItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsDKItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsDKItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsDKItem from json.
func (s *CertificationMovieListOKCertificationsDKItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsDKItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsDKItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsDKItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsDKItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsESItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsESItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsESItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsESItem from json.
func (s *CertificationMovieListOKCertificationsESItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsESItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsESItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsESItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsESItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsFIItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsFIItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsFIItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsFIItem from json.
func (s *CertificationMovieListOKCertificationsFIItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsFIItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsFIItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsFIItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsFIItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsFRItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsFRItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsFRItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsFRItem from json.
func (s *CertificationMovieListOKCertificationsFRItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsFRItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsFRItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsFRItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsFRItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsGBItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsGBItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsGBItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsGBItem from json.
func (s *CertificationMovieListOKCertificationsGBItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsGBItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsGBItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsGBItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsGBItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsGRItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsGRItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsGRItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsGRItem from json.
func (s *CertificationMovieListOKCertificationsGRItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsGRItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsGRItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsGRItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsGRItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsHKItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsHKItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsHKItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsHKItem from json.
func (s *CertificationMovieListOKCertificationsHKItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsHKItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsHKItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsHKItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsHKItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsHUItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsHUItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsHUItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsHUItem from json.
func (s *CertificationMovieListOKCertificationsHUItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsHUItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsHUItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsHUItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsHUItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsIDItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsIDItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsIDItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsIDItem from json.
func (s *CertificationMovieListOKCertificationsIDItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsIDItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsIDItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsIDItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsIDItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsIEItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsIEItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsIEItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsIEItem from json.
func (s *CertificationMovieListOKCertificationsIEItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsIEItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsIEItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsIEItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsIEItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsILItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsILItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsILItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsILItem from json.
func (s *CertificationMovieListOKCertificationsILItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsILItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsILItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsILItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsILItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsINItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsINItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsINItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsINItem from json.
func (s *CertificationMovieListOKCertificationsINItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsINItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsINItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsINItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsINItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsITItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsITItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsITItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsITItem from json.
func (s *CertificationMovieListOKCertificationsITItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsITItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsITItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsITItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsITItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsJPItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsJPItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsJPItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsJPItem from json.
func (s *CertificationMovieListOKCertificationsJPItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsJPItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsJPItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsJPItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsJPItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsKRItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsKRItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsKRItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsKRItem from json.
func (s *CertificationMovieListOKCertificationsKRItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsKRItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsKRItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsKRItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsKRItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsLTItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsLTItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsLTItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsLTItem from json.
func (s *CertificationMovieListOKCertificationsLTItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsLTItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsLTItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsLTItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsLTItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsLUItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsLUItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsLUItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsLUItem from json.
func (s *CertificationMovieListOKCertificationsLUItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsLUItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsLUItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsLUItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsLUItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsLVItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsLVItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsLVItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsLVItem from json.
func (s *CertificationMovieListOKCertificationsLVItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsLVItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsLVItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsLVItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsLVItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsMOItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsMOItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsMOItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsMOItem from json.
func (s *CertificationMovieListOKCertificationsMOItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsMOItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsMOItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsMOItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsMOItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsMXItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsMXItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsMXItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsMXItem from json.
func (s *CertificationMovieListOKCertificationsMXItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsMXItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsMXItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsMXItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsMXItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsMYItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsMYItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsMYItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsMYItem from json.
func (s *CertificationMovieListOKCertificationsMYItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsMYItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsMYItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsMYItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsMYItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsNLItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsNLItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsNLItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsNLItem from json.
func (s *CertificationMovieListOKCertificationsNLItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsNLItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsNLItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsNLItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsNLItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsNOItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsNOItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsNOItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsNOItem from json.
func (s *CertificationMovieListOKCertificationsNOItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsNOItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsNOItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsNOItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsNOItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsNZItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsNZItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsNZItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsNZItem from json.
func (s *CertificationMovieListOKCertificationsNZItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsNZItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsNZItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsNZItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsNZItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsPHItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsPHItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsPHItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsPHItem from json.
func (s *CertificationMovieListOKCertificationsPHItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsPHItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsPHItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsPHItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsPHItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsPRItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsPRItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsPRItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsPRItem from json.
func (s *CertificationMovieListOKCertificationsPRItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsPRItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsPRItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsPRItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsPRItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsPTItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsPTItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsPTItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsPTItem from json.
func (s *CertificationMovieListOKCertificationsPTItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsPTItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsPTItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsPTItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsPTItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsRUItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsRUItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsRUItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsRUItem from json.
func (s *CertificationMovieListOKCertificationsRUItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsRUItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsRUItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsRUItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsRUItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsSEItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsSEItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsSEItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsSEItem from json.
func (s *CertificationMovieListOKCertificationsSEItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsSEItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsSEItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsSEItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsSEItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsSGItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsSGItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsSGItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsSGItem from json.
func (s *CertificationMovieListOKCertificationsSGItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsSGItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsSGItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsSGItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsSGItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsSKItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsSKItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsSKItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsSKItem from json.
func (s *CertificationMovieListOKCertificationsSKItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsSKItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsSKItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsSKItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsSKItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsTHItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsTHItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsTHItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsTHItem from json.
func (s *CertificationMovieListOKCertificationsTHItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsTHItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsTHItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsTHItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsTHItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsTRItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsTRItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsTRItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsTRItem from json.
func (s *CertificationMovieListOKCertificationsTRItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsTRItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsTRItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsTRItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsTRItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsTWItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsTWItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsTWItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsTWItem from json.
func (s *CertificationMovieListOKCertificationsTWItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsTWItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsTWItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsTWItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsTWItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsUSItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsUSItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsUSItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsUSItem from json.
func (s *CertificationMovieListOKCertificationsUSItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsUSItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsUSItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsUSItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsUSItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsVIItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsVIItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsVIItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsVIItem from json.
func (s *CertificationMovieListOKCertificationsVIItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsVIItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsVIItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsVIItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsVIItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationMovieListOKCertificationsZAItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationMovieListOKCertificationsZAItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationMovieListOKCertificationsZAItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationMovieListOKCertificationsZAItem from json.
func (s *CertificationMovieListOKCertificationsZAItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationMovieListOKCertificationsZAItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationMovieListOKCertificationsZAItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationMovieListOKCertificationsZAItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationMovieListOKCertificationsZAItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Certifications.Set {
			e.FieldStart("certifications")
			s.Certifications.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOK = [1]string{
	0: "certifications",
}

// Decode decodes CertificationsTvListOK from json.
func (s *CertificationsTvListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certifications":
			if err := func() error {
				s.Certifications.Reset()
				if err := s.Certifications.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certifications\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertifications) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertifications) encodeFields(e *jx.Encoder) {
	{
		if s.AU != nil {
			e.FieldStart("AU")
			e.ArrStart()
			for _, elem := range s.AU {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.BR != nil {
			e.FieldStart("BR")
			e.ArrStart()
			for _, elem := range s.BR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CA != nil {
			e.FieldStart("CA")
			e.ArrStart()
			for _, elem := range s.CA {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CAMinusQC != nil {
			e.FieldStart("CA-QC")
			e.ArrStart()
			for _, elem := range s.CAMinusQC {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DE != nil {
			e.FieldStart("DE")
			e.ArrStart()
			for _, elem := range s.DE {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ES != nil {
			e.FieldStart("ES")
			e.ArrStart()
			for _, elem := range s.ES {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.FR != nil {
			e.FieldStart("FR")
			e.ArrStart()
			for _, elem := range s.FR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.GB != nil {
			e.FieldStart("GB")
			e.ArrStart()
			for _, elem := range s.GB {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.HU != nil {
			e.FieldStart("HU")
			e.ArrStart()
			for _, elem := range s.HU {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.KR != nil {
			e.FieldStart("KR")
			e.ArrStart()
			for _, elem := range s.KR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.LT != nil {
			e.FieldStart("LT")
			e.ArrStart()
			for _, elem := range s.LT {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NL != nil {
			e.FieldStart("NL")
			e.ArrStart()
			for _, elem := range s.NL {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PH != nil {
			e.FieldStart("PH")
			e.ArrStart()
			for _, elem := range s.PH {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PT != nil {
			e.FieldStart("PT")
			e.ArrStart()
			for _, elem := range s.PT {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.RU != nil {
			e.FieldStart("RU")
			e.ArrStart()
			for _, elem := range s.RU {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SK != nil {
			e.FieldStart("SK")
			e.ArrStart()
			for _, elem := range s.SK {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TH != nil {
			e.FieldStart("TH")
			e.ArrStart()
			for _, elem := range s.TH {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.US != nil {
			e.FieldStart("US")
			e.ArrStart()
			for _, elem := range s.US {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.IT != nil {
			e.FieldStart("IT")
			e.ArrStart()
			for _, elem := range s.IT {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.FI != nil {
			e.FieldStart("FI")
			e.ArrStart()
			for _, elem := range s.FI {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.MY != nil {
			e.FieldStart("MY")
			e.ArrStart()
			for _, elem := range s.MY {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NZ != nil {
			e.FieldStart("NZ")
			e.ArrStart()
			for _, elem := range s.NZ {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NO != nil {
			e.FieldStart("NO")
			e.ArrStart()
			for _, elem := range s.NO {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.BG != nil {
			e.FieldStart("BG")
			e.ArrStart()
			for _, elem := range s.BG {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.MX != nil {
			e.FieldStart("MX")
			e.ArrStart()
			for _, elem := range s.MX {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.IN != nil {
			e.FieldStart("IN")
			e.ArrStart()
			for _, elem := range s.IN {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DK != nil {
			e.FieldStart("DK")
			e.ArrStart()
			for _, elem := range s.DK {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SE != nil {
			e.FieldStart("SE")
			e.ArrStart()
			for _, elem := range s.SE {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID != nil {
			e.FieldStart("ID")
			e.ArrStart()
			for _, elem := range s.ID {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TR != nil {
			e.FieldStart("TR")
			e.ArrStart()
			for _, elem := range s.TR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AR != nil {
			e.FieldStart("AR")
			e.ArrStart()
			for _, elem := range s.AR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PL != nil {
			e.FieldStart("PL")
			e.ArrStart()
			for _, elem := range s.PL {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.MA != nil {
			e.FieldStart("MA")
			e.ArrStart()
			for _, elem := range s.MA {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.GR != nil {
			e.FieldStart("GR")
			e.ArrStart()
			for _, elem := range s.GR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.IL != nil {
			e.FieldStart("IL")
			e.ArrStart()
			for _, elem := range s.IL {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TW != nil {
			e.FieldStart("TW")
			e.ArrStart()
			for _, elem := range s.TW {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ZA != nil {
			e.FieldStart("ZA")
			e.ArrStart()
			for _, elem := range s.ZA {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SG != nil {
			e.FieldStart("SG")
			e.ArrStart()
			for _, elem := range s.SG {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PR != nil {
			e.FieldStart("PR")
			e.ArrStart()
			for _, elem := range s.PR {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.VI != nil {
			e.FieldStart("VI")
			e.ArrStart()
			for _, elem := range s.VI {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertifications = [40]string{
	0:  "AU",
	1:  "BR",
	2:  "CA",
	3:  "CA-QC",
	4:  "DE",
	5:  "ES",
	6:  "FR",
	7:  "GB",
	8:  "HU",
	9:  "KR",
	10: "LT",
	11: "NL",
	12: "PH",
	13: "PT",
	14: "RU",
	15: "SK",
	16: "TH",
	17: "US",
	18: "IT",
	19: "FI",
	20: "MY",
	21: "NZ",
	22: "NO",
	23: "BG",
	24: "MX",
	25: "IN",
	26: "DK",
	27: "SE",
	28: "ID",
	29: "TR",
	30: "AR",
	31: "PL",
	32: "MA",
	33: "GR",
	34: "IL",
	35: "TW",
	36: "ZA",
	37: "SG",
	38: "PR",
	39: "VI",
}

// Decode decodes CertificationsTvListOKCertifications from json.
func (s *CertificationsTvListOKCertifications) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertifications to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "AU":
			if err := func() error {
				s.AU = make([]CertificationsTvListOKCertificationsAUItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsAUItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AU = append(s.AU, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AU\"")
			}
		case "BR":
			if err := func() error {
				s.BR = make([]CertificationsTvListOKCertificationsBRItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsBRItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.BR = append(s.BR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BR\"")
			}
		case "CA":
			if err := func() error {
				s.CA = make([]CertificationsTvListOKCertificationsCAItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsCAItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CA = append(s.CA, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CA\"")
			}
		case "CA-QC":
			if err := func() error {
				s.CAMinusQC = make([]CertificationsTvListOKCertificationsCAMinusQCItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsCAMinusQCItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CAMinusQC = append(s.CAMinusQC, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CA-QC\"")
			}
		case "DE":
			if err := func() error {
				s.DE = make([]CertificationsTvListOKCertificationsDEItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsDEItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.DE = append(s.DE, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DE\"")
			}
		case "ES":
			if err := func() error {
				s.ES = make([]CertificationsTvListOKCertificationsESItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsESItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ES = append(s.ES, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ES\"")
			}
		case "FR":
			if err := func() error {
				s.FR = make([]CertificationsTvListOKCertificationsFRItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsFRItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.FR = append(s.FR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FR\"")
			}
		case "GB":
			if err := func() error {
				s.GB = make([]CertificationsTvListOKCertificationsGBItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsGBItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.GB = append(s.GB, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GB\"")
			}
		case "HU":
			if err := func() error {
				s.HU = make([]CertificationsTvListOKCertificationsHUItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsHUItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.HU = append(s.HU, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HU\"")
			}
		case "KR":
			if err := func() error {
				s.KR = make([]CertificationsTvListOKCertificationsKRItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsKRItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.KR = append(s.KR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"KR\"")
			}
		case "LT":
			if err := func() error {
				s.LT = make([]CertificationsTvListOKCertificationsLTItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsLTItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.LT = append(s.LT, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LT\"")
			}
		case "NL":
			if err := func() error {
				s.NL = make([]CertificationsTvListOKCertificationsNLItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsNLItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.NL = append(s.NL, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NL\"")
			}
		case "PH":
			if err := func() error {
				s.PH = make([]CertificationsTvListOKCertificationsPHItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsPHItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PH = append(s.PH, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PH\"")
			}
		case "PT":
			if err := func() error {
				s.PT = make([]CertificationsTvListOKCertificationsPTItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsPTItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PT = append(s.PT, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PT\"")
			}
		case "RU":
			if err := func() error {
				s.RU = make([]CertificationsTvListOKCertificationsRUItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsRUItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.RU = append(s.RU, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RU\"")
			}
		case "SK":
			if err := func() error {
				s.SK = make([]CertificationsTvListOKCertificationsSKItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsSKItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SK = append(s.SK, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SK\"")
			}
		case "TH":
			if err := func() error {
				s.TH = make([]CertificationsTvListOKCertificationsTHItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsTHItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.TH = append(s.TH, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TH\"")
			}
		case "US":
			if err := func() error {
				s.US = make([]CertificationsTvListOKCertificationsUSItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsUSItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.US = append(s.US, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"US\"")
			}
		case "IT":
			if err := func() error {
				s.IT = make([]CertificationsTvListOKCertificationsITItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsITItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.IT = append(s.IT, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IT\"")
			}
		case "FI":
			if err := func() error {
				s.FI = make([]CertificationsTvListOKCertificationsFIItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsFIItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.FI = append(s.FI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FI\"")
			}
		case "MY":
			if err := func() error {
				s.MY = make([]CertificationsTvListOKCertificationsMYItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsMYItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.MY = append(s.MY, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MY\"")
			}
		case "NZ":
			if err := func() error {
				s.NZ = make([]CertificationsTvListOKCertificationsNZItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsNZItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.NZ = append(s.NZ, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NZ\"")
			}
		case "NO":
			if err := func() error {
				s.NO = make([]CertificationsTvListOKCertificationsNOItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsNOItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.NO = append(s.NO, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NO\"")
			}
		case "BG":
			if err := func() error {
				s.BG = make([]CertificationsTvListOKCertificationsBGItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsBGItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.BG = append(s.BG, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BG\"")
			}
		case "MX":
			if err := func() error {
				s.MX = make([]CertificationsTvListOKCertificationsMXItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsMXItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.MX = append(s.MX, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MX\"")
			}
		case "IN":
			if err := func() error {
				s.IN = make([]CertificationsTvListOKCertificationsINItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsINItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.IN = append(s.IN, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IN\"")
			}
		case "DK":
			if err := func() error {
				s.DK = make([]CertificationsTvListOKCertificationsDKItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsDKItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.DK = append(s.DK, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DK\"")
			}
		case "SE":
			if err := func() error {
				s.SE = make([]CertificationsTvListOKCertificationsSEItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsSEItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SE = append(s.SE, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SE\"")
			}
		case "ID":
			if err := func() error {
				s.ID = make([]CertificationsTvListOKCertificationsIDItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsIDItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ID = append(s.ID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ID\"")
			}
		case "TR":
			if err := func() error {
				s.TR = make([]CertificationsTvListOKCertificationsTRItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsTRItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.TR = append(s.TR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TR\"")
			}
		case "AR":
			if err := func() error {
				s.AR = make([]CertificationsTvListOKCertificationsARItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsARItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AR = append(s.AR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AR\"")
			}
		case "PL":
			if err := func() error {
				s.PL = make([]CertificationsTvListOKCertificationsPLItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsPLItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PL = append(s.PL, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PL\"")
			}
		case "MA":
			if err := func() error {
				s.MA = make([]CertificationsTvListOKCertificationsMAItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsMAItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.MA = append(s.MA, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MA\"")
			}
		case "GR":
			if err := func() error {
				s.GR = make([]CertificationsTvListOKCertificationsGRItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsGRItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.GR = append(s.GR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GR\"")
			}
		case "IL":
			if err := func() error {
				s.IL = make([]CertificationsTvListOKCertificationsILItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsILItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.IL = append(s.IL, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IL\"")
			}
		case "TW":
			if err := func() error {
				s.TW = make([]CertificationsTvListOKCertificationsTWItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsTWItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.TW = append(s.TW, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TW\"")
			}
		case "ZA":
			if err := func() error {
				s.ZA = make([]CertificationsTvListOKCertificationsZAItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsZAItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ZA = append(s.ZA, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ZA\"")
			}
		case "SG":
			if err := func() error {
				s.SG = make([]CertificationsTvListOKCertificationsSGItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsSGItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SG = append(s.SG, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SG\"")
			}
		case "PR":
			if err := func() error {
				s.PR = make([]CertificationsTvListOKCertificationsPRItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsPRItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PR = append(s.PR, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PR\"")
			}
		case "VI":
			if err := func() error {
				s.VI = make([]CertificationsTvListOKCertificationsVIItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CertificationsTvListOKCertificationsVIItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VI = append(s.VI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"VI\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertifications")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertifications) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertifications) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsARItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsARItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsARItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsARItem from json.
func (s *CertificationsTvListOKCertificationsARItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsARItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsARItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsARItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsARItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsAUItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsAUItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsAUItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsAUItem from json.
func (s *CertificationsTvListOKCertificationsAUItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsAUItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsAUItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsAUItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsAUItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsBGItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsBGItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsBGItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsBGItem from json.
func (s *CertificationsTvListOKCertificationsBGItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsBGItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsBGItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsBGItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsBGItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsBRItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsBRItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsBRItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsBRItem from json.
func (s *CertificationsTvListOKCertificationsBRItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsBRItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsBRItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsBRItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsBRItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsCAItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsCAItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsCAItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsCAItem from json.
func (s *CertificationsTvListOKCertificationsCAItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsCAItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsCAItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsCAItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsCAItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsCAMinusQCItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsCAMinusQCItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsCAMinusQCItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsCAMinusQCItem from json.
func (s *CertificationsTvListOKCertificationsCAMinusQCItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsCAMinusQCItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsCAMinusQCItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsCAMinusQCItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsCAMinusQCItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsDEItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsDEItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsDEItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsDEItem from json.
func (s *CertificationsTvListOKCertificationsDEItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsDEItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsDEItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsDEItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsDEItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsDKItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsDKItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsDKItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsDKItem from json.
func (s *CertificationsTvListOKCertificationsDKItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsDKItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsDKItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsDKItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsDKItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsESItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsESItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsESItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsESItem from json.
func (s *CertificationsTvListOKCertificationsESItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsESItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsESItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsESItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsESItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsFIItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsFIItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsFIItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsFIItem from json.
func (s *CertificationsTvListOKCertificationsFIItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsFIItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsFIItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsFIItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsFIItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsFRItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsFRItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsFRItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsFRItem from json.
func (s *CertificationsTvListOKCertificationsFRItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsFRItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsFRItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsFRItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsFRItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsGBItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsGBItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsGBItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsGBItem from json.
func (s *CertificationsTvListOKCertificationsGBItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsGBItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsGBItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsGBItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsGBItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsGRItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsGRItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsGRItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsGRItem from json.
func (s *CertificationsTvListOKCertificationsGRItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsGRItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsGRItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsGRItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsGRItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsHUItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsHUItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsHUItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsHUItem from json.
func (s *CertificationsTvListOKCertificationsHUItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsHUItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsHUItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsHUItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsHUItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsIDItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsIDItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsIDItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsIDItem from json.
func (s *CertificationsTvListOKCertificationsIDItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsIDItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsIDItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsIDItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsIDItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsILItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsILItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsILItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsILItem from json.
func (s *CertificationsTvListOKCertificationsILItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsILItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsILItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsILItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsILItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsINItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsINItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsINItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsINItem from json.
func (s *CertificationsTvListOKCertificationsINItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsINItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsINItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsINItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsINItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsITItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsITItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsITItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsITItem from json.
func (s *CertificationsTvListOKCertificationsITItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsITItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsITItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsITItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsITItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsKRItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsKRItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsKRItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsKRItem from json.
func (s *CertificationsTvListOKCertificationsKRItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsKRItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsKRItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsKRItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsKRItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsLTItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsLTItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsLTItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsLTItem from json.
func (s *CertificationsTvListOKCertificationsLTItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsLTItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsLTItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsLTItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsLTItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsMAItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsMAItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsMAItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsMAItem from json.
func (s *CertificationsTvListOKCertificationsMAItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsMAItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsMAItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsMAItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsMAItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsMXItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsMXItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsMXItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsMXItem from json.
func (s *CertificationsTvListOKCertificationsMXItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsMXItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsMXItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsMXItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsMXItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsMYItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsMYItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsMYItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsMYItem from json.
func (s *CertificationsTvListOKCertificationsMYItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsMYItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsMYItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsMYItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsMYItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsNLItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsNLItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsNLItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsNLItem from json.
func (s *CertificationsTvListOKCertificationsNLItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsNLItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsNLItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsNLItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsNLItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsNOItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsNOItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsNOItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsNOItem from json.
func (s *CertificationsTvListOKCertificationsNOItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsNOItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsNOItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsNOItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsNOItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsNZItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsNZItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsNZItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsNZItem from json.
func (s *CertificationsTvListOKCertificationsNZItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsNZItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsNZItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsNZItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsNZItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsPHItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsPHItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsPHItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsPHItem from json.
func (s *CertificationsTvListOKCertificationsPHItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsPHItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsPHItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsPHItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsPHItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsPLItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsPLItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsPLItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsPLItem from json.
func (s *CertificationsTvListOKCertificationsPLItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsPLItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsPLItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsPLItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsPLItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsPRItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsPRItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsPRItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsPRItem from json.
func (s *CertificationsTvListOKCertificationsPRItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsPRItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsPRItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsPRItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsPRItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsPTItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsPTItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsPTItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsPTItem from json.
func (s *CertificationsTvListOKCertificationsPTItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsPTItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsPTItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsPTItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsPTItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsRUItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsRUItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsRUItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsRUItem from json.
func (s *CertificationsTvListOKCertificationsRUItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsRUItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsRUItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsRUItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsRUItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsSEItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsSEItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsSEItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsSEItem from json.
func (s *CertificationsTvListOKCertificationsSEItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsSEItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsSEItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsSEItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsSEItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsSGItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsSGItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsSGItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsSGItem from json.
func (s *CertificationsTvListOKCertificationsSGItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsSGItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsSGItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsSGItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsSGItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsSKItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsSKItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsSKItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsSKItem from json.
func (s *CertificationsTvListOKCertificationsSKItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsSKItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsSKItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsSKItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsSKItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsTHItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsTHItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsTHItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsTHItem from json.
func (s *CertificationsTvListOKCertificationsTHItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsTHItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsTHItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsTHItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsTHItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsTRItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsTRItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsTRItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsTRItem from json.
func (s *CertificationsTvListOKCertificationsTRItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsTRItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsTRItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsTRItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsTRItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsTWItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsTWItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsTWItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsTWItem from json.
func (s *CertificationsTvListOKCertificationsTWItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsTWItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsTWItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsTWItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsTWItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsUSItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsUSItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsUSItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsUSItem from json.
func (s *CertificationsTvListOKCertificationsUSItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsUSItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsUSItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsUSItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsUSItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsVIItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsVIItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsVIItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsVIItem from json.
func (s *CertificationsTvListOKCertificationsVIItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsVIItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsVIItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsVIItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsVIItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CertificationsTvListOKCertificationsZAItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CertificationsTvListOKCertificationsZAItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Meaning.Set {
			e.FieldStart("meaning")
			s.Meaning.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfCertificationsTvListOKCertificationsZAItem = [3]string{
	0: "certification",
	1: "meaning",
	2: "order",
}

// Decode decodes CertificationsTvListOKCertificationsZAItem from json.
func (s *CertificationsTvListOKCertificationsZAItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CertificationsTvListOKCertificationsZAItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "meaning":
			if err := func() error {
				s.Meaning.Reset()
				if err := s.Meaning.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"meaning\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CertificationsTvListOKCertificationsZAItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CertificationsTvListOKCertificationsZAItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CertificationsTvListOKCertificationsZAItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChangesMovieListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChangesMovieListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfChangesMovieListOK = [4]string{
	0: "results",
	1: "page",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes ChangesMovieListOK from json.
func (s *ChangesMovieListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangesMovieListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "results":
			if err := func() error {
				s.Results = make([]ChangesMovieListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ChangesMovieListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChangesMovieListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChangesMovieListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangesMovieListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChangesMovieListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChangesMovieListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
}

var jsonFieldsNameOfChangesMovieListOKResultsItem = [2]string{
	0: "id",
	1: "adult",
}

// Decode decodes ChangesMovieListOKResultsItem from json.
func (s *ChangesMovieListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangesMovieListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChangesMovieListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChangesMovieListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangesMovieListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChangesPeopleListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChangesPeopleListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfChangesPeopleListOK = [4]string{
	0: "results",
	1: "page",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes ChangesPeopleListOK from json.
func (s *ChangesPeopleListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangesPeopleListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "results":
			if err := func() error {
				s.Results = make([]ChangesPeopleListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ChangesPeopleListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChangesPeopleListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChangesPeopleListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangesPeopleListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChangesPeopleListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChangesPeopleListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
}

var jsonFieldsNameOfChangesPeopleListOKResultsItem = [2]string{
	0: "id",
	1: "adult",
}

// Decode decodes ChangesPeopleListOKResultsItem from json.
func (s *ChangesPeopleListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangesPeopleListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChangesPeopleListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChangesPeopleListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangesPeopleListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChangesTvListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChangesTvListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfChangesTvListOK = [4]string{
	0: "results",
	1: "page",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes ChangesTvListOK from json.
func (s *ChangesTvListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangesTvListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "results":
			if err := func() error {
				s.Results = make([]ChangesTvListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ChangesTvListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChangesTvListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChangesTvListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangesTvListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChangesTvListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChangesTvListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
}

var jsonFieldsNameOfChangesTvListOKResultsItem = [2]string{
	0: "id",
	1: "adult",
}

// Decode decodes ChangesTvListOKResultsItem from json.
func (s *ChangesTvListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangesTvListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChangesTvListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChangesTvListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangesTvListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CollectionDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CollectionDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.Parts != nil {
			e.FieldStart("parts")
			e.ArrStart()
			for _, elem := range s.Parts {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCollectionDetailsOK = [6]string{
	0: "id",
	1: "name",
	2: "overview",
	3: "poster_path",
	4: "backdrop_path",
	5: "parts",
}

// Decode decodes CollectionDetailsOK from json.
func (s *CollectionDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CollectionDetailsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "parts":
			if err := func() error {
				s.Parts = make([]CollectionDetailsOKPartsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CollectionDetailsOKPartsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Parts = append(s.Parts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parts\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CollectionDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CollectionDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CollectionDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CollectionDetailsOKPartsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CollectionDetailsOKPartsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfCollectionDetailsOKPartsItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "id",
	3:  "title",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "poster_path",
	8:  "media_type",
	9:  "genre_ids",
	10: "popularity",
	11: "release_date",
	12: "video",
	13: "vote_average",
	14: "vote_count",
}

// Decode decodes CollectionDetailsOKPartsItem from json.
func (s *CollectionDetailsOKPartsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CollectionDetailsOKPartsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CollectionDetailsOKPartsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CollectionDetailsOKPartsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CollectionDetailsOKPartsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CollectionImagesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CollectionImagesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Backdrops != nil {
			e.FieldStart("backdrops")
			e.ArrStart()
			for _, elem := range s.Backdrops {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Posters != nil {
			e.FieldStart("posters")
			e.ArrStart()
			for _, elem := range s.Posters {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCollectionImagesOK = [3]string{
	0: "id",
	1: "backdrops",
	2: "posters",
}

// Decode decodes CollectionImagesOK from json.
func (s *CollectionImagesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CollectionImagesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "backdrops":
			if err := func() error {
				s.Backdrops = make([]CollectionImagesOKBackdropsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CollectionImagesOKBackdropsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Backdrops = append(s.Backdrops, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrops\"")
			}
		case "posters":
			if err := func() error {
				s.Posters = make([]CollectionImagesOKPostersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CollectionImagesOKPostersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Posters = append(s.Posters, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"posters\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CollectionImagesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CollectionImagesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CollectionImagesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CollectionImagesOKBackdropsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CollectionImagesOKBackdropsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
}

var jsonFieldsNameOfCollectionImagesOKBackdropsItem = [7]string{
	0: "aspect_ratio",
	1: "height",
	2: "iso_639_1",
	3: "file_path",
	4: "vote_average",
	5: "vote_count",
	6: "width",
}

// Decode decodes CollectionImagesOKBackdropsItem from json.
func (s *CollectionImagesOKBackdropsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CollectionImagesOKBackdropsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CollectionImagesOKBackdropsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CollectionImagesOKBackdropsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CollectionImagesOKBackdropsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CollectionImagesOKPostersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CollectionImagesOKPostersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
}

var jsonFieldsNameOfCollectionImagesOKPostersItem = [7]string{
	0: "aspect_ratio",
	1: "height",
	2: "iso_639_1",
	3: "file_path",
	4: "vote_average",
	5: "vote_count",
	6: "width",
}

// Decode decodes CollectionImagesOKPostersItem from json.
func (s *CollectionImagesOKPostersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CollectionImagesOKPostersItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CollectionImagesOKPostersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CollectionImagesOKPostersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CollectionImagesOKPostersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CollectionTranslationsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CollectionTranslationsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Translations != nil {
			e.FieldStart("translations")
			e.ArrStart()
			for _, elem := range s.Translations {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCollectionTranslationsOK = [2]string{
	0: "id",
	1: "translations",
}

// Decode decodes CollectionTranslationsOK from json.
func (s *CollectionTranslationsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CollectionTranslationsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "translations":
			if err := func() error {
				s.Translations = make([]CollectionTranslationsOKTranslationsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CollectionTranslationsOKTranslationsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Translations = append(s.Translations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translations\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CollectionTranslationsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CollectionTranslationsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CollectionTranslationsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CollectionTranslationsOKTranslationsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CollectionTranslationsOKTranslationsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.EnglishName.Set {
			e.FieldStart("english_name")
			s.EnglishName.Encode(e)
		}
	}
	{
		if s.Data.Set {
			e.FieldStart("data")
			s.Data.Encode(e)
		}
	}
}

var jsonFieldsNameOfCollectionTranslationsOKTranslationsItem = [5]string{
	0: "iso_3166_1",
	1: "iso_639_1",
	2: "name",
	3: "english_name",
	4: "data",
}

// Decode decodes CollectionTranslationsOKTranslationsItem from json.
func (s *CollectionTranslationsOKTranslationsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CollectionTranslationsOKTranslationsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "english_name":
			if err := func() error {
				s.EnglishName.Reset()
				if err := s.EnglishName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"english_name\"")
			}
		case "data":
			if err := func() error {
				s.Data.Reset()
				if err := s.Data.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CollectionTranslationsOKTranslationsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CollectionTranslationsOKTranslationsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CollectionTranslationsOKTranslationsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CollectionTranslationsOKTranslationsItemData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CollectionTranslationsOKTranslationsItemData) encodeFields(e *jx.Encoder) {
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Homepage.Set {
			e.FieldStart("homepage")
			s.Homepage.Encode(e)
		}
	}
}

var jsonFieldsNameOfCollectionTranslationsOKTranslationsItemData = [3]string{
	0: "title",
	1: "overview",
	2: "homepage",
}

// Decode decodes CollectionTranslationsOKTranslationsItemData from json.
func (s *CollectionTranslationsOKTranslationsItemData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CollectionTranslationsOKTranslationsItemData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "homepage":
			if err := func() error {
				s.Homepage.Reset()
				if err := s.Homepage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"homepage\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CollectionTranslationsOKTranslationsItemData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CollectionTranslationsOKTranslationsItemData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CollectionTranslationsOKTranslationsItemData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CompanyAlternativeNamesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CompanyAlternativeNamesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCompanyAlternativeNamesOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes CompanyAlternativeNamesOK from json.
func (s *CompanyAlternativeNamesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyAlternativeNamesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]CompanyAlternativeNamesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CompanyAlternativeNamesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CompanyAlternativeNamesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CompanyAlternativeNamesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyAlternativeNamesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CompanyAlternativeNamesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CompanyAlternativeNamesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfCompanyAlternativeNamesOKResultsItem = [2]string{
	0: "name",
	1: "type",
}

// Decode decodes CompanyAlternativeNamesOKResultsItem from json.
func (s *CompanyAlternativeNamesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyAlternativeNamesOKResultsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CompanyAlternativeNamesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CompanyAlternativeNamesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyAlternativeNamesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CompanyDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CompanyDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Headquarters.Set {
			e.FieldStart("headquarters")
			s.Headquarters.Encode(e)
		}
	}
	{
		if s.Homepage.Set {
			e.FieldStart("homepage")
			s.Homepage.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry.Set {
			e.FieldStart("origin_country")
			s.OriginCountry.Encode(e)
		}
	}
	{
		if len(s.ParentCompany) != 0 {
			e.FieldStart("parent_company")
			e.Raw(s.ParentCompany)
		}
	}
}

var jsonFieldsNameOfCompanyDetailsOK = [8]string{
	0: "description",
	1: "headquarters",
	2: "homepage",
	3: "id",
	4: "logo_path",
	5: "name",
	6: "origin_country",
	7: "parent_company",
}

// Decode decodes CompanyDetailsOK from json.
func (s *CompanyDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyDetailsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "headquarters":
			if err := func() error {
				s.Headquarters.Reset()
				if err := s.Headquarters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"headquarters\"")
			}
		case "homepage":
			if err := func() error {
				s.Homepage.Reset()
				if err := s.Homepage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"homepage\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry.Reset()
				if err := s.OriginCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "parent_company":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.ParentCompany = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parent_company\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CompanyDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CompanyDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CompanyImagesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CompanyImagesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Logos != nil {
			e.FieldStart("logos")
			e.ArrStart()
			for _, elem := range s.Logos {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCompanyImagesOK = [2]string{
	0: "id",
	1: "logos",
}

// Decode decodes CompanyImagesOK from json.
func (s *CompanyImagesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyImagesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "logos":
			if err := func() error {
				s.Logos = make([]CompanyImagesOKLogosItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CompanyImagesOKLogosItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Logos = append(s.Logos, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logos\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CompanyImagesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CompanyImagesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyImagesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CompanyImagesOKLogosItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CompanyImagesOKLogosItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.FileType.Set {
			e.FieldStart("file_type")
			s.FileType.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
}

var jsonFieldsNameOfCompanyImagesOKLogosItem = [8]string{
	0: "aspect_ratio",
	1: "file_path",
	2: "height",
	3: "id",
	4: "file_type",
	5: "vote_average",
	6: "vote_count",
	7: "width",
}

// Decode decodes CompanyImagesOKLogosItem from json.
func (s *CompanyImagesOKLogosItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyImagesOKLogosItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "file_type":
			if err := func() error {
				s.FileType.Reset()
				if err := s.FileType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_type\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CompanyImagesOKLogosItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CompanyImagesOKLogosItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyImagesOKLogosItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ConfigurationCountriesOKItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ConfigurationCountriesOKItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.EnglishName.Set {
			e.FieldStart("english_name")
			s.EnglishName.Encode(e)
		}
	}
	{
		if s.NativeName.Set {
			e.FieldStart("native_name")
			s.NativeName.Encode(e)
		}
	}
}

var jsonFieldsNameOfConfigurationCountriesOKItem = [3]string{
	0: "iso_3166_1",
	1: "english_name",
	2: "native_name",
}

// Decode decodes ConfigurationCountriesOKItem from json.
func (s *ConfigurationCountriesOKItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigurationCountriesOKItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "english_name":
			if err := func() error {
				s.EnglishName.Reset()
				if err := s.EnglishName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"english_name\"")
			}
		case "native_name":
			if err := func() error {
				s.NativeName.Reset()
				if err := s.NativeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"native_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ConfigurationCountriesOKItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigurationCountriesOKItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigurationCountriesOKItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ConfigurationDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ConfigurationDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Images.Set {
			e.FieldStart("images")
			s.Images.Encode(e)
		}
	}
	{
		if s.ChangeKeys != nil {
			e.FieldStart("change_keys")
			e.ArrStart()
			for _, elem := range s.ChangeKeys {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfConfigurationDetailsOK = [2]string{
	0: "images",
	1: "change_keys",
}

// Decode decodes ConfigurationDetailsOK from json.
func (s *ConfigurationDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigurationDetailsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "images":
			if err := func() error {
				s.Images.Reset()
				if err := s.Images.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"images\"")
			}
		case "change_keys":
			if err := func() error {
				s.ChangeKeys = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ChangeKeys = append(s.ChangeKeys, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"change_keys\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ConfigurationDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigurationDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigurationDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ConfigurationDetailsOKImages) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ConfigurationDetailsOKImages) encodeFields(e *jx.Encoder) {
	{
		if s.BaseURL.Set {
			e.FieldStart("base_url")
			s.BaseURL.Encode(e)
		}
	}
	{
		if s.SecureBaseURL.Set {
			e.FieldStart("secure_base_url")
			s.SecureBaseURL.Encode(e)
		}
	}
	{
		if s.BackdropSizes != nil {
			e.FieldStart("backdrop_sizes")
			e.ArrStart()
			for _, elem := range s.BackdropSizes {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.LogoSizes != nil {
			e.FieldStart("logo_sizes")
			e.ArrStart()
			for _, elem := range s.LogoSizes {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PosterSizes != nil {
			e.FieldStart("poster_sizes")
			e.ArrStart()
			for _, elem := range s.PosterSizes {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ProfileSizes != nil {
			e.FieldStart("profile_sizes")
			e.ArrStart()
			for _, elem := range s.ProfileSizes {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.StillSizes != nil {
			e.FieldStart("still_sizes")
			e.ArrStart()
			for _, elem := range s.StillSizes {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfConfigurationDetailsOKImages = [7]string{
	0: "base_url",
	1: "secure_base_url",
	2: "backdrop_sizes",
	3: "logo_sizes",
	4: "poster_sizes",
	5: "profile_sizes",
	6: "still_sizes",
}

// Decode decodes ConfigurationDetailsOKImages from json.
func (s *ConfigurationDetailsOKImages) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigurationDetailsOKImages to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "base_url":
			if err := func() error {
				s.BaseURL.Reset()
				if err := s.BaseURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"base_url\"")
			}
		case "secure_base_url":
			if err := func() error {
				s.SecureBaseURL.Reset()
				if err := s.SecureBaseURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secure_base_url\"")
			}
		case "backdrop_sizes":
			if err := func() error {
				s.BackdropSizes = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.BackdropSizes = append(s.BackdropSizes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_sizes\"")
			}
		case "logo_sizes":
			if err := func() error {
				s.LogoSizes = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.LogoSizes = append(s.LogoSizes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_sizes\"")
			}
		case "poster_sizes":
			if err := func() error {
				s.PosterSizes = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.PosterSizes = append(s.PosterSizes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_sizes\"")
			}
		case "profile_sizes":
			if err := func() error {
				s.ProfileSizes = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ProfileSizes = append(s.ProfileSizes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_sizes\"")
			}
		case "still_sizes":
			if err := func() error {
				s.StillSizes = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.StillSizes = append(s.StillSizes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"still_sizes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ConfigurationDetailsOKImages")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigurationDetailsOKImages) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigurationDetailsOKImages) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ConfigurationJobsOKItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ConfigurationJobsOKItem) encodeFields(e *jx.Encoder) {
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Jobs != nil {
			e.FieldStart("jobs")
			e.ArrStart()
			for _, elem := range s.Jobs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfConfigurationJobsOKItem = [2]string{
	0: "department",
	1: "jobs",
}

// Decode decodes ConfigurationJobsOKItem from json.
func (s *ConfigurationJobsOKItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigurationJobsOKItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "jobs":
			if err := func() error {
				s.Jobs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Jobs = append(s.Jobs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jobs\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ConfigurationJobsOKItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigurationJobsOKItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigurationJobsOKItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ConfigurationLanguagesOKItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ConfigurationLanguagesOKItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.EnglishName.Set {
			e.FieldStart("english_name")
			s.EnglishName.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfConfigurationLanguagesOKItem = [3]string{
	0: "iso_639_1",
	1: "english_name",
	2: "name",
}

// Decode decodes ConfigurationLanguagesOKItem from json.
func (s *ConfigurationLanguagesOKItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigurationLanguagesOKItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "english_name":
			if err := func() error {
				s.EnglishName.Reset()
				if err := s.EnglishName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"english_name\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ConfigurationLanguagesOKItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigurationLanguagesOKItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigurationLanguagesOKItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ConfigurationTimezonesOKItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ConfigurationTimezonesOKItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Zones != nil {
			e.FieldStart("zones")
			e.ArrStart()
			for _, elem := range s.Zones {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfConfigurationTimezonesOKItem = [2]string{
	0: "iso_3166_1",
	1: "zones",
}

// Decode decodes ConfigurationTimezonesOKItem from json.
func (s *ConfigurationTimezonesOKItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ConfigurationTimezonesOKItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "zones":
			if err := func() error {
				s.Zones = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Zones = append(s.Zones, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zones\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ConfigurationTimezonesOKItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ConfigurationTimezonesOKItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ConfigurationTimezonesOKItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreditDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreditDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CreditType.Set {
			e.FieldStart("credit_type")
			s.CreditType.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Job.Set {
			e.FieldStart("job")
			s.Job.Encode(e)
		}
	}
	{
		if s.Media.Set {
			e.FieldStart("media")
			s.Media.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Person.Set {
			e.FieldStart("person")
			s.Person.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreditDetailsOK = [7]string{
	0: "credit_type",
	1: "department",
	2: "job",
	3: "media",
	4: "media_type",
	5: "id",
	6: "person",
}

// Decode decodes CreditDetailsOK from json.
func (s *CreditDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreditDetailsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "credit_type":
			if err := func() error {
				s.CreditType.Reset()
				if err := s.CreditType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_type\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "job":
			if err := func() error {
				s.Job.Reset()
				if err := s.Job.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job\"")
			}
		case "media":
			if err := func() error {
				s.Media.Reset()
				if err := s.Media.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "person":
			if err := func() error {
				s.Person.Reset()
				if err := s.Person.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"person\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreditDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreditDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreditDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreditDetailsOKMedia) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreditDetailsOKMedia) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.Episodes != nil {
			e.FieldStart("episodes")
			e.ArrStart()
			for _, elem := range s.Episodes {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.Seasons != nil {
			e.FieldStart("seasons")
			e.ArrStart()
			for _, elem := range s.Seasons {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCreditDetailsOKMedia = [18]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "id",
	3:  "name",
	4:  "original_language",
	5:  "original_name",
	6:  "overview",
	7:  "poster_path",
	8:  "media_type",
	9:  "genre_ids",
	10: "popularity",
	11: "first_air_date",
	12: "vote_average",
	13: "vote_count",
	14: "origin_country",
	15: "character",
	16: "episodes",
	17: "seasons",
}

// Decode decodes CreditDetailsOKMedia from json.
func (s *CreditDetailsOKMedia) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreditDetailsOKMedia to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "episodes":
			if err := func() error {
				s.Episodes = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.Episodes = append(s.Episodes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episodes\"")
			}
		case "seasons":
			if err := func() error {
				s.Seasons = make([]CreditDetailsOKMediaSeasonsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CreditDetailsOKMediaSeasonsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Seasons = append(s.Seasons, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"seasons\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreditDetailsOKMedia")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreditDetailsOKMedia) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreditDetailsOKMedia) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreditDetailsOKMediaSeasonsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreditDetailsOKMediaSeasonsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AirDate.Set {
			e.FieldStart("air_date")
			s.AirDate.Encode(e)
		}
	}
	{
		if s.EpisodeCount.Set {
			e.FieldStart("episode_count")
			s.EpisodeCount.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.SeasonNumber.Set {
			e.FieldStart("season_number")
			s.SeasonNumber.Encode(e)
		}
	}
	{
		if s.ShowID.Set {
			e.FieldStart("show_id")
			s.ShowID.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreditDetailsOKMediaSeasonsItem = [8]string{
	0: "air_date",
	1: "episode_count",
	2: "id",
	3: "name",
	4: "overview",
	5: "poster_path",
	6: "season_number",
	7: "show_id",
}

// Decode decodes CreditDetailsOKMediaSeasonsItem from json.
func (s *CreditDetailsOKMediaSeasonsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreditDetailsOKMediaSeasonsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "air_date":
			if err := func() error {
				s.AirDate.Reset()
				if err := s.AirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"air_date\"")
			}
		case "episode_count":
			if err := func() error {
				s.EpisodeCount.Reset()
				if err := s.EpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_count\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "season_number":
			if err := func() error {
				s.SeasonNumber.Reset()
				if err := s.SeasonNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"season_number\"")
			}
		case "show_id":
			if err := func() error {
				s.ShowID.Reset()
				if err := s.ShowID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreditDetailsOKMediaSeasonsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreditDetailsOKMediaSeasonsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreditDetailsOKMediaSeasonsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreditDetailsOKPerson) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreditDetailsOKPerson) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreditDetailsOKPerson = [9]string{
	0: "adult",
	1: "id",
	2: "name",
	3: "original_name",
	4: "media_type",
	5: "popularity",
	6: "gender",
	7: "known_for_department",
	8: "profile_path",
}

// Decode decodes CreditDetailsOKPerson from json.
func (s *CreditDetailsOKPerson) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreditDetailsOKPerson to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreditDetailsOKPerson")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreditDetailsOKPerson) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreditDetailsOKPerson) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DetailsCopyOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DetailsCopyOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfDetailsCopyOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes DetailsCopyOK from json.
func (s *DetailsCopyOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DetailsCopyOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]DetailsCopyOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem DetailsCopyOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DetailsCopyOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DetailsCopyOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DetailsCopyOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DetailsCopyOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DetailsCopyOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfDetailsCopyOKResultsItem = [2]string{
	0: "name",
	1: "type",
}

// Decode decodes DetailsCopyOKResultsItem from json.
func (s *DetailsCopyOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DetailsCopyOKResultsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DetailsCopyOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DetailsCopyOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DetailsCopyOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DiscoverMovieOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DiscoverMovieOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfDiscoverMovieOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes DiscoverMovieOK from json.
func (s *DiscoverMovieOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DiscoverMovieOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]DiscoverMovieOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem DiscoverMovieOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DiscoverMovieOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DiscoverMovieOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DiscoverMovieOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DiscoverMovieOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DiscoverMovieOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfDiscoverMovieOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes DiscoverMovieOKResultsItem from json.
func (s *DiscoverMovieOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DiscoverMovieOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DiscoverMovieOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DiscoverMovieOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DiscoverMovieOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DiscoverTvOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DiscoverTvOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfDiscoverTvOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes DiscoverTvOK from json.
func (s *DiscoverTvOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DiscoverTvOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]DiscoverTvOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem DiscoverTvOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DiscoverTvOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DiscoverTvOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DiscoverTvOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DiscoverTvOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DiscoverTvOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfDiscoverTvOKResultsItem = [13]string{
	0:  "backdrop_path",
	1:  "first_air_date",
	2:  "genre_ids",
	3:  "id",
	4:  "name",
	5:  "origin_country",
	6:  "original_language",
	7:  "original_name",
	8:  "overview",
	9:  "popularity",
	10: "poster_path",
	11: "vote_average",
	12: "vote_count",
}

// Decode decodes DiscoverTvOKResultsItem from json.
func (s *DiscoverTvOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DiscoverTvOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DiscoverTvOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DiscoverTvOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DiscoverTvOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FindByIDOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FindByIDOK) encodeFields(e *jx.Encoder) {
	{
		if s.MovieResults != nil {
			e.FieldStart("movie_results")
			e.ArrStart()
			for _, elem := range s.MovieResults {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PersonResults != nil {
			e.FieldStart("person_results")
			e.ArrStart()
			for _, elem := range s.PersonResults {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.TvResults != nil {
			e.FieldStart("tv_results")
			e.ArrStart()
			for _, elem := range s.TvResults {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.TvEpisodeResults != nil {
			e.FieldStart("tv_episode_results")
			e.ArrStart()
			for _, elem := range s.TvEpisodeResults {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.TvSeasonResults != nil {
			e.FieldStart("tv_season_results")
			e.ArrStart()
			for _, elem := range s.TvSeasonResults {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfFindByIDOK = [5]string{
	0: "movie_results",
	1: "person_results",
	2: "tv_results",
	3: "tv_episode_results",
	4: "tv_season_results",
}

// Decode decodes FindByIDOK from json.
func (s *FindByIDOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FindByIDOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "movie_results":
			if err := func() error {
				s.MovieResults = make([]FindByIDOKMovieResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem FindByIDOKMovieResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.MovieResults = append(s.MovieResults, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"movie_results\"")
			}
		case "person_results":
			if err := func() error {
				s.PersonResults = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.PersonResults = append(s.PersonResults, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"person_results\"")
			}
		case "tv_results":
			if err := func() error {
				s.TvResults = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.TvResults = append(s.TvResults, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tv_results\"")
			}
		case "tv_episode_results":
			if err := func() error {
				s.TvEpisodeResults = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.TvEpisodeResults = append(s.TvEpisodeResults, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tv_episode_results\"")
			}
		case "tv_season_results":
			if err := func() error {
				s.TvSeasonResults = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.TvSeasonResults = append(s.TvSeasonResults, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tv_season_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FindByIDOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FindByIDOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FindByIDOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FindByIDOKMovieResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FindByIDOKMovieResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfFindByIDOKMovieResultsItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "id",
	3:  "title",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "poster_path",
	8:  "media_type",
	9:  "genre_ids",
	10: "popularity",
	11: "release_date",
	12: "video",
	13: "vote_average",
	14: "vote_count",
}

// Decode decodes FindByIDOKMovieResultsItem from json.
func (s *FindByIDOKMovieResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FindByIDOKMovieResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FindByIDOKMovieResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FindByIDOKMovieResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FindByIDOKMovieResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GenreMovieListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GenreMovieListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Genres != nil {
			e.FieldStart("genres")
			e.ArrStart()
			for _, elem := range s.Genres {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGenreMovieListOK = [1]string{
	0: "genres",
}

// Decode decodes GenreMovieListOK from json.
func (s *GenreMovieListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenreMovieListOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "genres":
			if err := func() error {
				s.Genres = make([]GenreMovieListOKGenresItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GenreMovieListOKGenresItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Genres = append(s.Genres, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genres\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GenreMovieListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GenreMovieListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenreMovieListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GenreMovieListOKGenresItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GenreMovieListOKGenresItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGenreMovieListOKGenresItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GenreMovieListOKGenresItem from json.
func (s *GenreMovieListOKGenresItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenreMovieListOKGenresItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GenreMovieListOKGenresItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GenreMovieListOKGenresItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenreMovieListOKGenresItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GenreTvListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GenreTvListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Genres != nil {
			e.FieldStart("genres")
			e.ArrStart()
			for _, elem := range s.Genres {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGenreTvListOK = [1]string{
	0: "genres",
}

// Decode decodes GenreTvListOK from json.
func (s *GenreTvListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenreTvListOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "genres":
			if err := func() error {
				s.Genres = make([]GenreTvListOKGenresItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GenreTvListOKGenresItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Genres = append(s.Genres, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genres\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GenreTvListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GenreTvListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenreTvListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GenreTvListOKGenresItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GenreTvListOKGenresItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGenreTvListOKGenresItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GenreTvListOKGenresItem from json.
func (s *GenreTvListOKGenresItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenreTvListOKGenresItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GenreTvListOKGenresItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GenreTvListOKGenresItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenreTvListOKGenresItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GuestSessionRatedMoviesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GuestSessionRatedMoviesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfGuestSessionRatedMoviesOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes GuestSessionRatedMoviesOK from json.
func (s *GuestSessionRatedMoviesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GuestSessionRatedMoviesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]GuestSessionRatedMoviesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GuestSessionRatedMoviesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GuestSessionRatedMoviesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GuestSessionRatedMoviesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GuestSessionRatedMoviesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GuestSessionRatedMoviesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GuestSessionRatedMoviesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Rating.Set {
			e.FieldStart("rating")
			s.Rating.Encode(e)
		}
	}
}

var jsonFieldsNameOfGuestSessionRatedMoviesOKResultsItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
	14: "rating",
}

// Decode decodes GuestSessionRatedMoviesOKResultsItem from json.
func (s *GuestSessionRatedMoviesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GuestSessionRatedMoviesOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "rating":
			if err := func() error {
				s.Rating.Reset()
				if err := s.Rating.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rating\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GuestSessionRatedMoviesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GuestSessionRatedMoviesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GuestSessionRatedMoviesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GuestSessionRatedTvEpisodesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GuestSessionRatedTvEpisodesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfGuestSessionRatedTvEpisodesOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes GuestSessionRatedTvEpisodesOK from json.
func (s *GuestSessionRatedTvEpisodesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GuestSessionRatedTvEpisodesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]GuestSessionRatedTvEpisodesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GuestSessionRatedTvEpisodesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GuestSessionRatedTvEpisodesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GuestSessionRatedTvEpisodesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GuestSessionRatedTvEpisodesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GuestSessionRatedTvEpisodesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GuestSessionRatedTvEpisodesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AirDate.Set {
			e.FieldStart("air_date")
			s.AirDate.Encode(e)
		}
	}
	{
		if s.EpisodeNumber.Set {
			e.FieldStart("episode_number")
			s.EpisodeNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.ProductionCode.Set {
			e.FieldStart("production_code")
			s.ProductionCode.Encode(e)
		}
	}
	{
		if s.Runtime.Set {
			e.FieldStart("runtime")
			s.Runtime.Encode(e)
		}
	}
	{
		if s.SeasonNumber.Set {
			e.FieldStart("season_number")
			s.SeasonNumber.Encode(e)
		}
	}
	{
		if s.ShowID.Set {
			e.FieldStart("show_id")
			s.ShowID.Encode(e)
		}
	}
	{
		if s.StillPath.Set {
			e.FieldStart("still_path")
			s.StillPath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Rating.Set {
			e.FieldStart("rating")
			s.Rating.Encode(e)
		}
	}
}

var jsonFieldsNameOfGuestSessionRatedTvEpisodesOKResultsItem = [13]string{
	0:  "air_date",
	1:  "episode_number",
	2:  "id",
	3:  "name",
	4:  "overview",
	5:  "production_code",
	6:  "runtime",
	7:  "season_number",
	8:  "show_id",
	9:  "still_path",
	10: "vote_average",
	11: "vote_count",
	12: "rating",
}

// Decode decodes GuestSessionRatedTvEpisodesOKResultsItem from json.
func (s *GuestSessionRatedTvEpisodesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GuestSessionRatedTvEpisodesOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "air_date":
			if err := func() error {
				s.AirDate.Reset()
				if err := s.AirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"air_date\"")
			}
		case "episode_number":
			if err := func() error {
				s.EpisodeNumber.Reset()
				if err := s.EpisodeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "production_code":
			if err := func() error {
				s.ProductionCode.Reset()
				if err := s.ProductionCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_code\"")
			}
		case "runtime":
			if err := func() error {
				s.Runtime.Reset()
				if err := s.Runtime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runtime\"")
			}
		case "season_number":
			if err := func() error {
				s.SeasonNumber.Reset()
				if err := s.SeasonNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"season_number\"")
			}
		case "show_id":
			if err := func() error {
				s.ShowID.Reset()
				if err := s.ShowID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_id\"")
			}
		case "still_path":
			if err := func() error {
				s.StillPath.Reset()
				if err := s.StillPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"still_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "rating":
			if err := func() error {
				s.Rating.Reset()
				if err := s.Rating.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rating\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GuestSessionRatedTvEpisodesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GuestSessionRatedTvEpisodesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GuestSessionRatedTvEpisodesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GuestSessionRatedTvOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GuestSessionRatedTvOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfGuestSessionRatedTvOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes GuestSessionRatedTvOK from json.
func (s *GuestSessionRatedTvOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GuestSessionRatedTvOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]GuestSessionRatedTvOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GuestSessionRatedTvOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GuestSessionRatedTvOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GuestSessionRatedTvOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GuestSessionRatedTvOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GuestSessionRatedTvOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GuestSessionRatedTvOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Rating.Set {
			e.FieldStart("rating")
			s.Rating.Encode(e)
		}
	}
}

var jsonFieldsNameOfGuestSessionRatedTvOKResultsItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "origin_country",
	5:  "original_language",
	6:  "original_name",
	7:  "overview",
	8:  "popularity",
	9:  "poster_path",
	10: "first_air_date",
	11: "name",
	12: "vote_average",
	13: "vote_count",
	14: "rating",
}

// Decode decodes GuestSessionRatedTvOKResultsItem from json.
func (s *GuestSessionRatedTvOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GuestSessionRatedTvOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "rating":
			if err := func() error {
				s.Rating.Reset()
				if err := s.Rating.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rating\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GuestSessionRatedTvOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GuestSessionRatedTvOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GuestSessionRatedTvOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KeywordDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KeywordDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfKeywordDetailsOK = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes KeywordDetailsOK from json.
func (s *KeywordDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KeywordDetailsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KeywordDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KeywordDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KeywordDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KeywordMoviesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KeywordMoviesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfKeywordMoviesOK = [5]string{
	0: "id",
	1: "page",
	2: "results",
	3: "total_pages",
	4: "total_results",
}

// Decode decodes KeywordMoviesOK from json.
func (s *KeywordMoviesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KeywordMoviesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]KeywordMoviesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem KeywordMoviesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KeywordMoviesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KeywordMoviesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KeywordMoviesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KeywordMoviesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KeywordMoviesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfKeywordMoviesOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes KeywordMoviesOKResultsItem from json.
func (s *KeywordMoviesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KeywordMoviesOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KeywordMoviesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KeywordMoviesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KeywordMoviesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAddMovieOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAddMovieOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAddMovieOK = [2]string{
	0: "status_code",
	1: "status_message",
}

// Decode decodes ListAddMovieOK from json.
func (s *ListAddMovieOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAddMovieOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAddMovieOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAddMovieOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAddMovieOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListAddMovieReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListAddMovieReq) encodeFields(e *jx.Encoder) {
	{
		if s.RAWBODY.Set {
			e.FieldStart("RAW_BODY")
			s.RAWBODY.Encode(e)
		}
	}
}

var jsonFieldsNameOfListAddMovieReq = [1]string{
	0: "RAW_BODY",
}

// Decode decodes ListAddMovieReq from json.
func (s *ListAddMovieReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListAddMovieReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "RAW_BODY":
			if err := func() error {
				s.RAWBODY.Reset()
				if err := s.RAWBODY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RAW_BODY\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListAddMovieReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListAddMovieReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListAddMovieReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCheckItemStatusOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCheckItemStatusOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ItemPresent.Set {
			e.FieldStart("item_present")
			s.ItemPresent.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCheckItemStatusOK = [2]string{
	0: "id",
	1: "item_present",
}

// Decode decodes ListCheckItemStatusOK from json.
func (s *ListCheckItemStatusOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCheckItemStatusOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "item_present":
			if err := func() error {
				s.ItemPresent.Reset()
				if err := s.ItemPresent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_present\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCheckItemStatusOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCheckItemStatusOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCheckItemStatusOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListClearOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListClearOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfListClearOK = [2]string{
	0: "status_code",
	1: "status_message",
}

// Decode decodes ListClearOK from json.
func (s *ListClearOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListClearOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListClearOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListClearOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListClearOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCreateOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCreateOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
	{
		if s.Success.Set {
			e.FieldStart("success")
			s.Success.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.ListID.Set {
			e.FieldStart("list_id")
			s.ListID.Encode(e)
		}
	}
}

var jsonFieldsNameOfListCreateOK = [4]string{
	0: "status_message",
	1: "success",
	2: "status_code",
	3: "list_id",
}

// Decode decodes ListCreateOK from json.
func (s *ListCreateOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCreateOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		case "success":
			if err := func() error {
				s.Success.Reset()
				if err := s.Success.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "list_id":
			if err := func() error {
				s.ListID.Reset()
				if err := s.ListID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCreateOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCreateOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCreateOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListCreateReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListCreateReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("RAW_BODY")
		e.Str(s.RAWBODY)
	}
}

var jsonFieldsNameOfListCreateReq = [1]string{
	0: "RAW_BODY",
}

// Decode decodes ListCreateReq from json.
func (s *ListCreateReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListCreateReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "RAW_BODY":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RAWBODY = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RAW_BODY\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListCreateReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfListCreateReq) {
					name = jsonFieldsNameOfListCreateReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfListDeleteOK = [2]string{
	0: "status_code",
	1: "status_message",
}

// Decode decodes ListDeleteOK from json.
func (s *ListDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListDeleteOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.CreatedBy.Set {
			e.FieldStart("created_by")
			s.CreatedBy.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.FavoriteCount.Set {
			e.FieldStart("favorite_count")
			s.FavoriteCount.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ItemCount.Set {
			e.FieldStart("item_count")
			s.ItemCount.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
}

var jsonFieldsNameOfListDetailsOK = [9]string{
	0: "created_by",
	1: "description",
	2: "favorite_count",
	3: "id",
	4: "items",
	5: "item_count",
	6: "iso_639_1",
	7: "name",
	8: "poster_path",
}

// Decode decodes ListDetailsOK from json.
func (s *ListDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListDetailsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "created_by":
			if err := func() error {
				s.CreatedBy.Reset()
				if err := s.CreatedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_by\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "favorite_count":
			if err := func() error {
				s.FavoriteCount.Reset()
				if err := s.FavoriteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"favorite_count\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]ListDetailsOKItemsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ListDetailsOKItemsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		case "item_count":
			if err := func() error {
				s.ItemCount.Reset()
				if err := s.ItemCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_count\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListDetailsOKItemsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListDetailsOKItemsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfListDetailsOKItemsItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "media_type",
	5:  "original_language",
	6:  "original_title",
	7:  "overview",
	8:  "popularity",
	9:  "poster_path",
	10: "release_date",
	11: "title",
	12: "video",
	13: "vote_average",
	14: "vote_count",
}

// Decode decodes ListDetailsOKItemsItem from json.
func (s *ListDetailsOKItemsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListDetailsOKItemsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListDetailsOKItemsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListDetailsOKItemsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListDetailsOKItemsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListRemoveMovieOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListRemoveMovieOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfListRemoveMovieOK = [2]string{
	0: "status_code",
	1: "status_message",
}

// Decode decodes ListRemoveMovieOK from json.
func (s *ListRemoveMovieOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListRemoveMovieOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListRemoveMovieOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListRemoveMovieOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListRemoveMovieOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListRemoveMovieReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListRemoveMovieReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("RAW_BODY")
		e.Str(s.RAWBODY)
	}
}

var jsonFieldsNameOfListRemoveMovieReq = [1]string{
	0: "RAW_BODY",
}

// Decode decodes ListRemoveMovieReq from json.
func (s *ListRemoveMovieReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListRemoveMovieReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "RAW_BODY":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RAWBODY = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RAW_BODY\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListRemoveMovieReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfListRemoveMovieReq) {
					name = jsonFieldsNameOfListRemoveMovieReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListRemoveMovieReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListRemoveMovieReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieAccountStatesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieAccountStatesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Favorite.Set {
			e.FieldStart("favorite")
			s.Favorite.Encode(e)
		}
	}
	{
		if s.Rated.Set {
			e.FieldStart("rated")
			s.Rated.Encode(e)
		}
	}
	{
		if s.Watchlist.Set {
			e.FieldStart("watchlist")
			s.Watchlist.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieAccountStatesOK = [4]string{
	0: "id",
	1: "favorite",
	2: "rated",
	3: "watchlist",
}

// Decode decodes MovieAccountStatesOK from json.
func (s *MovieAccountStatesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieAccountStatesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "favorite":
			if err := func() error {
				s.Favorite.Reset()
				if err := s.Favorite.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"favorite\"")
			}
		case "rated":
			if err := func() error {
				s.Rated.Reset()
				if err := s.Rated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rated\"")
			}
		case "watchlist":
			if err := func() error {
				s.Watchlist.Reset()
				if err := s.Watchlist.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"watchlist\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieAccountStatesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieAccountStatesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieAccountStatesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieAccountStatesOKRated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieAccountStatesOKRated) encodeFields(e *jx.Encoder) {
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieAccountStatesOKRated = [1]string{
	0: "value",
}

// Decode decodes MovieAccountStatesOKRated from json.
func (s *MovieAccountStatesOKRated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieAccountStatesOKRated to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieAccountStatesOKRated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieAccountStatesOKRated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieAccountStatesOKRated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieAddRatingOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieAddRatingOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieAddRatingOK = [2]string{
	0: "status_code",
	1: "status_message",
}

// Decode decodes MovieAddRatingOK from json.
func (s *MovieAddRatingOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieAddRatingOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieAddRatingOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieAddRatingOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieAddRatingOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieAddRatingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieAddRatingReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("RAW_BODY")
		e.Str(s.RAWBODY)
	}
}

var jsonFieldsNameOfMovieAddRatingReq = [1]string{
	0: "RAW_BODY",
}

// Decode decodes MovieAddRatingReq from json.
func (s *MovieAddRatingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieAddRatingReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "RAW_BODY":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RAWBODY = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RAW_BODY\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieAddRatingReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfMovieAddRatingReq) {
					name = jsonFieldsNameOfMovieAddRatingReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieAddRatingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieAddRatingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieAlternativeTitlesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieAlternativeTitlesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Titles != nil {
			e.FieldStart("titles")
			e.ArrStart()
			for _, elem := range s.Titles {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieAlternativeTitlesOK = [2]string{
	0: "id",
	1: "titles",
}

// Decode decodes MovieAlternativeTitlesOK from json.
func (s *MovieAlternativeTitlesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieAlternativeTitlesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "titles":
			if err := func() error {
				s.Titles = make([]MovieAlternativeTitlesOKTitlesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieAlternativeTitlesOKTitlesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Titles = append(s.Titles, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"titles\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieAlternativeTitlesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieAlternativeTitlesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieAlternativeTitlesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieAlternativeTitlesOKTitlesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieAlternativeTitlesOKTitlesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieAlternativeTitlesOKTitlesItem = [3]string{
	0: "iso_3166_1",
	1: "title",
	2: "type",
}

// Decode decodes MovieAlternativeTitlesOKTitlesItem from json.
func (s *MovieAlternativeTitlesOKTitlesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieAlternativeTitlesOKTitlesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieAlternativeTitlesOKTitlesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieAlternativeTitlesOKTitlesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieAlternativeTitlesOKTitlesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieChangesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieChangesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Changes != nil {
			e.FieldStart("changes")
			e.ArrStart()
			for _, elem := range s.Changes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieChangesOK = [1]string{
	0: "changes",
}

// Decode decodes MovieChangesOK from json.
func (s *MovieChangesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieChangesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "changes":
			if err := func() error {
				s.Changes = make([]MovieChangesOKChangesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieChangesOKChangesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Changes = append(s.Changes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"changes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieChangesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieChangesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieChangesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieChangesOKChangesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieChangesOKChangesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieChangesOKChangesItem = [2]string{
	0: "key",
	1: "items",
}

// Decode decodes MovieChangesOKChangesItem from json.
func (s *MovieChangesOKChangesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieChangesOKChangesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]MovieChangesOKChangesItemItemsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieChangesOKChangesItemItemsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieChangesOKChangesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieChangesOKChangesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieChangesOKChangesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieChangesOKChangesItemItemsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieChangesOKChangesItemItemsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.Time.Set {
			e.FieldStart("time")
			s.Time.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieChangesOKChangesItemItemsItem = [6]string{
	0: "id",
	1: "action",
	2: "time",
	3: "iso_639_1",
	4: "iso_3166_1",
	5: "value",
}

// Decode decodes MovieChangesOKChangesItemItemsItem from json.
func (s *MovieChangesOKChangesItemItemsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieChangesOKChangesItemItemsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "time":
			if err := func() error {
				s.Time.Reset()
				if err := s.Time.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieChangesOKChangesItemItemsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieChangesOKChangesItemItemsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieChangesOKChangesItemItemsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieChangesOKChangesItemItemsItemValue) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieChangesOKChangesItemItemsItemValue) encodeFields(e *jx.Encoder) {
	{
		if s.Poster.Set {
			e.FieldStart("poster")
			s.Poster.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieChangesOKChangesItemItemsItemValue = [1]string{
	0: "poster",
}

// Decode decodes MovieChangesOKChangesItemItemsItemValue from json.
func (s *MovieChangesOKChangesItemItemsItemValue) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieChangesOKChangesItemItemsItemValue to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "poster":
			if err := func() error {
				s.Poster.Reset()
				if err := s.Poster.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieChangesOKChangesItemItemsItemValue")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieChangesOKChangesItemItemsItemValue) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieChangesOKChangesItemItemsItemValue) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieChangesOKChangesItemItemsItemValuePoster) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieChangesOKChangesItemItemsItemValuePoster) encodeFields(e *jx.Encoder) {
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieChangesOKChangesItemItemsItemValuePoster = [1]string{
	0: "file_path",
}

// Decode decodes MovieChangesOKChangesItemItemsItemValuePoster from json.
func (s *MovieChangesOKChangesItemItemsItemValuePoster) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieChangesOKChangesItemItemsItemValuePoster to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieChangesOKChangesItemItemsItemValuePoster")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieChangesOKChangesItemItemsItemValuePoster) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieChangesOKChangesItemItemsItemValuePoster) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieCreditsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieCreditsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Cast != nil {
			e.FieldStart("cast")
			e.ArrStart()
			for _, elem := range s.Cast {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Crew != nil {
			e.FieldStart("crew")
			e.ArrStart()
			for _, elem := range s.Crew {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieCreditsOK = [3]string{
	0: "id",
	1: "cast",
	2: "crew",
}

// Decode decodes MovieCreditsOK from json.
func (s *MovieCreditsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieCreditsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "cast":
			if err := func() error {
				s.Cast = make([]MovieCreditsOKCastItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieCreditsOKCastItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Cast = append(s.Cast, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cast\"")
			}
		case "crew":
			if err := func() error {
				s.Crew = make([]MovieCreditsOKCrewItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieCreditsOKCrewItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Crew = append(s.Crew, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"crew\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieCreditsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieCreditsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieCreditsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieCreditsOKCastItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieCreditsOKCastItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.CastID.Set {
			e.FieldStart("cast_id")
			s.CastID.Encode(e)
		}
	}
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieCreditsOKCastItem = [12]string{
	0:  "adult",
	1:  "gender",
	2:  "id",
	3:  "known_for_department",
	4:  "name",
	5:  "original_name",
	6:  "popularity",
	7:  "profile_path",
	8:  "cast_id",
	9:  "character",
	10: "credit_id",
	11: "order",
}

// Decode decodes MovieCreditsOKCastItem from json.
func (s *MovieCreditsOKCastItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieCreditsOKCastItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "cast_id":
			if err := func() error {
				s.CastID.Reset()
				if err := s.CastID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cast_id\"")
			}
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieCreditsOKCastItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieCreditsOKCastItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieCreditsOKCastItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieCreditsOKCrewItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieCreditsOKCrewItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Job.Set {
			e.FieldStart("job")
			s.Job.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieCreditsOKCrewItem = [11]string{
	0:  "adult",
	1:  "gender",
	2:  "id",
	3:  "known_for_department",
	4:  "name",
	5:  "original_name",
	6:  "popularity",
	7:  "profile_path",
	8:  "credit_id",
	9:  "department",
	10: "job",
}

// Decode decodes MovieCreditsOKCrewItem from json.
func (s *MovieCreditsOKCrewItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieCreditsOKCrewItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "job":
			if err := func() error {
				s.Job.Reset()
				if err := s.Job.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieCreditsOKCrewItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieCreditsOKCrewItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieCreditsOKCrewItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieDeleteRatingOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieDeleteRatingOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieDeleteRatingOK = [2]string{
	0: "status_code",
	1: "status_message",
}

// Decode decodes MovieDeleteRatingOK from json.
func (s *MovieDeleteRatingOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieDeleteRatingOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieDeleteRatingOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieDeleteRatingOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieDeleteRatingOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if len(s.BelongsToCollection) != 0 {
			e.FieldStart("belongs_to_collection")
			e.Raw(s.BelongsToCollection)
		}
	}
	{
		if s.Budget.Set {
			e.FieldStart("budget")
			s.Budget.Encode(e)
		}
	}
	{
		if s.Genres != nil {
			e.FieldStart("genres")
			e.ArrStart()
			for _, elem := range s.Genres {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Homepage.Set {
			e.FieldStart("homepage")
			s.Homepage.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ImdbID.Set {
			e.FieldStart("imdb_id")
			s.ImdbID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ProductionCompanies != nil {
			e.FieldStart("production_companies")
			e.ArrStart()
			for _, elem := range s.ProductionCompanies {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ProductionCountries != nil {
			e.FieldStart("production_countries")
			e.ArrStart()
			for _, elem := range s.ProductionCountries {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Revenue.Set {
			e.FieldStart("revenue")
			s.Revenue.Encode(e)
		}
	}
	{
		if s.Runtime.Set {
			e.FieldStart("runtime")
			s.Runtime.Encode(e)
		}
	}
	{
		if s.SpokenLanguages != nil {
			e.FieldStart("spoken_languages")
			e.ArrStart()
			for _, elem := range s.SpokenLanguages {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Tagline.Set {
			e.FieldStart("tagline")
			s.Tagline.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieDetailsOK = [25]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "belongs_to_collection",
	3:  "budget",
	4:  "genres",
	5:  "homepage",
	6:  "id",
	7:  "imdb_id",
	8:  "original_language",
	9:  "original_title",
	10: "overview",
	11: "popularity",
	12: "poster_path",
	13: "production_companies",
	14: "production_countries",
	15: "release_date",
	16: "revenue",
	17: "runtime",
	18: "spoken_languages",
	19: "status",
	20: "tagline",
	21: "title",
	22: "video",
	23: "vote_average",
	24: "vote_count",
}

// Decode decodes MovieDetailsOK from json.
func (s *MovieDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieDetailsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "belongs_to_collection":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.BelongsToCollection = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"belongs_to_collection\"")
			}
		case "budget":
			if err := func() error {
				s.Budget.Reset()
				if err := s.Budget.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"budget\"")
			}
		case "genres":
			if err := func() error {
				s.Genres = make([]MovieDetailsOKGenresItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieDetailsOKGenresItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Genres = append(s.Genres, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genres\"")
			}
		case "homepage":
			if err := func() error {
				s.Homepage.Reset()
				if err := s.Homepage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"homepage\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "imdb_id":
			if err := func() error {
				s.ImdbID.Reset()
				if err := s.ImdbID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"imdb_id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "production_companies":
			if err := func() error {
				s.ProductionCompanies = make([]MovieDetailsOKProductionCompaniesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieDetailsOKProductionCompaniesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ProductionCompanies = append(s.ProductionCompanies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_companies\"")
			}
		case "production_countries":
			if err := func() error {
				s.ProductionCountries = make([]MovieDetailsOKProductionCountriesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieDetailsOKProductionCountriesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ProductionCountries = append(s.ProductionCountries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_countries\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "revenue":
			if err := func() error {
				s.Revenue.Reset()
				if err := s.Revenue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"revenue\"")
			}
		case "runtime":
			if err := func() error {
				s.Runtime.Reset()
				if err := s.Runtime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runtime\"")
			}
		case "spoken_languages":
			if err := func() error {
				s.SpokenLanguages = make([]MovieDetailsOKSpokenLanguagesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieDetailsOKSpokenLanguagesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SpokenLanguages = append(s.SpokenLanguages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"spoken_languages\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "tagline":
			if err := func() error {
				s.Tagline.Reset()
				if err := s.Tagline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tagline\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieDetailsOKGenresItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieDetailsOKGenresItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieDetailsOKGenresItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes MovieDetailsOKGenresItem from json.
func (s *MovieDetailsOKGenresItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieDetailsOKGenresItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieDetailsOKGenresItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieDetailsOKGenresItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieDetailsOKGenresItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieDetailsOKProductionCompaniesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieDetailsOKProductionCompaniesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry.Set {
			e.FieldStart("origin_country")
			s.OriginCountry.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieDetailsOKProductionCompaniesItem = [4]string{
	0: "id",
	1: "logo_path",
	2: "name",
	3: "origin_country",
}

// Decode decodes MovieDetailsOKProductionCompaniesItem from json.
func (s *MovieDetailsOKProductionCompaniesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieDetailsOKProductionCompaniesItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry.Reset()
				if err := s.OriginCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieDetailsOKProductionCompaniesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieDetailsOKProductionCompaniesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieDetailsOKProductionCompaniesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieDetailsOKProductionCountriesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieDetailsOKProductionCountriesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieDetailsOKProductionCountriesItem = [2]string{
	0: "iso_3166_1",
	1: "name",
}

// Decode decodes MovieDetailsOKProductionCountriesItem from json.
func (s *MovieDetailsOKProductionCountriesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieDetailsOKProductionCountriesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieDetailsOKProductionCountriesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieDetailsOKProductionCountriesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieDetailsOKProductionCountriesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieDetailsOKSpokenLanguagesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieDetailsOKSpokenLanguagesItem) encodeFields(e *jx.Encoder) {
	{
		if s.EnglishName.Set {
			e.FieldStart("english_name")
			s.EnglishName.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieDetailsOKSpokenLanguagesItem = [3]string{
	0: "english_name",
	1: "iso_639_1",
	2: "name",
}

// Decode decodes MovieDetailsOKSpokenLanguagesItem from json.
func (s *MovieDetailsOKSpokenLanguagesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieDetailsOKSpokenLanguagesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "english_name":
			if err := func() error {
				s.EnglishName.Reset()
				if err := s.EnglishName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"english_name\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieDetailsOKSpokenLanguagesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieDetailsOKSpokenLanguagesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieDetailsOKSpokenLanguagesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieExternalIdsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieExternalIdsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ImdbID.Set {
			e.FieldStart("imdb_id")
			s.ImdbID.Encode(e)
		}
	}
	{
		if len(s.WikidataID) != 0 {
			e.FieldStart("wikidata_id")
			e.Raw(s.WikidataID)
		}
	}
	{
		if s.FacebookID.Set {
			e.FieldStart("facebook_id")
			s.FacebookID.Encode(e)
		}
	}
	{
		if len(s.InstagramID) != 0 {
			e.FieldStart("instagram_id")
			e.Raw(s.InstagramID)
		}
	}
	{
		if len(s.TwitterID) != 0 {
			e.FieldStart("twitter_id")
			e.Raw(s.TwitterID)
		}
	}
}

var jsonFieldsNameOfMovieExternalIdsOK = [6]string{
	0: "id",
	1: "imdb_id",
	2: "wikidata_id",
	3: "facebook_id",
	4: "instagram_id",
	5: "twitter_id",
}

// Decode decodes MovieExternalIdsOK from json.
func (s *MovieExternalIdsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieExternalIdsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "imdb_id":
			if err := func() error {
				s.ImdbID.Reset()
				if err := s.ImdbID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"imdb_id\"")
			}
		case "wikidata_id":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.WikidataID = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wikidata_id\"")
			}
		case "facebook_id":
			if err := func() error {
				s.FacebookID.Reset()
				if err := s.FacebookID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"facebook_id\"")
			}
		case "instagram_id":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.InstagramID = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"instagram_id\"")
			}
		case "twitter_id":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.TwitterID = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"twitter_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieExternalIdsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieExternalIdsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieExternalIdsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieImagesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieImagesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Backdrops != nil {
			e.FieldStart("backdrops")
			e.ArrStart()
			for _, elem := range s.Backdrops {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Logos != nil {
			e.FieldStart("logos")
			e.ArrStart()
			for _, elem := range s.Logos {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Posters != nil {
			e.FieldStart("posters")
			e.ArrStart()
			for _, elem := range s.Posters {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieImagesOK = [4]string{
	0: "backdrops",
	1: "id",
	2: "logos",
	3: "posters",
}

// Decode decodes MovieImagesOK from json.
func (s *MovieImagesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieImagesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "backdrops":
			if err := func() error {
				s.Backdrops = make([]MovieImagesOKBackdropsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieImagesOKBackdropsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Backdrops = append(s.Backdrops, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrops\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "logos":
			if err := func() error {
				s.Logos = make([]MovieImagesOKLogosItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieImagesOKLogosItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Logos = append(s.Logos, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logos\"")
			}
		case "posters":
			if err := func() error {
				s.Posters = make([]MovieImagesOKPostersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieImagesOKPostersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Posters = append(s.Posters, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"posters\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieImagesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieImagesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieImagesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieImagesOKBackdropsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieImagesOKBackdropsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieImagesOKBackdropsItem = [7]string{
	0: "aspect_ratio",
	1: "height",
	2: "iso_639_1",
	3: "file_path",
	4: "vote_average",
	5: "vote_count",
	6: "width",
}

// Decode decodes MovieImagesOKBackdropsItem from json.
func (s *MovieImagesOKBackdropsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieImagesOKBackdropsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieImagesOKBackdropsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieImagesOKBackdropsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieImagesOKBackdropsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieImagesOKLogosItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieImagesOKLogosItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieImagesOKLogosItem = [7]string{
	0: "aspect_ratio",
	1: "height",
	2: "iso_639_1",
	3: "file_path",
	4: "vote_average",
	5: "vote_count",
	6: "width",
}

// Decode decodes MovieImagesOKLogosItem from json.
func (s *MovieImagesOKLogosItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieImagesOKLogosItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieImagesOKLogosItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieImagesOKLogosItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieImagesOKLogosItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieImagesOKPostersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieImagesOKPostersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieImagesOKPostersItem = [7]string{
	0: "aspect_ratio",
	1: "height",
	2: "iso_639_1",
	3: "file_path",
	4: "vote_average",
	5: "vote_count",
	6: "width",
}

// Decode decodes MovieImagesOKPostersItem from json.
func (s *MovieImagesOKPostersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieImagesOKPostersItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieImagesOKPostersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieImagesOKPostersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieImagesOKPostersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieKeywordsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieKeywordsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Keywords != nil {
			e.FieldStart("keywords")
			e.ArrStart()
			for _, elem := range s.Keywords {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieKeywordsOK = [2]string{
	0: "id",
	1: "keywords",
}

// Decode decodes MovieKeywordsOK from json.
func (s *MovieKeywordsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieKeywordsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "keywords":
			if err := func() error {
				s.Keywords = make([]MovieKeywordsOKKeywordsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieKeywordsOKKeywordsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Keywords = append(s.Keywords, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"keywords\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieKeywordsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieKeywordsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieKeywordsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieKeywordsOKKeywordsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieKeywordsOKKeywordsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieKeywordsOKKeywordsItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes MovieKeywordsOKKeywordsItem from json.
func (s *MovieKeywordsOKKeywordsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieKeywordsOKKeywordsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieKeywordsOKKeywordsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieKeywordsOKKeywordsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieKeywordsOKKeywordsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieLatestIDOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieLatestIDOK) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if len(s.BelongsToCollection) != 0 {
			e.FieldStart("belongs_to_collection")
			e.Raw(s.BelongsToCollection)
		}
	}
	{
		if s.Budget.Set {
			e.FieldStart("budget")
			s.Budget.Encode(e)
		}
	}
	{
		if s.Genres != nil {
			e.FieldStart("genres")
			e.ArrStart()
			for _, elem := range s.Genres {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.Homepage.Set {
			e.FieldStart("homepage")
			s.Homepage.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if len(s.ImdbID) != 0 {
			e.FieldStart("imdb_id")
			e.Raw(s.ImdbID)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ProductionCompanies != nil {
			e.FieldStart("production_companies")
			e.ArrStart()
			for _, elem := range s.ProductionCompanies {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.ProductionCountries != nil {
			e.FieldStart("production_countries")
			e.ArrStart()
			for _, elem := range s.ProductionCountries {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Revenue.Set {
			e.FieldStart("revenue")
			s.Revenue.Encode(e)
		}
	}
	{
		if s.Runtime.Set {
			e.FieldStart("runtime")
			s.Runtime.Encode(e)
		}
	}
	{
		if s.SpokenLanguages != nil {
			e.FieldStart("spoken_languages")
			e.ArrStart()
			for _, elem := range s.SpokenLanguages {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Tagline.Set {
			e.FieldStart("tagline")
			s.Tagline.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieLatestIDOK = [25]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "belongs_to_collection",
	3:  "budget",
	4:  "genres",
	5:  "homepage",
	6:  "id",
	7:  "imdb_id",
	8:  "original_language",
	9:  "original_title",
	10: "overview",
	11: "popularity",
	12: "poster_path",
	13: "production_companies",
	14: "production_countries",
	15: "release_date",
	16: "revenue",
	17: "runtime",
	18: "spoken_languages",
	19: "status",
	20: "tagline",
	21: "title",
	22: "video",
	23: "vote_average",
	24: "vote_count",
}

// Decode decodes MovieLatestIDOK from json.
func (s *MovieLatestIDOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieLatestIDOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "belongs_to_collection":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.BelongsToCollection = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"belongs_to_collection\"")
			}
		case "budget":
			if err := func() error {
				s.Budget.Reset()
				if err := s.Budget.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"budget\"")
			}
		case "genres":
			if err := func() error {
				s.Genres = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.Genres = append(s.Genres, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genres\"")
			}
		case "homepage":
			if err := func() error {
				s.Homepage.Reset()
				if err := s.Homepage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"homepage\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "imdb_id":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.ImdbID = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"imdb_id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "production_companies":
			if err := func() error {
				s.ProductionCompanies = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.ProductionCompanies = append(s.ProductionCompanies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_companies\"")
			}
		case "production_countries":
			if err := func() error {
				s.ProductionCountries = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.ProductionCountries = append(s.ProductionCountries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_countries\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "revenue":
			if err := func() error {
				s.Revenue.Reset()
				if err := s.Revenue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"revenue\"")
			}
		case "runtime":
			if err := func() error {
				s.Runtime.Reset()
				if err := s.Runtime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runtime\"")
			}
		case "spoken_languages":
			if err := func() error {
				s.SpokenLanguages = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.SpokenLanguages = append(s.SpokenLanguages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"spoken_languages\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "tagline":
			if err := func() error {
				s.Tagline.Reset()
				if err := s.Tagline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tagline\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieLatestIDOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieLatestIDOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieLatestIDOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieListsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieListsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieListsOK = [5]string{
	0: "id",
	1: "page",
	2: "results",
	3: "total_pages",
	4: "total_results",
}

// Decode decodes MovieListsOK from json.
func (s *MovieListsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieListsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]MovieListsOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieListsOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieListsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieListsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieListsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieListsOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieListsOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.FavoriteCount.Set {
			e.FieldStart("favorite_count")
			s.FavoriteCount.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ItemCount.Set {
			e.FieldStart("item_count")
			s.ItemCount.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.ListType.Set {
			e.FieldStart("list_type")
			s.ListType.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieListsOKResultsItem = [8]string{
	0: "description",
	1: "favorite_count",
	2: "id",
	3: "item_count",
	4: "iso_639_1",
	5: "list_type",
	6: "name",
	7: "poster_path",
}

// Decode decodes MovieListsOKResultsItem from json.
func (s *MovieListsOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieListsOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "favorite_count":
			if err := func() error {
				s.FavoriteCount.Reset()
				if err := s.FavoriteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"favorite_count\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "item_count":
			if err := func() error {
				s.ItemCount.Reset()
				if err := s.ItemCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_count\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "list_type":
			if err := func() error {
				s.ListType.Reset()
				if err := s.ListType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list_type\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieListsOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieListsOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieListsOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieNowPlayingListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieNowPlayingListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Dates.Set {
			e.FieldStart("dates")
			s.Dates.Encode(e)
		}
	}
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieNowPlayingListOK = [5]string{
	0: "dates",
	1: "page",
	2: "results",
	3: "total_pages",
	4: "total_results",
}

// Decode decodes MovieNowPlayingListOK from json.
func (s *MovieNowPlayingListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieNowPlayingListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "dates":
			if err := func() error {
				s.Dates.Reset()
				if err := s.Dates.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dates\"")
			}
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]MovieNowPlayingListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieNowPlayingListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieNowPlayingListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieNowPlayingListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieNowPlayingListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieNowPlayingListOKDates) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieNowPlayingListOKDates) encodeFields(e *jx.Encoder) {
	{
		if s.Maximum.Set {
			e.FieldStart("maximum")
			s.Maximum.Encode(e)
		}
	}
	{
		if s.Minimum.Set {
			e.FieldStart("minimum")
			s.Minimum.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieNowPlayingListOKDates = [2]string{
	0: "maximum",
	1: "minimum",
}

// Decode decodes MovieNowPlayingListOKDates from json.
func (s *MovieNowPlayingListOKDates) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieNowPlayingListOKDates to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "maximum":
			if err := func() error {
				s.Maximum.Reset()
				if err := s.Maximum.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"maximum\"")
			}
		case "minimum":
			if err := func() error {
				s.Minimum.Reset()
				if err := s.Minimum.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minimum\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieNowPlayingListOKDates")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieNowPlayingListOKDates) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieNowPlayingListOKDates) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieNowPlayingListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieNowPlayingListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieNowPlayingListOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes MovieNowPlayingListOKResultsItem from json.
func (s *MovieNowPlayingListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieNowPlayingListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieNowPlayingListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieNowPlayingListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieNowPlayingListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MoviePopularListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MoviePopularListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfMoviePopularListOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes MoviePopularListOK from json.
func (s *MoviePopularListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MoviePopularListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]MoviePopularListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MoviePopularListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MoviePopularListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MoviePopularListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MoviePopularListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MoviePopularListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MoviePopularListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfMoviePopularListOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes MoviePopularListOKResultsItem from json.
func (s *MoviePopularListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MoviePopularListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MoviePopularListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MoviePopularListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MoviePopularListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieRecommendationsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieRecommendationsOK) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfMovieRecommendationsOK = [0]string{}

// Decode decodes MovieRecommendationsOK from json.
func (s *MovieRecommendationsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieRecommendationsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode MovieRecommendationsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieRecommendationsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieRecommendationsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieReleaseDatesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieReleaseDatesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieReleaseDatesOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes MovieReleaseDatesOK from json.
func (s *MovieReleaseDatesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieReleaseDatesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]MovieReleaseDatesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieReleaseDatesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieReleaseDatesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieReleaseDatesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieReleaseDatesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieReleaseDatesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieReleaseDatesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.ReleaseDates != nil {
			e.FieldStart("release_dates")
			e.ArrStart()
			for _, elem := range s.ReleaseDates {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieReleaseDatesOKResultsItem = [2]string{
	0: "iso_3166_1",
	1: "release_dates",
}

// Decode decodes MovieReleaseDatesOKResultsItem from json.
func (s *MovieReleaseDatesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieReleaseDatesOKResultsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "release_dates":
			if err := func() error {
				s.ReleaseDates = make([]MovieReleaseDatesOKResultsItemReleaseDatesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieReleaseDatesOKResultsItemReleaseDatesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ReleaseDates = append(s.ReleaseDates, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_dates\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieReleaseDatesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieReleaseDatesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieReleaseDatesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieReleaseDatesOKResultsItemReleaseDatesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieReleaseDatesOKResultsItemReleaseDatesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Certification.Set {
			e.FieldStart("certification")
			s.Certification.Encode(e)
		}
	}
	{
		if s.Descriptors != nil {
			e.FieldStart("descriptors")
			e.ArrStart()
			for _, elem := range s.Descriptors {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Note.Set {
			e.FieldStart("note")
			s.Note.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieReleaseDatesOKResultsItemReleaseDatesItem = [6]string{
	0: "certification",
	1: "descriptors",
	2: "iso_639_1",
	3: "note",
	4: "release_date",
	5: "type",
}

// Decode decodes MovieReleaseDatesOKResultsItemReleaseDatesItem from json.
func (s *MovieReleaseDatesOKResultsItemReleaseDatesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieReleaseDatesOKResultsItemReleaseDatesItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "certification":
			if err := func() error {
				s.Certification.Reset()
				if err := s.Certification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"certification\"")
			}
		case "descriptors":
			if err := func() error {
				s.Descriptors = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.Descriptors = append(s.Descriptors, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"descriptors\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "note":
			if err := func() error {
				s.Note.Reset()
				if err := s.Note.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"note\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieReleaseDatesOKResultsItemReleaseDatesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieReleaseDatesOKResultsItemReleaseDatesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieReleaseDatesOKResultsItemReleaseDatesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieReviewsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieReviewsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieReviewsOK = [5]string{
	0: "id",
	1: "page",
	2: "results",
	3: "total_pages",
	4: "total_results",
}

// Decode decodes MovieReviewsOK from json.
func (s *MovieReviewsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieReviewsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]MovieReviewsOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieReviewsOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieReviewsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieReviewsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieReviewsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieReviewsOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieReviewsOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Author.Set {
			e.FieldStart("author")
			s.Author.Encode(e)
		}
	}
	{
		if s.AuthorDetails.Set {
			e.FieldStart("author_details")
			s.AuthorDetails.Encode(e)
		}
	}
	{
		if s.Content.Set {
			e.FieldStart("content")
			s.Content.Encode(e)
		}
	}
	{
		if s.CreatedAt.Set {
			e.FieldStart("created_at")
			s.CreatedAt.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.UpdatedAt.Set {
			e.FieldStart("updated_at")
			s.UpdatedAt.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieReviewsOKResultsItem = [7]string{
	0: "author",
	1: "author_details",
	2: "content",
	3: "created_at",
	4: "id",
	5: "updated_at",
	6: "url",
}

// Decode decodes MovieReviewsOKResultsItem from json.
func (s *MovieReviewsOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieReviewsOKResultsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "author":
			if err := func() error {
				s.Author.Reset()
				if err := s.Author.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"author\"")
			}
		case "author_details":
			if err := func() error {
				s.AuthorDetails.Reset()
				if err := s.AuthorDetails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"author_details\"")
			}
		case "content":
			if err := func() error {
				s.Content.Reset()
				if err := s.Content.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content\"")
			}
		case "created_at":
			if err := func() error {
				s.CreatedAt.Reset()
				if err := s.CreatedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_at\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "updated_at":
			if err := func() error {
				s.UpdatedAt.Reset()
				if err := s.UpdatedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated_at\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieReviewsOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieReviewsOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieReviewsOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieReviewsOKResultsItemAuthorDetails) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieReviewsOKResultsItemAuthorDetails) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
	{
		if s.AvatarPath.Set {
			e.FieldStart("avatar_path")
			s.AvatarPath.Encode(e)
		}
	}
	{
		if s.Rating.Set {
			e.FieldStart("rating")
			s.Rating.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieReviewsOKResultsItemAuthorDetails = [4]string{
	0: "name",
	1: "username",
	2: "avatar_path",
	3: "rating",
}

// Decode decodes MovieReviewsOKResultsItemAuthorDetails from json.
func (s *MovieReviewsOKResultsItemAuthorDetails) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieReviewsOKResultsItemAuthorDetails to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		case "avatar_path":
			if err := func() error {
				s.AvatarPath.Reset()
				if err := s.AvatarPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"avatar_path\"")
			}
		case "rating":
			if err := func() error {
				s.Rating.Reset()
				if err := s.Rating.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rating\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieReviewsOKResultsItemAuthorDetails")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieReviewsOKResultsItemAuthorDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieReviewsOKResultsItemAuthorDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieSimilarOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieSimilarOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieSimilarOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes MovieSimilarOK from json.
func (s *MovieSimilarOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieSimilarOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]MovieSimilarOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieSimilarOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieSimilarOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieSimilarOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieSimilarOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieSimilarOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieSimilarOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieSimilarOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes MovieSimilarOKResultsItem from json.
func (s *MovieSimilarOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieSimilarOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieSimilarOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieSimilarOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieSimilarOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieTopRatedListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieTopRatedListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieTopRatedListOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes MovieTopRatedListOK from json.
func (s *MovieTopRatedListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieTopRatedListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]MovieTopRatedListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieTopRatedListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieTopRatedListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieTopRatedListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieTopRatedListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieTopRatedListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieTopRatedListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieTopRatedListOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes MovieTopRatedListOKResultsItem from json.
func (s *MovieTopRatedListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieTopRatedListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieTopRatedListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieTopRatedListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieTopRatedListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieTranslationsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieTranslationsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Translations != nil {
			e.FieldStart("translations")
			e.ArrStart()
			for _, elem := range s.Translations {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieTranslationsOK = [2]string{
	0: "id",
	1: "translations",
}

// Decode decodes MovieTranslationsOK from json.
func (s *MovieTranslationsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieTranslationsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "translations":
			if err := func() error {
				s.Translations = make([]MovieTranslationsOKTranslationsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieTranslationsOKTranslationsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Translations = append(s.Translations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translations\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieTranslationsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieTranslationsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieTranslationsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieTranslationsOKTranslationsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieTranslationsOKTranslationsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.EnglishName.Set {
			e.FieldStart("english_name")
			s.EnglishName.Encode(e)
		}
	}
	{
		if s.Data.Set {
			e.FieldStart("data")
			s.Data.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieTranslationsOKTranslationsItem = [5]string{
	0: "iso_3166_1",
	1: "iso_639_1",
	2: "name",
	3: "english_name",
	4: "data",
}

// Decode decodes MovieTranslationsOKTranslationsItem from json.
func (s *MovieTranslationsOKTranslationsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieTranslationsOKTranslationsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "english_name":
			if err := func() error {
				s.EnglishName.Reset()
				if err := s.EnglishName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"english_name\"")
			}
		case "data":
			if err := func() error {
				s.Data.Reset()
				if err := s.Data.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieTranslationsOKTranslationsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieTranslationsOKTranslationsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieTranslationsOKTranslationsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieTranslationsOKTranslationsItemData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieTranslationsOKTranslationsItemData) encodeFields(e *jx.Encoder) {
	{
		if s.Homepage.Set {
			e.FieldStart("homepage")
			s.Homepage.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Runtime.Set {
			e.FieldStart("runtime")
			s.Runtime.Encode(e)
		}
	}
	{
		if s.Tagline.Set {
			e.FieldStart("tagline")
			s.Tagline.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieTranslationsOKTranslationsItemData = [5]string{
	0: "homepage",
	1: "overview",
	2: "runtime",
	3: "tagline",
	4: "title",
}

// Decode decodes MovieTranslationsOKTranslationsItemData from json.
func (s *MovieTranslationsOKTranslationsItemData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieTranslationsOKTranslationsItemData to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "homepage":
			if err := func() error {
				s.Homepage.Reset()
				if err := s.Homepage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"homepage\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "runtime":
			if err := func() error {
				s.Runtime.Reset()
				if err := s.Runtime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runtime\"")
			}
		case "tagline":
			if err := func() error {
				s.Tagline.Reset()
				if err := s.Tagline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tagline\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieTranslationsOKTranslationsItemData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieTranslationsOKTranslationsItemData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieTranslationsOKTranslationsItemData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieUpcomingListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieUpcomingListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Dates.Set {
			e.FieldStart("dates")
			s.Dates.Encode(e)
		}
	}
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieUpcomingListOK = [5]string{
	0: "dates",
	1: "page",
	2: "results",
	3: "total_pages",
	4: "total_results",
}

// Decode decodes MovieUpcomingListOK from json.
func (s *MovieUpcomingListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieUpcomingListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "dates":
			if err := func() error {
				s.Dates.Reset()
				if err := s.Dates.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dates\"")
			}
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]MovieUpcomingListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieUpcomingListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieUpcomingListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieUpcomingListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieUpcomingListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieUpcomingListOKDates) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieUpcomingListOKDates) encodeFields(e *jx.Encoder) {
	{
		if s.Maximum.Set {
			e.FieldStart("maximum")
			s.Maximum.Encode(e)
		}
	}
	{
		if s.Minimum.Set {
			e.FieldStart("minimum")
			s.Minimum.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieUpcomingListOKDates = [2]string{
	0: "maximum",
	1: "minimum",
}

// Decode decodes MovieUpcomingListOKDates from json.
func (s *MovieUpcomingListOKDates) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieUpcomingListOKDates to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "maximum":
			if err := func() error {
				s.Maximum.Reset()
				if err := s.Maximum.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"maximum\"")
			}
		case "minimum":
			if err := func() error {
				s.Minimum.Reset()
				if err := s.Minimum.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minimum\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieUpcomingListOKDates")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieUpcomingListOKDates) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieUpcomingListOKDates) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieUpcomingListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieUpcomingListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieUpcomingListOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes MovieUpcomingListOKResultsItem from json.
func (s *MovieUpcomingListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieUpcomingListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieUpcomingListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieUpcomingListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieUpcomingListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieVideosOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieVideosOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieVideosOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes MovieVideosOK from json.
func (s *MovieVideosOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieVideosOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]MovieVideosOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieVideosOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieVideosOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieVideosOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieVideosOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieVideosOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieVideosOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Size.Set {
			e.FieldStart("size")
			s.Size.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Official.Set {
			e.FieldStart("official")
			s.Official.Encode(e)
		}
	}
	{
		if s.PublishedAt.Set {
			e.FieldStart("published_at")
			s.PublishedAt.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieVideosOKResultsItem = [10]string{
	0: "iso_639_1",
	1: "iso_3166_1",
	2: "name",
	3: "key",
	4: "site",
	5: "size",
	6: "type",
	7: "official",
	8: "published_at",
	9: "id",
}

// Decode decodes MovieVideosOKResultsItem from json.
func (s *MovieVideosOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieVideosOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "size":
			if err := func() error {
				s.Size.Reset()
				if err := s.Size.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "official":
			if err := func() error {
				s.Official.Reset()
				if err := s.Official.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"official\"")
			}
		case "published_at":
			if err := func() error {
				s.PublishedAt.Reset()
				if err := s.PublishedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"published_at\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieVideosOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieVideosOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieVideosOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results.Set {
			e.FieldStart("results")
			s.Results.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes MovieWatchProvidersOK from json.
func (s *MovieWatchProvidersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results.Reset()
				if err := s.Results.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResults) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResults) encodeFields(e *jx.Encoder) {
	{
		if s.AE.Set {
			e.FieldStart("AE")
			s.AE.Encode(e)
		}
	}
	{
		if s.AL.Set {
			e.FieldStart("AL")
			s.AL.Encode(e)
		}
	}
	{
		if s.AR.Set {
			e.FieldStart("AR")
			s.AR.Encode(e)
		}
	}
	{
		if s.AT.Set {
			e.FieldStart("AT")
			s.AT.Encode(e)
		}
	}
	{
		if s.AU.Set {
			e.FieldStart("AU")
			s.AU.Encode(e)
		}
	}
	{
		if s.BA.Set {
			e.FieldStart("BA")
			s.BA.Encode(e)
		}
	}
	{
		if s.BB.Set {
			e.FieldStart("BB")
			s.BB.Encode(e)
		}
	}
	{
		if s.BE.Set {
			e.FieldStart("BE")
			s.BE.Encode(e)
		}
	}
	{
		if s.BG.Set {
			e.FieldStart("BG")
			s.BG.Encode(e)
		}
	}
	{
		if s.BH.Set {
			e.FieldStart("BH")
			s.BH.Encode(e)
		}
	}
	{
		if s.BO.Set {
			e.FieldStart("BO")
			s.BO.Encode(e)
		}
	}
	{
		if s.BR.Set {
			e.FieldStart("BR")
			s.BR.Encode(e)
		}
	}
	{
		if s.BS.Set {
			e.FieldStart("BS")
			s.BS.Encode(e)
		}
	}
	{
		if s.CA.Set {
			e.FieldStart("CA")
			s.CA.Encode(e)
		}
	}
	{
		if s.CH.Set {
			e.FieldStart("CH")
			s.CH.Encode(e)
		}
	}
	{
		if s.CL.Set {
			e.FieldStart("CL")
			s.CL.Encode(e)
		}
	}
	{
		if s.CO.Set {
			e.FieldStart("CO")
			s.CO.Encode(e)
		}
	}
	{
		if s.CR.Set {
			e.FieldStart("CR")
			s.CR.Encode(e)
		}
	}
	{
		if s.CV.Set {
			e.FieldStart("CV")
			s.CV.Encode(e)
		}
	}
	{
		if s.CZ.Set {
			e.FieldStart("CZ")
			s.CZ.Encode(e)
		}
	}
	{
		if s.DE.Set {
			e.FieldStart("DE")
			s.DE.Encode(e)
		}
	}
	{
		if s.DK.Set {
			e.FieldStart("DK")
			s.DK.Encode(e)
		}
	}
	{
		if s.DO.Set {
			e.FieldStart("DO")
			s.DO.Encode(e)
		}
	}
	{
		if s.EC.Set {
			e.FieldStart("EC")
			s.EC.Encode(e)
		}
	}
	{
		if s.EE.Set {
			e.FieldStart("EE")
			s.EE.Encode(e)
		}
	}
	{
		if s.EG.Set {
			e.FieldStart("EG")
			s.EG.Encode(e)
		}
	}
	{
		if s.ES.Set {
			e.FieldStart("ES")
			s.ES.Encode(e)
		}
	}
	{
		if s.FI.Set {
			e.FieldStart("FI")
			s.FI.Encode(e)
		}
	}
	{
		if s.FJ.Set {
			e.FieldStart("FJ")
			s.FJ.Encode(e)
		}
	}
	{
		if s.FR.Set {
			e.FieldStart("FR")
			s.FR.Encode(e)
		}
	}
	{
		if s.GB.Set {
			e.FieldStart("GB")
			s.GB.Encode(e)
		}
	}
	{
		if s.GF.Set {
			e.FieldStart("GF")
			s.GF.Encode(e)
		}
	}
	{
		if s.GI.Set {
			e.FieldStart("GI")
			s.GI.Encode(e)
		}
	}
	{
		if s.GR.Set {
			e.FieldStart("GR")
			s.GR.Encode(e)
		}
	}
	{
		if s.GT.Set {
			e.FieldStart("GT")
			s.GT.Encode(e)
		}
	}
	{
		if s.HK.Set {
			e.FieldStart("HK")
			s.HK.Encode(e)
		}
	}
	{
		if s.HN.Set {
			e.FieldStart("HN")
			s.HN.Encode(e)
		}
	}
	{
		if s.HR.Set {
			e.FieldStart("HR")
			s.HR.Encode(e)
		}
	}
	{
		if s.HU.Set {
			e.FieldStart("HU")
			s.HU.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("ID")
			s.ID.Encode(e)
		}
	}
	{
		if s.IE.Set {
			e.FieldStart("IE")
			s.IE.Encode(e)
		}
	}
	{
		if s.IL.Set {
			e.FieldStart("IL")
			s.IL.Encode(e)
		}
	}
	{
		if s.IN.Set {
			e.FieldStart("IN")
			s.IN.Encode(e)
		}
	}
	{
		if s.IQ.Set {
			e.FieldStart("IQ")
			s.IQ.Encode(e)
		}
	}
	{
		if s.IS.Set {
			e.FieldStart("IS")
			s.IS.Encode(e)
		}
	}
	{
		if s.IT.Set {
			e.FieldStart("IT")
			s.IT.Encode(e)
		}
	}
	{
		if s.JM.Set {
			e.FieldStart("JM")
			s.JM.Encode(e)
		}
	}
	{
		if s.JO.Set {
			e.FieldStart("JO")
			s.JO.Encode(e)
		}
	}
	{
		if s.JP.Set {
			e.FieldStart("JP")
			s.JP.Encode(e)
		}
	}
	{
		if s.KR.Set {
			e.FieldStart("KR")
			s.KR.Encode(e)
		}
	}
	{
		if s.KW.Set {
			e.FieldStart("KW")
			s.KW.Encode(e)
		}
	}
	{
		if s.LB.Set {
			e.FieldStart("LB")
			s.LB.Encode(e)
		}
	}
	{
		if s.LI.Set {
			e.FieldStart("LI")
			s.LI.Encode(e)
		}
	}
	{
		if s.LT.Set {
			e.FieldStart("LT")
			s.LT.Encode(e)
		}
	}
	{
		if s.LV.Set {
			e.FieldStart("LV")
			s.LV.Encode(e)
		}
	}
	{
		if s.MD.Set {
			e.FieldStart("MD")
			s.MD.Encode(e)
		}
	}
	{
		if s.MK.Set {
			e.FieldStart("MK")
			s.MK.Encode(e)
		}
	}
	{
		if s.MT.Set {
			e.FieldStart("MT")
			s.MT.Encode(e)
		}
	}
	{
		if s.MU.Set {
			e.FieldStart("MU")
			s.MU.Encode(e)
		}
	}
	{
		if s.MX.Set {
			e.FieldStart("MX")
			s.MX.Encode(e)
		}
	}
	{
		if s.MY.Set {
			e.FieldStart("MY")
			s.MY.Encode(e)
		}
	}
	{
		if s.MZ.Set {
			e.FieldStart("MZ")
			s.MZ.Encode(e)
		}
	}
	{
		if s.NL.Set {
			e.FieldStart("NL")
			s.NL.Encode(e)
		}
	}
	{
		if s.NO.Set {
			e.FieldStart("NO")
			s.NO.Encode(e)
		}
	}
	{
		if s.NZ.Set {
			e.FieldStart("NZ")
			s.NZ.Encode(e)
		}
	}
	{
		if s.OM.Set {
			e.FieldStart("OM")
			s.OM.Encode(e)
		}
	}
	{
		if s.PA.Set {
			e.FieldStart("PA")
			s.PA.Encode(e)
		}
	}
	{
		if s.PE.Set {
			e.FieldStart("PE")
			s.PE.Encode(e)
		}
	}
	{
		if s.PH.Set {
			e.FieldStart("PH")
			s.PH.Encode(e)
		}
	}
	{
		if s.PK.Set {
			e.FieldStart("PK")
			s.PK.Encode(e)
		}
	}
	{
		if s.PL.Set {
			e.FieldStart("PL")
			s.PL.Encode(e)
		}
	}
	{
		if s.PS.Set {
			e.FieldStart("PS")
			s.PS.Encode(e)
		}
	}
	{
		if s.PT.Set {
			e.FieldStart("PT")
			s.PT.Encode(e)
		}
	}
	{
		if s.PY.Set {
			e.FieldStart("PY")
			s.PY.Encode(e)
		}
	}
	{
		if s.QA.Set {
			e.FieldStart("QA")
			s.QA.Encode(e)
		}
	}
	{
		if s.RO.Set {
			e.FieldStart("RO")
			s.RO.Encode(e)
		}
	}
	{
		if s.RS.Set {
			e.FieldStart("RS")
			s.RS.Encode(e)
		}
	}
	{
		if s.RU.Set {
			e.FieldStart("RU")
			s.RU.Encode(e)
		}
	}
	{
		if s.SA.Set {
			e.FieldStart("SA")
			s.SA.Encode(e)
		}
	}
	{
		if s.SE.Set {
			e.FieldStart("SE")
			s.SE.Encode(e)
		}
	}
	{
		if s.SG.Set {
			e.FieldStart("SG")
			s.SG.Encode(e)
		}
	}
	{
		if s.SI.Set {
			e.FieldStart("SI")
			s.SI.Encode(e)
		}
	}
	{
		if s.SK.Set {
			e.FieldStart("SK")
			s.SK.Encode(e)
		}
	}
	{
		if s.SM.Set {
			e.FieldStart("SM")
			s.SM.Encode(e)
		}
	}
	{
		if s.SV.Set {
			e.FieldStart("SV")
			s.SV.Encode(e)
		}
	}
	{
		if s.TH.Set {
			e.FieldStart("TH")
			s.TH.Encode(e)
		}
	}
	{
		if s.TR.Set {
			e.FieldStart("TR")
			s.TR.Encode(e)
		}
	}
	{
		if s.TT.Set {
			e.FieldStart("TT")
			s.TT.Encode(e)
		}
	}
	{
		if s.TW.Set {
			e.FieldStart("TW")
			s.TW.Encode(e)
		}
	}
	{
		if s.UG.Set {
			e.FieldStart("UG")
			s.UG.Encode(e)
		}
	}
	{
		if s.US.Set {
			e.FieldStart("US")
			s.US.Encode(e)
		}
	}
	{
		if s.UY.Set {
			e.FieldStart("UY")
			s.UY.Encode(e)
		}
	}
	{
		if s.VE.Set {
			e.FieldStart("VE")
			s.VE.Encode(e)
		}
	}
	{
		if s.YE.Set {
			e.FieldStart("YE")
			s.YE.Encode(e)
		}
	}
	{
		if s.ZA.Set {
			e.FieldStart("ZA")
			s.ZA.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResults = [95]string{
	0:  "AE",
	1:  "AL",
	2:  "AR",
	3:  "AT",
	4:  "AU",
	5:  "BA",
	6:  "BB",
	7:  "BE",
	8:  "BG",
	9:  "BH",
	10: "BO",
	11: "BR",
	12: "BS",
	13: "CA",
	14: "CH",
	15: "CL",
	16: "CO",
	17: "CR",
	18: "CV",
	19: "CZ",
	20: "DE",
	21: "DK",
	22: "DO",
	23: "EC",
	24: "EE",
	25: "EG",
	26: "ES",
	27: "FI",
	28: "FJ",
	29: "FR",
	30: "GB",
	31: "GF",
	32: "GI",
	33: "GR",
	34: "GT",
	35: "HK",
	36: "HN",
	37: "HR",
	38: "HU",
	39: "ID",
	40: "IE",
	41: "IL",
	42: "IN",
	43: "IQ",
	44: "IS",
	45: "IT",
	46: "JM",
	47: "JO",
	48: "JP",
	49: "KR",
	50: "KW",
	51: "LB",
	52: "LI",
	53: "LT",
	54: "LV",
	55: "MD",
	56: "MK",
	57: "MT",
	58: "MU",
	59: "MX",
	60: "MY",
	61: "MZ",
	62: "NL",
	63: "NO",
	64: "NZ",
	65: "OM",
	66: "PA",
	67: "PE",
	68: "PH",
	69: "PK",
	70: "PL",
	71: "PS",
	72: "PT",
	73: "PY",
	74: "QA",
	75: "RO",
	76: "RS",
	77: "RU",
	78: "SA",
	79: "SE",
	80: "SG",
	81: "SI",
	82: "SK",
	83: "SM",
	84: "SV",
	85: "TH",
	86: "TR",
	87: "TT",
	88: "TW",
	89: "UG",
	90: "US",
	91: "UY",
	92: "VE",
	93: "YE",
	94: "ZA",
}

// Decode decodes MovieWatchProvidersOKResults from json.
func (s *MovieWatchProvidersOKResults) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResults to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "AE":
			if err := func() error {
				s.AE.Reset()
				if err := s.AE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AE\"")
			}
		case "AL":
			if err := func() error {
				s.AL.Reset()
				if err := s.AL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AL\"")
			}
		case "AR":
			if err := func() error {
				s.AR.Reset()
				if err := s.AR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AR\"")
			}
		case "AT":
			if err := func() error {
				s.AT.Reset()
				if err := s.AT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AT\"")
			}
		case "AU":
			if err := func() error {
				s.AU.Reset()
				if err := s.AU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AU\"")
			}
		case "BA":
			if err := func() error {
				s.BA.Reset()
				if err := s.BA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BA\"")
			}
		case "BB":
			if err := func() error {
				s.BB.Reset()
				if err := s.BB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BB\"")
			}
		case "BE":
			if err := func() error {
				s.BE.Reset()
				if err := s.BE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BE\"")
			}
		case "BG":
			if err := func() error {
				s.BG.Reset()
				if err := s.BG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BG\"")
			}
		case "BH":
			if err := func() error {
				s.BH.Reset()
				if err := s.BH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BH\"")
			}
		case "BO":
			if err := func() error {
				s.BO.Reset()
				if err := s.BO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BO\"")
			}
		case "BR":
			if err := func() error {
				s.BR.Reset()
				if err := s.BR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BR\"")
			}
		case "BS":
			if err := func() error {
				s.BS.Reset()
				if err := s.BS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BS\"")
			}
		case "CA":
			if err := func() error {
				s.CA.Reset()
				if err := s.CA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CA\"")
			}
		case "CH":
			if err := func() error {
				s.CH.Reset()
				if err := s.CH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CH\"")
			}
		case "CL":
			if err := func() error {
				s.CL.Reset()
				if err := s.CL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CL\"")
			}
		case "CO":
			if err := func() error {
				s.CO.Reset()
				if err := s.CO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CO\"")
			}
		case "CR":
			if err := func() error {
				s.CR.Reset()
				if err := s.CR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CR\"")
			}
		case "CV":
			if err := func() error {
				s.CV.Reset()
				if err := s.CV.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CV\"")
			}
		case "CZ":
			if err := func() error {
				s.CZ.Reset()
				if err := s.CZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CZ\"")
			}
		case "DE":
			if err := func() error {
				s.DE.Reset()
				if err := s.DE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DE\"")
			}
		case "DK":
			if err := func() error {
				s.DK.Reset()
				if err := s.DK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DK\"")
			}
		case "DO":
			if err := func() error {
				s.DO.Reset()
				if err := s.DO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DO\"")
			}
		case "EC":
			if err := func() error {
				s.EC.Reset()
				if err := s.EC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EC\"")
			}
		case "EE":
			if err := func() error {
				s.EE.Reset()
				if err := s.EE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EE\"")
			}
		case "EG":
			if err := func() error {
				s.EG.Reset()
				if err := s.EG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EG\"")
			}
		case "ES":
			if err := func() error {
				s.ES.Reset()
				if err := s.ES.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ES\"")
			}
		case "FI":
			if err := func() error {
				s.FI.Reset()
				if err := s.FI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FI\"")
			}
		case "FJ":
			if err := func() error {
				s.FJ.Reset()
				if err := s.FJ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FJ\"")
			}
		case "FR":
			if err := func() error {
				s.FR.Reset()
				if err := s.FR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FR\"")
			}
		case "GB":
			if err := func() error {
				s.GB.Reset()
				if err := s.GB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GB\"")
			}
		case "GF":
			if err := func() error {
				s.GF.Reset()
				if err := s.GF.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GF\"")
			}
		case "GI":
			if err := func() error {
				s.GI.Reset()
				if err := s.GI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GI\"")
			}
		case "GR":
			if err := func() error {
				s.GR.Reset()
				if err := s.GR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GR\"")
			}
		case "GT":
			if err := func() error {
				s.GT.Reset()
				if err := s.GT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GT\"")
			}
		case "HK":
			if err := func() error {
				s.HK.Reset()
				if err := s.HK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HK\"")
			}
		case "HN":
			if err := func() error {
				s.HN.Reset()
				if err := s.HN.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HN\"")
			}
		case "HR":
			if err := func() error {
				s.HR.Reset()
				if err := s.HR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HR\"")
			}
		case "HU":
			if err := func() error {
				s.HU.Reset()
				if err := s.HU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HU\"")
			}
		case "ID":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ID\"")
			}
		case "IE":
			if err := func() error {
				s.IE.Reset()
				if err := s.IE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IE\"")
			}
		case "IL":
			if err := func() error {
				s.IL.Reset()
				if err := s.IL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IL\"")
			}
		case "IN":
			if err := func() error {
				s.IN.Reset()
				if err := s.IN.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IN\"")
			}
		case "IQ":
			if err := func() error {
				s.IQ.Reset()
				if err := s.IQ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IQ\"")
			}
		case "IS":
			if err := func() error {
				s.IS.Reset()
				if err := s.IS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IS\"")
			}
		case "IT":
			if err := func() error {
				s.IT.Reset()
				if err := s.IT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IT\"")
			}
		case "JM":
			if err := func() error {
				s.JM.Reset()
				if err := s.JM.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JM\"")
			}
		case "JO":
			if err := func() error {
				s.JO.Reset()
				if err := s.JO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JO\"")
			}
		case "JP":
			if err := func() error {
				s.JP.Reset()
				if err := s.JP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JP\"")
			}
		case "KR":
			if err := func() error {
				s.KR.Reset()
				if err := s.KR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"KR\"")
			}
		case "KW":
			if err := func() error {
				s.KW.Reset()
				if err := s.KW.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"KW\"")
			}
		case "LB":
			if err := func() error {
				s.LB.Reset()
				if err := s.LB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LB\"")
			}
		case "LI":
			if err := func() error {
				s.LI.Reset()
				if err := s.LI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LI\"")
			}
		case "LT":
			if err := func() error {
				s.LT.Reset()
				if err := s.LT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LT\"")
			}
		case "LV":
			if err := func() error {
				s.LV.Reset()
				if err := s.LV.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LV\"")
			}
		case "MD":
			if err := func() error {
				s.MD.Reset()
				if err := s.MD.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MD\"")
			}
		case "MK":
			if err := func() error {
				s.MK.Reset()
				if err := s.MK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MK\"")
			}
		case "MT":
			if err := func() error {
				s.MT.Reset()
				if err := s.MT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MT\"")
			}
		case "MU":
			if err := func() error {
				s.MU.Reset()
				if err := s.MU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MU\"")
			}
		case "MX":
			if err := func() error {
				s.MX.Reset()
				if err := s.MX.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MX\"")
			}
		case "MY":
			if err := func() error {
				s.MY.Reset()
				if err := s.MY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MY\"")
			}
		case "MZ":
			if err := func() error {
				s.MZ.Reset()
				if err := s.MZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MZ\"")
			}
		case "NL":
			if err := func() error {
				s.NL.Reset()
				if err := s.NL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NL\"")
			}
		case "NO":
			if err := func() error {
				s.NO.Reset()
				if err := s.NO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NO\"")
			}
		case "NZ":
			if err := func() error {
				s.NZ.Reset()
				if err := s.NZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NZ\"")
			}
		case "OM":
			if err := func() error {
				s.OM.Reset()
				if err := s.OM.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"OM\"")
			}
		case "PA":
			if err := func() error {
				s.PA.Reset()
				if err := s.PA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PA\"")
			}
		case "PE":
			if err := func() error {
				s.PE.Reset()
				if err := s.PE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PE\"")
			}
		case "PH":
			if err := func() error {
				s.PH.Reset()
				if err := s.PH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PH\"")
			}
		case "PK":
			if err := func() error {
				s.PK.Reset()
				if err := s.PK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PK\"")
			}
		case "PL":
			if err := func() error {
				s.PL.Reset()
				if err := s.PL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PL\"")
			}
		case "PS":
			if err := func() error {
				s.PS.Reset()
				if err := s.PS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PS\"")
			}
		case "PT":
			if err := func() error {
				s.PT.Reset()
				if err := s.PT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PT\"")
			}
		case "PY":
			if err := func() error {
				s.PY.Reset()
				if err := s.PY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PY\"")
			}
		case "QA":
			if err := func() error {
				s.QA.Reset()
				if err := s.QA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"QA\"")
			}
		case "RO":
			if err := func() error {
				s.RO.Reset()
				if err := s.RO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RO\"")
			}
		case "RS":
			if err := func() error {
				s.RS.Reset()
				if err := s.RS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RS\"")
			}
		case "RU":
			if err := func() error {
				s.RU.Reset()
				if err := s.RU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RU\"")
			}
		case "SA":
			if err := func() error {
				s.SA.Reset()
				if err := s.SA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SA\"")
			}
		case "SE":
			if err := func() error {
				s.SE.Reset()
				if err := s.SE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SE\"")
			}
		case "SG":
			if err := func() error {
				s.SG.Reset()
				if err := s.SG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SG\"")
			}
		case "SI":
			if err := func() error {
				s.SI.Reset()
				if err := s.SI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SI\"")
			}
		case "SK":
			if err := func() error {
				s.SK.Reset()
				if err := s.SK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SK\"")
			}
		case "SM":
			if err := func() error {
				s.SM.Reset()
				if err := s.SM.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SM\"")
			}
		case "SV":
			if err := func() error {
				s.SV.Reset()
				if err := s.SV.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SV\"")
			}
		case "TH":
			if err := func() error {
				s.TH.Reset()
				if err := s.TH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TH\"")
			}
		case "TR":
			if err := func() error {
				s.TR.Reset()
				if err := s.TR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TR\"")
			}
		case "TT":
			if err := func() error {
				s.TT.Reset()
				if err := s.TT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TT\"")
			}
		case "TW":
			if err := func() error {
				s.TW.Reset()
				if err := s.TW.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TW\"")
			}
		case "UG":
			if err := func() error {
				s.UG.Reset()
				if err := s.UG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"UG\"")
			}
		case "US":
			if err := func() error {
				s.US.Reset()
				if err := s.US.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"US\"")
			}
		case "UY":
			if err := func() error {
				s.UY.Reset()
				if err := s.UY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"UY\"")
			}
		case "VE":
			if err := func() error {
				s.VE.Reset()
				if err := s.VE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"VE\"")
			}
		case "YE":
			if err := func() error {
				s.YE.Reset()
				if err := s.YE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"YE\"")
			}
		case "ZA":
			if err := func() error {
				s.ZA.Reset()
				if err := s.ZA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ZA\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResults")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResults) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResults) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsAE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsAE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsAE = [4]string{
	0: "link",
	1: "flatrate",
	2: "rent",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsAE from json.
func (s *MovieWatchProvidersOKResultsAE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsAE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsAEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsAEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsAERentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsAERentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsAEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsAEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsAE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsAE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsAE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsAEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsAEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsAEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsAEBuyItem from json.
func (s *MovieWatchProvidersOKResultsAEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsAEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsAEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsAEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsAEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsAEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsAEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsAEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsAEFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsAEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsAEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsAEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsAEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsAEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsAERentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsAERentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsAERentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsAERentItem from json.
func (s *MovieWatchProvidersOKResultsAERentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsAERentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsAERentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsAERentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsAERentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsAL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsAL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsAL = [2]string{
	0: "link",
	1: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsAL from json.
func (s *MovieWatchProvidersOKResultsAL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsAL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsALBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsALBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsAL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsAL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsAL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsALBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsALBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsALBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsALBuyItem from json.
func (s *MovieWatchProvidersOKResultsALBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsALBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsALBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsALBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsALBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsAR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsAR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsAR = [4]string{
	0: "link",
	1: "buy",
	2: "flatrate",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsAR from json.
func (s *MovieWatchProvidersOKResultsAR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsAR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsARBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsARBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsARFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsARFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsARRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsARRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsAR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsAR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsAR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsARBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsARBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsARBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsARBuyItem from json.
func (s *MovieWatchProvidersOKResultsARBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsARBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsARBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsARBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsARBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsARFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsARFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsARFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsARFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsARFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsARFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsARFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsARFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsARFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsARRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsARRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsARRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsARRentItem from json.
func (s *MovieWatchProvidersOKResultsARRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsARRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsARRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsARRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsARRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsAT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsAT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsAT = [4]string{
	0: "link",
	1: "flatrate",
	2: "buy",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsAT from json.
func (s *MovieWatchProvidersOKResultsAT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsAT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsATFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsATFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsATBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsATBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsATRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsATRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsAT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsAT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsAT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsATBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsATBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsATBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsATBuyItem from json.
func (s *MovieWatchProvidersOKResultsATBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsATBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsATBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsATBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsATBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsATFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsATFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsATFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsATFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsATFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsATFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsATFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsATFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsATFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsATRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsATRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsATRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsATRentItem from json.
func (s *MovieWatchProvidersOKResultsATRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsATRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsATRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsATRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsATRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsAU) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsAU) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsAU = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsAU from json.
func (s *MovieWatchProvidersOKResultsAU) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsAU to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsAUFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsAUFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsAUBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsAUBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsAU")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsAU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsAU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsAUBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsAUBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsAUBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsAUBuyItem from json.
func (s *MovieWatchProvidersOKResultsAUBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsAUBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsAUBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsAUBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsAUBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsAUFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsAUFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsAUFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsAUFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsAUFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsAUFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsAUFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsAUFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsAUFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBA = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsBA from json.
func (s *MovieWatchProvidersOKResultsBA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsBABuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBABuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsBAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBABuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBABuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBABuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBABuyItem from json.
func (s *MovieWatchProvidersOKResultsBABuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBABuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBABuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBABuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBABuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBAFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsBAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBB) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBB) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBB = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsBB from json.
func (s *MovieWatchProvidersOKResultsBB) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBB to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsBBFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBBFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBB")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBBFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBBFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBBFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBBFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsBBFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBBFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBBFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBBFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBBFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBE = [4]string{
	0: "link",
	1: "rent",
	2: "flatrate",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsBE from json.
func (s *MovieWatchProvidersOKResultsBE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsBERentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBERentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsBEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsBEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBEBuyItem from json.
func (s *MovieWatchProvidersOKResultsBEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBEFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsBEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBERentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBERentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBERentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBERentItem from json.
func (s *MovieWatchProvidersOKResultsBERentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBERentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBERentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBERentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBERentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBG = [4]string{
	0: "link",
	1: "rent",
	2: "buy",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsBG from json.
func (s *MovieWatchProvidersOKResultsBG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsBGRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBGRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsBGBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBGBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsBGFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBGFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBGBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBGBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBGBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBGBuyItem from json.
func (s *MovieWatchProvidersOKResultsBGBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBGBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBGBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBGBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBGBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBGFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBGFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBGFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBGFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsBGFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBGFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBGFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBGFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBGFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBGRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBGRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBGRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBGRentItem from json.
func (s *MovieWatchProvidersOKResultsBGRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBGRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBGRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBGRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBGRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBH) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBH) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBH = [2]string{
	0: "link",
	1: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsBH from json.
func (s *MovieWatchProvidersOKResultsBH) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBH to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsBHBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBHBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBH")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBHBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBHBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBHBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBHBuyItem from json.
func (s *MovieWatchProvidersOKResultsBHBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBHBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBHBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBHBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBHBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBO = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsBO from json.
func (s *MovieWatchProvidersOKResultsBO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsBOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBOFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsBOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsBR from json.
func (s *MovieWatchProvidersOKResultsBR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsBRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBRFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsBRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBS = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsBS from json.
func (s *MovieWatchProvidersOKResultsBS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsBSFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsBSFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsBSFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsBSFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsBSFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsBSFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsBSFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsBSFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsBSFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsBSFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsBSFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCA = [4]string{
	0: "link",
	1: "rent",
	2: "buy",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsCA from json.
func (s *MovieWatchProvidersOKResultsCA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsCARentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCARentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsCABuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCABuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsCAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCABuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCABuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCABuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCABuyItem from json.
func (s *MovieWatchProvidersOKResultsCABuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCABuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCABuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCABuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCABuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCAFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsCAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCARentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCARentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCARentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCARentItem from json.
func (s *MovieWatchProvidersOKResultsCARentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCARentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCARentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCARentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCARentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCH) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCH) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCH = [4]string{
	0: "link",
	1: "flatrate",
	2: "buy",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsCH from json.
func (s *MovieWatchProvidersOKResultsCH) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCH to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsCHFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCHFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsCHBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCHBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsCHRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCHRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCH")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCHBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCHBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCHBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCHBuyItem from json.
func (s *MovieWatchProvidersOKResultsCHBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCHBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCHBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCHBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCHBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCHFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCHFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCHFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCHFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsCHFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCHFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCHFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCHFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCHFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCHRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCHRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCHRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCHRentItem from json.
func (s *MovieWatchProvidersOKResultsCHRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCHRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCHRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCHRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCHRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCL = [4]string{
	0: "link",
	1: "buy",
	2: "flatrate",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsCL from json.
func (s *MovieWatchProvidersOKResultsCL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsCLBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCLBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsCLFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCLFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsCLRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCLRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCLBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCLBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCLBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCLBuyItem from json.
func (s *MovieWatchProvidersOKResultsCLBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCLBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCLBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCLBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCLBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCLFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCLFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCLFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCLFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsCLFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCLFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCLFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCLFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCLFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCLRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCLRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCLRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCLRentItem from json.
func (s *MovieWatchProvidersOKResultsCLRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCLRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCLRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCLRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCLRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCO = [4]string{
	0: "link",
	1: "buy",
	2: "flatrate",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsCO from json.
func (s *MovieWatchProvidersOKResultsCO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsCOBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCOBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsCOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsCORentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCORentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCOBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCOBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCOBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCOBuyItem from json.
func (s *MovieWatchProvidersOKResultsCOBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCOBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCOBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCOBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCOBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCOFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsCOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCORentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCORentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCORentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCORentItem from json.
func (s *MovieWatchProvidersOKResultsCORentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCORentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCORentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCORentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCORentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsCR from json.
func (s *MovieWatchProvidersOKResultsCR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsCRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCRFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsCRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCV) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCV) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCV = [3]string{
	0: "link",
	1: "buy",
	2: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsCV from json.
func (s *MovieWatchProvidersOKResultsCV) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCV to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsCVBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCVBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsCVRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCVRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCV")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCV) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCV) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCVBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCVBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCVBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCVBuyItem from json.
func (s *MovieWatchProvidersOKResultsCVBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCVBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCVBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCVBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCVBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCVRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCVRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCVRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCVRentItem from json.
func (s *MovieWatchProvidersOKResultsCVRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCVRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCVRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCVRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCVRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCZ = [4]string{
	0: "link",
	1: "flatrate",
	2: "rent",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsCZ from json.
func (s *MovieWatchProvidersOKResultsCZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsCZFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCZFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsCZRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCZRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsCZBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsCZBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCZBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCZBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCZBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCZBuyItem from json.
func (s *MovieWatchProvidersOKResultsCZBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCZBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCZBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCZBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCZBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCZFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCZFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCZFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCZFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsCZFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCZFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCZFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCZFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCZFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsCZRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsCZRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsCZRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsCZRentItem from json.
func (s *MovieWatchProvidersOKResultsCZRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsCZRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsCZRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsCZRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsCZRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsDE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsDE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsDE = [4]string{
	0: "link",
	1: "flatrate",
	2: "buy",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsDE from json.
func (s *MovieWatchProvidersOKResultsDE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsDE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsDEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsDEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsDEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsDEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsDERentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsDERentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsDE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsDE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsDE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsDEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsDEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsDEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsDEBuyItem from json.
func (s *MovieWatchProvidersOKResultsDEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsDEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsDEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsDEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsDEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsDEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsDEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsDEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsDEFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsDEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsDEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsDEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsDEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsDEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsDERentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsDERentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsDERentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsDERentItem from json.
func (s *MovieWatchProvidersOKResultsDERentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsDERentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsDERentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsDERentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsDERentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsDK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsDK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsDK = [4]string{
	0: "link",
	1: "rent",
	2: "flatrate",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsDK from json.
func (s *MovieWatchProvidersOKResultsDK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsDK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsDKRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsDKRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsDKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsDKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsDKBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsDKBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsDK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsDK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsDK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsDKBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsDKBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsDKBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsDKBuyItem from json.
func (s *MovieWatchProvidersOKResultsDKBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsDKBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsDKBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsDKBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsDKBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsDKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsDKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsDKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsDKFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsDKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsDKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsDKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsDKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsDKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsDKRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsDKRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsDKRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsDKRentItem from json.
func (s *MovieWatchProvidersOKResultsDKRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsDKRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsDKRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsDKRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsDKRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsDO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsDO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsDO = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsDO from json.
func (s *MovieWatchProvidersOKResultsDO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsDO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsDOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsDOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsDO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsDO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsDO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsDOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsDOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsDOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsDOFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsDOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsDOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsDOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsDOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsDOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsEC) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsEC) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsEC = [4]string{
	0: "link",
	1: "buy",
	2: "flatrate",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsEC from json.
func (s *MovieWatchProvidersOKResultsEC) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsEC to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsECBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsECBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsECFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsECFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsECRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsECRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsEC")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsEC) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsEC) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsECBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsECBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsECBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsECBuyItem from json.
func (s *MovieWatchProvidersOKResultsECBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsECBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsECBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsECBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsECBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsECFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsECFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsECFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsECFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsECFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsECFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsECFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsECFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsECFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsECRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsECRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsECRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsECRentItem from json.
func (s *MovieWatchProvidersOKResultsECRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsECRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsECRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsECRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsECRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsEE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsEE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsEE = [4]string{
	0: "link",
	1: "buy",
	2: "flatrate",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsEE from json.
func (s *MovieWatchProvidersOKResultsEE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsEE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsEEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsEEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsEEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsEEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsEERentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsEERentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsEE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsEE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsEE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsEEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsEEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsEEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsEEBuyItem from json.
func (s *MovieWatchProvidersOKResultsEEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsEEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsEEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsEEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsEEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsEEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsEEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsEEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsEEFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsEEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsEEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsEEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsEEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsEEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsEERentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsEERentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsEERentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsEERentItem from json.
func (s *MovieWatchProvidersOKResultsEERentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsEERentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsEERentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsEERentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsEERentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsEG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsEG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsEG = [3]string{
	0: "link",
	1: "rent",
	2: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsEG from json.
func (s *MovieWatchProvidersOKResultsEG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsEG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsEGRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsEGRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsEGBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsEGBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsEG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsEG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsEG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsEGBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsEGBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsEGBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsEGBuyItem from json.
func (s *MovieWatchProvidersOKResultsEGBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsEGBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsEGBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsEGBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsEGBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsEGRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsEGRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsEGRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsEGRentItem from json.
func (s *MovieWatchProvidersOKResultsEGRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsEGRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsEGRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsEGRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsEGRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsES) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsES) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Ads != nil {
			e.FieldStart("ads")
			e.ArrStart()
			for _, elem := range s.Ads {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsES = [5]string{
	0: "link",
	1: "rent",
	2: "ads",
	3: "flatrate",
	4: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsES from json.
func (s *MovieWatchProvidersOKResultsES) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsES to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsESRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsESRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "ads":
			if err := func() error {
				s.Ads = make([]MovieWatchProvidersOKResultsESAdsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsESAdsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Ads = append(s.Ads, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ads\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsESFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsESFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsESBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsESBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsES")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsES) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsES) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsESAdsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsESAdsItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsESAdsItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsESAdsItem from json.
func (s *MovieWatchProvidersOKResultsESAdsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsESAdsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsESAdsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsESAdsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsESAdsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsESBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsESBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsESBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsESBuyItem from json.
func (s *MovieWatchProvidersOKResultsESBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsESBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsESBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsESBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsESBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsESFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsESFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsESFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsESFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsESFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsESFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsESFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsESFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsESFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsESRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsESRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsESRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsESRentItem from json.
func (s *MovieWatchProvidersOKResultsESRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsESRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsESRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsESRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsESRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsFI) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsFI) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsFI = [4]string{
	0: "link",
	1: "flatrate",
	2: "buy",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsFI from json.
func (s *MovieWatchProvidersOKResultsFI) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsFI to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsFIFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsFIFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsFIBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsFIBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsFIRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsFIRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsFI")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsFI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsFI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsFIBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsFIBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsFIBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsFIBuyItem from json.
func (s *MovieWatchProvidersOKResultsFIBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsFIBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsFIBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsFIBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsFIBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsFIFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsFIFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsFIFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsFIFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsFIFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsFIFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsFIFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsFIFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsFIFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsFIRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsFIRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsFIRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsFIRentItem from json.
func (s *MovieWatchProvidersOKResultsFIRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsFIRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsFIRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsFIRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsFIRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsFJ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsFJ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsFJ = [2]string{
	0: "link",
	1: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsFJ from json.
func (s *MovieWatchProvidersOKResultsFJ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsFJ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsFJBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsFJBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsFJ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsFJ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsFJ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsFJBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsFJBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsFJBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsFJBuyItem from json.
func (s *MovieWatchProvidersOKResultsFJBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsFJBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsFJBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsFJBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsFJBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsFR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsFR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsFR = [4]string{
	0: "link",
	1: "rent",
	2: "buy",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsFR from json.
func (s *MovieWatchProvidersOKResultsFR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsFR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsFRRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsFRRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsFRBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsFRBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsFRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsFRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsFR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsFR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsFR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsFRBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsFRBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsFRBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsFRBuyItem from json.
func (s *MovieWatchProvidersOKResultsFRBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsFRBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsFRBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsFRBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsFRBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsFRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsFRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsFRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsFRFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsFRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsFRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsFRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsFRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsFRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsFRRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsFRRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsFRRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsFRRentItem from json.
func (s *MovieWatchProvidersOKResultsFRRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsFRRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsFRRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsFRRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsFRRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGB) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGB) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGB = [4]string{
	0: "link",
	1: "flatrate",
	2: "buy",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsGB from json.
func (s *MovieWatchProvidersOKResultsGB) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGB to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsGBFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsGBFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsGBBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsGBBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsGBRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsGBRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGB")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGBBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGBBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGBBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsGBBuyItem from json.
func (s *MovieWatchProvidersOKResultsGBBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGBBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGBBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGBBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGBBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGBFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGBFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGBFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsGBFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsGBFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGBFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGBFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGBFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGBFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGBRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGBRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGBRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsGBRentItem from json.
func (s *MovieWatchProvidersOKResultsGBRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGBRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGBRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGBRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGBRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGF) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGF) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGF = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsGF from json.
func (s *MovieWatchProvidersOKResultsGF) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGF to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsGFFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsGFFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGF")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGF) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGF) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGFFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGFFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGFFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsGFFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsGFFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGFFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGFFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGFFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGFFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGI) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGI) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGI = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsGI from json.
func (s *MovieWatchProvidersOKResultsGI) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGI to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsGIFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsGIFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGI")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGIFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGIFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGIFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsGIFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsGIFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGIFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGIFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGIFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGIFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGR = [4]string{
	0: "link",
	1: "flatrate",
	2: "rent",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsGR from json.
func (s *MovieWatchProvidersOKResultsGR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsGRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsGRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsGRRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsGRRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsGRBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsGRBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGRBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGRBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGRBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsGRBuyItem from json.
func (s *MovieWatchProvidersOKResultsGRBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGRBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGRBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGRBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGRBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsGRFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsGRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGRRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGRRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGRRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsGRRentItem from json.
func (s *MovieWatchProvidersOKResultsGRRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGRRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGRRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGRRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGRRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGT = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsGT from json.
func (s *MovieWatchProvidersOKResultsGT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsGTFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsGTFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsGTFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsGTFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsGTFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsGTFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsGTFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsGTFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsGTFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsGTFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsGTFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsHK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsHK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsHK = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsHK from json.
func (s *MovieWatchProvidersOKResultsHK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsHK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsHKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsHKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsHK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsHK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsHK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsHKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsHKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsHKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsHKFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsHKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsHKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsHKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsHKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsHKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsHN) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsHN) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsHN = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsHN from json.
func (s *MovieWatchProvidersOKResultsHN) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsHN to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsHNFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsHNFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsHN")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsHN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsHN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsHNFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsHNFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsHNFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsHNFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsHNFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsHNFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsHNFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsHNFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsHNFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsHR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsHR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Ads != nil {
			e.FieldStart("ads")
			e.ArrStart()
			for _, elem := range s.Ads {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsHR = [4]string{
	0: "link",
	1: "buy",
	2: "ads",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsHR from json.
func (s *MovieWatchProvidersOKResultsHR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsHR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsHRBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsHRBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "ads":
			if err := func() error {
				s.Ads = make([]MovieWatchProvidersOKResultsHRAdsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsHRAdsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Ads = append(s.Ads, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ads\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsHRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsHRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsHR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsHR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsHR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsHRAdsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsHRAdsItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsHRAdsItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsHRAdsItem from json.
func (s *MovieWatchProvidersOKResultsHRAdsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsHRAdsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsHRAdsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsHRAdsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsHRAdsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsHRBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsHRBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsHRBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsHRBuyItem from json.
func (s *MovieWatchProvidersOKResultsHRBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsHRBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsHRBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsHRBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsHRBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsHRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsHRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsHRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsHRFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsHRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsHRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsHRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsHRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsHRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsHU) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsHU) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsHU = [4]string{
	0: "link",
	1: "flatrate",
	2: "buy",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsHU from json.
func (s *MovieWatchProvidersOKResultsHU) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsHU to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsHUFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsHUFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsHUBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsHUBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsHURentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsHURentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsHU")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsHU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsHU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsHUBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsHUBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsHUBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsHUBuyItem from json.
func (s *MovieWatchProvidersOKResultsHUBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsHUBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsHUBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsHUBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsHUBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsHUFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsHUFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsHUFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsHUFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsHUFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsHUFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsHUFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsHUFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsHUFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsHURentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsHURentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsHURentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsHURentItem from json.
func (s *MovieWatchProvidersOKResultsHURentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsHURentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsHURentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsHURentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsHURentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsID) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsID = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsID from json.
func (s *MovieWatchProvidersOKResultsID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsIDFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsIDFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsIDFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsIDFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsIDFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsIDFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsIDFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsIDFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsIDFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsIDFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsIDFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsIE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsIE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsIE = [4]string{
	0: "link",
	1: "rent",
	2: "flatrate",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsIE from json.
func (s *MovieWatchProvidersOKResultsIE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsIE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsIERentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsIERentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsIEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsIEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsIEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsIEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsIE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsIE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsIE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsIEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsIEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsIEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsIEBuyItem from json.
func (s *MovieWatchProvidersOKResultsIEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsIEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsIEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsIEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsIEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsIEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsIEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsIEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsIEFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsIEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsIEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsIEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsIEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsIEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsIERentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsIERentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsIERentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsIERentItem from json.
func (s *MovieWatchProvidersOKResultsIERentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsIERentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsIERentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsIERentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsIERentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsIL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsIL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsIL = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsIL from json.
func (s *MovieWatchProvidersOKResultsIL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsIL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsILBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsILBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsILFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsILFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsIL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsIL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsIL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsILBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsILBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsILBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsILBuyItem from json.
func (s *MovieWatchProvidersOKResultsILBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsILBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsILBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsILBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsILBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsILFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsILFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsILFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsILFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsILFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsILFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsILFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsILFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsILFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsIN) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsIN) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsIN = [4]string{
	0: "link",
	1: "flatrate",
	2: "rent",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsIN from json.
func (s *MovieWatchProvidersOKResultsIN) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsIN to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsINFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsINFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsINRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsINRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsINBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsINBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsIN")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsIN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsIN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsINBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsINBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsINBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsINBuyItem from json.
func (s *MovieWatchProvidersOKResultsINBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsINBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsINBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsINBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsINBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsINFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsINFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsINFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsINFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsINFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsINFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsINFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsINFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsINFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsINRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsINRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsINRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsINRentItem from json.
func (s *MovieWatchProvidersOKResultsINRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsINRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsINRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsINRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsINRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsIQ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsIQ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsIQ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsIQ from json.
func (s *MovieWatchProvidersOKResultsIQ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsIQ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsIQFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsIQFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsIQ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsIQ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsIQ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsIQFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsIQFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsIQFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsIQFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsIQFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsIQFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsIQFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsIQFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsIQFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsIS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsIS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsIS = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsIS from json.
func (s *MovieWatchProvidersOKResultsIS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsIS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsISBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsISBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsISFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsISFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsIS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsIS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsIS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsISBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsISBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsISBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsISBuyItem from json.
func (s *MovieWatchProvidersOKResultsISBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsISBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsISBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsISBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsISBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsISFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsISFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsISFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsISFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsISFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsISFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsISFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsISFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsISFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsIT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsIT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsIT = [4]string{
	0: "link",
	1: "buy",
	2: "rent",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsIT from json.
func (s *MovieWatchProvidersOKResultsIT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsIT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsITBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsITBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsITRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsITRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsITFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsITFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsIT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsIT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsIT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsITBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsITBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsITBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsITBuyItem from json.
func (s *MovieWatchProvidersOKResultsITBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsITBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsITBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsITBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsITBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsITFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsITFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsITFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsITFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsITFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsITFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsITFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsITFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsITFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsITRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsITRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsITRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsITRentItem from json.
func (s *MovieWatchProvidersOKResultsITRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsITRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsITRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsITRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsITRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsJM) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsJM) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsJM = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsJM from json.
func (s *MovieWatchProvidersOKResultsJM) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsJM to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsJMFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsJMFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsJM")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsJM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsJM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsJMFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsJMFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsJMFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsJMFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsJMFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsJMFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsJMFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsJMFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsJMFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsJO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsJO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsJO = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsJO from json.
func (s *MovieWatchProvidersOKResultsJO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsJO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsJOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsJOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsJOBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsJOBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsJO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsJO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsJO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsJOBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsJOBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsJOBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsJOBuyItem from json.
func (s *MovieWatchProvidersOKResultsJOBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsJOBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsJOBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsJOBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsJOBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsJOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsJOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsJOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsJOFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsJOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsJOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsJOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsJOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsJOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsJP) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsJP) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsJP = [4]string{
	0: "link",
	1: "flatrate",
	2: "rent",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsJP from json.
func (s *MovieWatchProvidersOKResultsJP) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsJP to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsJPFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsJPFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsJPRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsJPRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsJPBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsJPBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsJP")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsJP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsJP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsJPBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsJPBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsJPBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsJPBuyItem from json.
func (s *MovieWatchProvidersOKResultsJPBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsJPBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsJPBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsJPBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsJPBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsJPFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsJPFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsJPFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsJPFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsJPFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsJPFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsJPFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsJPFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsJPFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsJPRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsJPRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsJPRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsJPRentItem from json.
func (s *MovieWatchProvidersOKResultsJPRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsJPRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsJPRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsJPRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsJPRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsKR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsKR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsKR = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsKR from json.
func (s *MovieWatchProvidersOKResultsKR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsKR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsKRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsKRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsKRBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsKRBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsKR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsKR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsKR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsKRBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsKRBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsKRBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsKRBuyItem from json.
func (s *MovieWatchProvidersOKResultsKRBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsKRBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsKRBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsKRBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsKRBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsKRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsKRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsKRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsKRFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsKRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsKRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsKRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsKRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsKRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsKW) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsKW) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsKW = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsKW from json.
func (s *MovieWatchProvidersOKResultsKW) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsKW to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsKWBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsKWBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsKWFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsKWFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsKW")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsKW) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsKW) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsKWBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsKWBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsKWBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsKWBuyItem from json.
func (s *MovieWatchProvidersOKResultsKWBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsKWBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsKWBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsKWBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsKWBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsKWFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsKWFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsKWFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsKWFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsKWFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsKWFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsKWFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsKWFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsKWFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsLB) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsLB) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsLB = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsLB from json.
func (s *MovieWatchProvidersOKResultsLB) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsLB to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsLBFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsLBFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsLBBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsLBBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsLB")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsLB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsLB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsLBBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsLBBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsLBBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsLBBuyItem from json.
func (s *MovieWatchProvidersOKResultsLBBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsLBBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsLBBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsLBBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsLBBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsLBFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsLBFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsLBFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsLBFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsLBFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsLBFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsLBFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsLBFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsLBFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsLI) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsLI) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsLI = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsLI from json.
func (s *MovieWatchProvidersOKResultsLI) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsLI to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsLIFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsLIFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsLI")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsLI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsLI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsLIFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsLIFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsLIFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsLIFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsLIFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsLIFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsLIFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsLIFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsLIFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsLT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsLT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsLT = [4]string{
	0: "link",
	1: "rent",
	2: "buy",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsLT from json.
func (s *MovieWatchProvidersOKResultsLT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsLT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsLTRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsLTRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsLTBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsLTBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsLTFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsLTFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsLT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsLT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsLT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsLTBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsLTBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsLTBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsLTBuyItem from json.
func (s *MovieWatchProvidersOKResultsLTBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsLTBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsLTBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsLTBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsLTBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsLTFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsLTFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsLTFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsLTFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsLTFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsLTFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsLTFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsLTFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsLTFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsLTRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsLTRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsLTRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsLTRentItem from json.
func (s *MovieWatchProvidersOKResultsLTRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsLTRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsLTRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsLTRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsLTRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsLV) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsLV) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsLV = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsLV from json.
func (s *MovieWatchProvidersOKResultsLV) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsLV to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsLVFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsLVFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsLVBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsLVBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsLV")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsLV) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsLV) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsLVBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsLVBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsLVBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsLVBuyItem from json.
func (s *MovieWatchProvidersOKResultsLVBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsLVBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsLVBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsLVBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsLVBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsLVFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsLVFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsLVFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsLVFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsLVFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsLVFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsLVFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsLVFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsLVFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMD) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMD) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMD = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsMD from json.
func (s *MovieWatchProvidersOKResultsMD) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMD to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsMDBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMDBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsMDFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMDFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMD")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMD) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMD) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMDBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMDBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMDBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMDBuyItem from json.
func (s *MovieWatchProvidersOKResultsMDBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMDBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMDBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMDBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMDBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMDFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMDFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMDFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMDFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsMDFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMDFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMDFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMDFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMDFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMK = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsMK from json.
func (s *MovieWatchProvidersOKResultsMK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsMKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsMKBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMKBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMKBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMKBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMKBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMKBuyItem from json.
func (s *MovieWatchProvidersOKResultsMKBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMKBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMKBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMKBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMKBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMKFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsMKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMT = [4]string{
	0: "link",
	1: "flatrate",
	2: "buy",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsMT from json.
func (s *MovieWatchProvidersOKResultsMT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsMTFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMTFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsMTBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMTBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsMTRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMTRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMTBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMTBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMTBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMTBuyItem from json.
func (s *MovieWatchProvidersOKResultsMTBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMTBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMTBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMTBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMTBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMTFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMTFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMTFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMTFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsMTFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMTFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMTFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMTFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMTFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMTRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMTRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMTRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMTRentItem from json.
func (s *MovieWatchProvidersOKResultsMTRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMTRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMTRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMTRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMTRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMU) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMU) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMU = [3]string{
	0: "link",
	1: "buy",
	2: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsMU from json.
func (s *MovieWatchProvidersOKResultsMU) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMU to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsMUBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMUBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsMURentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMURentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMU")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMUBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMUBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMUBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMUBuyItem from json.
func (s *MovieWatchProvidersOKResultsMUBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMUBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMUBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMUBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMUBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMURentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMURentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMURentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMURentItem from json.
func (s *MovieWatchProvidersOKResultsMURentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMURentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMURentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMURentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMURentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMX) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMX) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMX = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsMX from json.
func (s *MovieWatchProvidersOKResultsMX) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMX to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsMXFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMXFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMX")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMX) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMX) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMXFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMXFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMXFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMXFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsMXFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMXFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMXFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMXFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMXFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMY) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMY) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMY = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsMY from json.
func (s *MovieWatchProvidersOKResultsMY) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMY to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsMYFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMYFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMY")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMYFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMYFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMYFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMYFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsMYFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMYFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMYFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMYFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMYFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMZ = [3]string{
	0: "link",
	1: "rent",
	2: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsMZ from json.
func (s *MovieWatchProvidersOKResultsMZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsMZRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMZRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsMZBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsMZBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMZBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMZBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMZBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMZBuyItem from json.
func (s *MovieWatchProvidersOKResultsMZBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMZBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMZBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMZBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMZBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsMZRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsMZRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsMZRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsMZRentItem from json.
func (s *MovieWatchProvidersOKResultsMZRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsMZRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsMZRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsMZRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsMZRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsNL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsNL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsNL = [4]string{
	0: "link",
	1: "buy",
	2: "rent",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsNL from json.
func (s *MovieWatchProvidersOKResultsNL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsNL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsNLBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsNLBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsNLRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsNLRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsNLFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsNLFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsNL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsNL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsNL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsNLBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsNLBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsNLBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsNLBuyItem from json.
func (s *MovieWatchProvidersOKResultsNLBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsNLBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsNLBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsNLBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsNLBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsNLFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsNLFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsNLFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsNLFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsNLFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsNLFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsNLFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsNLFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsNLFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsNLRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsNLRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsNLRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsNLRentItem from json.
func (s *MovieWatchProvidersOKResultsNLRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsNLRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsNLRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsNLRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsNLRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsNO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsNO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsNO = [4]string{
	0: "link",
	1: "rent",
	2: "buy",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsNO from json.
func (s *MovieWatchProvidersOKResultsNO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsNO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsNORentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsNORentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsNOBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsNOBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsNOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsNOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsNO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsNO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsNO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsNOBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsNOBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsNOBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsNOBuyItem from json.
func (s *MovieWatchProvidersOKResultsNOBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsNOBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsNOBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsNOBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsNOBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsNOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsNOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsNOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsNOFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsNOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsNOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsNOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsNOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsNOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsNORentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsNORentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsNORentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsNORentItem from json.
func (s *MovieWatchProvidersOKResultsNORentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsNORentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsNORentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsNORentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsNORentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsNZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsNZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsNZ = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsNZ from json.
func (s *MovieWatchProvidersOKResultsNZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsNZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsNZFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsNZFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsNZBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsNZBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsNZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsNZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsNZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsNZBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsNZBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsNZBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsNZBuyItem from json.
func (s *MovieWatchProvidersOKResultsNZBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsNZBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsNZBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsNZBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsNZBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsNZFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsNZFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsNZFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsNZFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsNZFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsNZFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsNZFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsNZFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsNZFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsOM) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsOM) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsOM = [4]string{
	0: "link",
	1: "buy",
	2: "rent",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsOM from json.
func (s *MovieWatchProvidersOKResultsOM) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsOM to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsOMBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsOMBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsOMRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsOMRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsOMFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsOMFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsOM")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsOM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsOM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsOMBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsOMBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsOMBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsOMBuyItem from json.
func (s *MovieWatchProvidersOKResultsOMBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsOMBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsOMBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsOMBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsOMBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsOMFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsOMFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsOMFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsOMFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsOMFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsOMFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsOMFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsOMFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsOMFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsOMRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsOMRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsOMRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsOMRentItem from json.
func (s *MovieWatchProvidersOKResultsOMRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsOMRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsOMRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsOMRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsOMRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPA = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsPA from json.
func (s *MovieWatchProvidersOKResultsPA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsPAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPAFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsPAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPE = [4]string{
	0: "link",
	1: "rent",
	2: "buy",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsPE from json.
func (s *MovieWatchProvidersOKResultsPE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsPERentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPERentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsPEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsPEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPEBuyItem from json.
func (s *MovieWatchProvidersOKResultsPEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPEFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsPEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPERentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPERentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPERentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPERentItem from json.
func (s *MovieWatchProvidersOKResultsPERentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPERentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPERentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPERentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPERentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPH) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPH) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPH = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsPH from json.
func (s *MovieWatchProvidersOKResultsPH) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPH to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsPHFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPHFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPH")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPHFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPHFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPHFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPHFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsPHFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPHFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPHFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPHFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPHFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPK = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsPK from json.
func (s *MovieWatchProvidersOKResultsPK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsPKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPKFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsPKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPL = [4]string{
	0: "link",
	1: "buy",
	2: "flatrate",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsPL from json.
func (s *MovieWatchProvidersOKResultsPL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsPLBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPLBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsPLFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPLFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsPLRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPLRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPLBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPLBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPLBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPLBuyItem from json.
func (s *MovieWatchProvidersOKResultsPLBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPLBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPLBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPLBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPLBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPLFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPLFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPLFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPLFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsPLFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPLFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPLFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPLFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPLFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPLRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPLRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPLRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPLRentItem from json.
func (s *MovieWatchProvidersOKResultsPLRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPLRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPLRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPLRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPLRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPS = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsPS from json.
func (s *MovieWatchProvidersOKResultsPS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsPSFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPSFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPSFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPSFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPSFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPSFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsPSFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPSFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPSFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPSFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPSFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPT = [4]string{
	0: "link",
	1: "buy",
	2: "rent",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsPT from json.
func (s *MovieWatchProvidersOKResultsPT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsPTBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPTBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsPTRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPTRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsPTFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPTFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPTBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPTBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPTBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPTBuyItem from json.
func (s *MovieWatchProvidersOKResultsPTBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPTBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPTBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPTBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPTBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPTFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPTFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPTFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPTFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsPTFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPTFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPTFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPTFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPTFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPTRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPTRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPTRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPTRentItem from json.
func (s *MovieWatchProvidersOKResultsPTRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPTRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPTRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPTRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPTRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPY) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPY) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPY = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsPY from json.
func (s *MovieWatchProvidersOKResultsPY) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPY to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsPYFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsPYFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPY")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsPYFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsPYFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsPYFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsPYFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsPYFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsPYFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsPYFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsPYFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsPYFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsQA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsQA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsQA = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsQA from json.
func (s *MovieWatchProvidersOKResultsQA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsQA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsQAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsQAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsQABuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsQABuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsQA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsQA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsQA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsQABuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsQABuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsQABuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsQABuyItem from json.
func (s *MovieWatchProvidersOKResultsQABuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsQABuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsQABuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsQABuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsQABuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsQAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsQAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsQAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsQAFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsQAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsQAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsQAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsQAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsQAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsRO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsRO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsRO = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsRO from json.
func (s *MovieWatchProvidersOKResultsRO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsRO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsROFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsROFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsRO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsRO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsRO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsROFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsROFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsROFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsROFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsROFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsROFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsROFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsROFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsROFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsRS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsRS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsRS = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsRS from json.
func (s *MovieWatchProvidersOKResultsRS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsRS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsRSFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsRSFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsRSBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsRSBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsRS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsRS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsRS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsRSBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsRSBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsRSBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsRSBuyItem from json.
func (s *MovieWatchProvidersOKResultsRSBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsRSBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsRSBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsRSBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsRSBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsRSFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsRSFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsRSFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsRSFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsRSFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsRSFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsRSFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsRSFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsRSFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsRU) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsRU) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsRU = [4]string{
	0: "link",
	1: "rent",
	2: "buy",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsRU from json.
func (s *MovieWatchProvidersOKResultsRU) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsRU to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsRURentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsRURentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsRUBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsRUBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsRUFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsRUFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsRU")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsRU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsRU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsRUBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsRUBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsRUBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsRUBuyItem from json.
func (s *MovieWatchProvidersOKResultsRUBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsRUBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsRUBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsRUBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsRUBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsRUFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsRUFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsRUFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsRUFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsRUFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsRUFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsRUFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsRUFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsRUFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsRURentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsRURentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsRURentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsRURentItem from json.
func (s *MovieWatchProvidersOKResultsRURentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsRURentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsRURentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsRURentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsRURentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSA = [4]string{
	0: "link",
	1: "flatrate",
	2: "rent",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsSA from json.
func (s *MovieWatchProvidersOKResultsSA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsSAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsSARentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSARentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsSABuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSABuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSABuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSABuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSABuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSABuyItem from json.
func (s *MovieWatchProvidersOKResultsSABuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSABuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSABuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSABuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSABuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSAFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsSAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSARentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSARentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSARentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSARentItem from json.
func (s *MovieWatchProvidersOKResultsSARentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSARentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSARentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSARentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSARentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSE = [4]string{
	0: "link",
	1: "buy",
	2: "rent",
	3: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsSE from json.
func (s *MovieWatchProvidersOKResultsSE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsSEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsSERentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSERentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsSEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSEBuyItem from json.
func (s *MovieWatchProvidersOKResultsSEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSEFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsSEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSERentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSERentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSERentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSERentItem from json.
func (s *MovieWatchProvidersOKResultsSERentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSERentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSERentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSERentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSERentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSG = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsSG from json.
func (s *MovieWatchProvidersOKResultsSG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsSGFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSGFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSGFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSGFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSGFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSGFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsSGFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSGFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSGFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSGFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSGFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSI) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSI) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSI = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsSI from json.
func (s *MovieWatchProvidersOKResultsSI) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSI to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsSIBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSIBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsSIFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSIFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSI")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSIBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSIBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSIBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSIBuyItem from json.
func (s *MovieWatchProvidersOKResultsSIBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSIBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSIBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSIBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSIBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSIFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSIFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSIFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSIFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsSIFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSIFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSIFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSIFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSIFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSK = [4]string{
	0: "link",
	1: "buy",
	2: "flatrate",
	3: "rent",
}

// Decode decodes MovieWatchProvidersOKResultsSK from json.
func (s *MovieWatchProvidersOKResultsSK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsSKBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSKBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsSKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsSKRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSKRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSKBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSKBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSKBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSKBuyItem from json.
func (s *MovieWatchProvidersOKResultsSKBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSKBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSKBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSKBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSKBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSKFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsSKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSKRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSKRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSKRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSKRentItem from json.
func (s *MovieWatchProvidersOKResultsSKRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSKRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSKRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSKRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSKRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSM) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSM) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSM = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsSM from json.
func (s *MovieWatchProvidersOKResultsSM) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSM to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsSMFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSMFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSM")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSMFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSMFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSMFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSMFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsSMFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSMFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSMFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSMFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSMFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSV) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSV) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSV = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsSV from json.
func (s *MovieWatchProvidersOKResultsSV) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSV to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsSVFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsSVFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSV")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSV) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSV) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsSVFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsSVFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsSVFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsSVFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsSVFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsSVFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsSVFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsSVFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsSVFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsTH) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsTH) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsTH = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsTH from json.
func (s *MovieWatchProvidersOKResultsTH) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsTH to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsTHFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsTHFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsTH")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsTH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsTH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsTHFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsTHFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsTHFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsTHFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsTHFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsTHFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsTHFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsTHFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsTHFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsTR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsTR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsTR = [4]string{
	0: "link",
	1: "rent",
	2: "flatrate",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsTR from json.
func (s *MovieWatchProvidersOKResultsTR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsTR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsTRRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsTRRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsTRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsTRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsTRBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsTRBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsTR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsTR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsTR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsTRBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsTRBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsTRBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsTRBuyItem from json.
func (s *MovieWatchProvidersOKResultsTRBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsTRBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsTRBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsTRBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsTRBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsTRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsTRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsTRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsTRFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsTRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsTRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsTRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsTRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsTRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsTRRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsTRRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsTRRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsTRRentItem from json.
func (s *MovieWatchProvidersOKResultsTRRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsTRRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsTRRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsTRRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsTRRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsTT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsTT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsTT = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsTT from json.
func (s *MovieWatchProvidersOKResultsTT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsTT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsTTFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsTTFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsTT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsTT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsTT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsTTFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsTTFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsTTFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsTTFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsTTFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsTTFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsTTFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsTTFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsTTFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsTW) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsTW) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsTW = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsTW from json.
func (s *MovieWatchProvidersOKResultsTW) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsTW to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsTWFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsTWFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsTW")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsTW) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsTW) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsTWFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsTWFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsTWFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsTWFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsTWFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsTWFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsTWFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsTWFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsTWFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsUG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsUG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsUG = [3]string{
	0: "link",
	1: "rent",
	2: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsUG from json.
func (s *MovieWatchProvidersOKResultsUG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsUG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsUGRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsUGRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsUGBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsUGBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsUG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsUG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsUG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsUGBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsUGBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsUGBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsUGBuyItem from json.
func (s *MovieWatchProvidersOKResultsUGBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsUGBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsUGBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsUGBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsUGBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsUGRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsUGRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsUGRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsUGRentItem from json.
func (s *MovieWatchProvidersOKResultsUGRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsUGRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsUGRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsUGRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsUGRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsUS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsUS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsUS = [4]string{
	0: "link",
	1: "rent",
	2: "flatrate",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsUS from json.
func (s *MovieWatchProvidersOKResultsUS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsUS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsUSRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsUSRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsUSFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsUSFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsUSBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsUSBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsUS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsUS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsUS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsUSBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsUSBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsUSBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsUSBuyItem from json.
func (s *MovieWatchProvidersOKResultsUSBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsUSBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsUSBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsUSBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsUSBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsUSFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsUSFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsUSFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsUSFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsUSFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsUSFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsUSFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsUSFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsUSFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsUSRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsUSRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsUSRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsUSRentItem from json.
func (s *MovieWatchProvidersOKResultsUSRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsUSRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsUSRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsUSRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsUSRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsUY) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsUY) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsUY = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsUY from json.
func (s *MovieWatchProvidersOKResultsUY) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsUY to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsUYFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsUYFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsUY")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsUY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsUY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsUYFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsUYFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsUYFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsUYFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsUYFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsUYFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsUYFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsUYFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsUYFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsVE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsVE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsVE = [4]string{
	0: "link",
	1: "rent",
	2: "flatrate",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsVE from json.
func (s *MovieWatchProvidersOKResultsVE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsVE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsVERentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsVERentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsVEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsVEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsVEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsVEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsVE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsVE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsVE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsVEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsVEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsVEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsVEBuyItem from json.
func (s *MovieWatchProvidersOKResultsVEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsVEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsVEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsVEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsVEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsVEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsVEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsVEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsVEFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsVEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsVEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsVEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsVEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsVEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsVERentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsVERentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsVERentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsVERentItem from json.
func (s *MovieWatchProvidersOKResultsVERentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsVERentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsVERentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsVERentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsVERentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsYE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsYE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsYE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes MovieWatchProvidersOKResultsYE from json.
func (s *MovieWatchProvidersOKResultsYE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsYE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsYEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsYEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsYE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsYE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsYE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsYEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsYEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsYEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsYEFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsYEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsYEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsYEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsYEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsYEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsZA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsZA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsZA = [4]string{
	0: "link",
	1: "flatrate",
	2: "rent",
	3: "buy",
}

// Decode decodes MovieWatchProvidersOKResultsZA from json.
func (s *MovieWatchProvidersOKResultsZA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsZA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]MovieWatchProvidersOKResultsZAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsZAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]MovieWatchProvidersOKResultsZARentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsZARentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]MovieWatchProvidersOKResultsZABuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem MovieWatchProvidersOKResultsZABuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsZA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsZA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsZA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsZABuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsZABuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsZABuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsZABuyItem from json.
func (s *MovieWatchProvidersOKResultsZABuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsZABuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsZABuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsZABuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsZABuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsZAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsZAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsZAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsZAFlatrateItem from json.
func (s *MovieWatchProvidersOKResultsZAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsZAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsZAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsZAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsZAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *MovieWatchProvidersOKResultsZARentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *MovieWatchProvidersOKResultsZARentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfMovieWatchProvidersOKResultsZARentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes MovieWatchProvidersOKResultsZARentItem from json.
func (s *MovieWatchProvidersOKResultsZARentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MovieWatchProvidersOKResultsZARentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MovieWatchProvidersOKResultsZARentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *MovieWatchProvidersOKResultsZARentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MovieWatchProvidersOKResultsZARentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NetworkDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NetworkDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Headquarters.Set {
			e.FieldStart("headquarters")
			s.Headquarters.Encode(e)
		}
	}
	{
		if s.Homepage.Set {
			e.FieldStart("homepage")
			s.Homepage.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry.Set {
			e.FieldStart("origin_country")
			s.OriginCountry.Encode(e)
		}
	}
}

var jsonFieldsNameOfNetworkDetailsOK = [6]string{
	0: "headquarters",
	1: "homepage",
	2: "id",
	3: "logo_path",
	4: "name",
	5: "origin_country",
}

// Decode decodes NetworkDetailsOK from json.
func (s *NetworkDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NetworkDetailsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "headquarters":
			if err := func() error {
				s.Headquarters.Reset()
				if err := s.Headquarters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"headquarters\"")
			}
		case "homepage":
			if err := func() error {
				s.Homepage.Reset()
				if err := s.Homepage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"homepage\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry.Reset()
				if err := s.OriginCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NetworkDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NetworkDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NetworkDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountAddFavoriteReq as json.
func (o OptAccountAddFavoriteReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountAddFavoriteReq from json.
func (o *OptAccountAddFavoriteReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountAddFavoriteReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountAddFavoriteReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountAddFavoriteReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountAddToWatchlistReq as json.
func (o OptAccountAddToWatchlistReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountAddToWatchlistReq from json.
func (o *OptAccountAddToWatchlistReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountAddToWatchlistReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountAddToWatchlistReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountAddToWatchlistReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailsOKAvatar as json.
func (o OptAccountDetailsOKAvatar) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountDetailsOKAvatar from json.
func (o *OptAccountDetailsOKAvatar) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountDetailsOKAvatar to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountDetailsOKAvatar) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountDetailsOKAvatar) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailsOKAvatarGravatar as json.
func (o OptAccountDetailsOKAvatarGravatar) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountDetailsOKAvatarGravatar from json.
func (o *OptAccountDetailsOKAvatarGravatar) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountDetailsOKAvatarGravatar to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountDetailsOKAvatarGravatar) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountDetailsOKAvatarGravatar) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailsOKAvatarTmdb as json.
func (o OptAccountDetailsOKAvatarTmdb) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountDetailsOKAvatarTmdb from json.
func (o *OptAccountDetailsOKAvatarTmdb) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountDetailsOKAvatarTmdb to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountDetailsOKAvatarTmdb) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountDetailsOKAvatarTmdb) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthenticationCreateSessionFromLoginReq as json.
func (o OptAuthenticationCreateSessionFromLoginReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AuthenticationCreateSessionFromLoginReq from json.
func (o *OptAuthenticationCreateSessionFromLoginReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAuthenticationCreateSessionFromLoginReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAuthenticationCreateSessionFromLoginReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAuthenticationCreateSessionFromLoginReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthenticationCreateSessionFromV4TokenReq as json.
func (o OptAuthenticationCreateSessionFromV4TokenReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AuthenticationCreateSessionFromV4TokenReq from json.
func (o *OptAuthenticationCreateSessionFromV4TokenReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAuthenticationCreateSessionFromV4TokenReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAuthenticationCreateSessionFromV4TokenReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAuthenticationCreateSessionFromV4TokenReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthenticationCreateSessionReq as json.
func (o OptAuthenticationCreateSessionReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AuthenticationCreateSessionReq from json.
func (o *OptAuthenticationCreateSessionReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAuthenticationCreateSessionReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAuthenticationCreateSessionReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAuthenticationCreateSessionReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthenticationDeleteSessionReq as json.
func (o OptAuthenticationDeleteSessionReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AuthenticationDeleteSessionReq from json.
func (o *OptAuthenticationDeleteSessionReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAuthenticationDeleteSessionReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAuthenticationDeleteSessionReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAuthenticationDeleteSessionReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CertificationMovieListOKCertifications as json.
func (o OptCertificationMovieListOKCertifications) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CertificationMovieListOKCertifications from json.
func (o *OptCertificationMovieListOKCertifications) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCertificationMovieListOKCertifications to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCertificationMovieListOKCertifications) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCertificationMovieListOKCertifications) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CertificationsTvListOKCertifications as json.
func (o OptCertificationsTvListOKCertifications) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CertificationsTvListOKCertifications from json.
func (o *OptCertificationsTvListOKCertifications) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCertificationsTvListOKCertifications to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCertificationsTvListOKCertifications) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCertificationsTvListOKCertifications) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CollectionTranslationsOKTranslationsItemData as json.
func (o OptCollectionTranslationsOKTranslationsItemData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CollectionTranslationsOKTranslationsItemData from json.
func (o *OptCollectionTranslationsOKTranslationsItemData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCollectionTranslationsOKTranslationsItemData to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCollectionTranslationsOKTranslationsItemData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCollectionTranslationsOKTranslationsItemData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ConfigurationDetailsOKImages as json.
func (o OptConfigurationDetailsOKImages) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ConfigurationDetailsOKImages from json.
func (o *OptConfigurationDetailsOKImages) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptConfigurationDetailsOKImages to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptConfigurationDetailsOKImages) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptConfigurationDetailsOKImages) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreditDetailsOKMedia as json.
func (o OptCreditDetailsOKMedia) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreditDetailsOKMedia from json.
func (o *OptCreditDetailsOKMedia) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreditDetailsOKMedia to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreditDetailsOKMedia) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreditDetailsOKMedia) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreditDetailsOKPerson as json.
func (o OptCreditDetailsOKPerson) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CreditDetailsOKPerson from json.
func (o *OptCreditDetailsOKPerson) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreditDetailsOKPerson to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreditDetailsOKPerson) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreditDetailsOKPerson) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListAddMovieReq as json.
func (o OptListAddMovieReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListAddMovieReq from json.
func (o *OptListAddMovieReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListAddMovieReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListAddMovieReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListAddMovieReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListCreateReq as json.
func (o OptListCreateReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListCreateReq from json.
func (o *OptListCreateReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListCreateReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListCreateReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListCreateReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ListRemoveMovieReq as json.
func (o OptListRemoveMovieReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ListRemoveMovieReq from json.
func (o *OptListRemoveMovieReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListRemoveMovieReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListRemoveMovieReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListRemoveMovieReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieAccountStatesOKRated as json.
func (o OptMovieAccountStatesOKRated) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieAccountStatesOKRated from json.
func (o *OptMovieAccountStatesOKRated) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieAccountStatesOKRated to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieAccountStatesOKRated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieAccountStatesOKRated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieAddRatingReq as json.
func (o OptMovieAddRatingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieAddRatingReq from json.
func (o *OptMovieAddRatingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieAddRatingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieAddRatingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieAddRatingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieChangesOKChangesItemItemsItemValue as json.
func (o OptMovieChangesOKChangesItemItemsItemValue) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieChangesOKChangesItemItemsItemValue from json.
func (o *OptMovieChangesOKChangesItemItemsItemValue) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieChangesOKChangesItemItemsItemValue to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieChangesOKChangesItemItemsItemValue) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieChangesOKChangesItemItemsItemValue) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieChangesOKChangesItemItemsItemValuePoster as json.
func (o OptMovieChangesOKChangesItemItemsItemValuePoster) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieChangesOKChangesItemItemsItemValuePoster from json.
func (o *OptMovieChangesOKChangesItemItemsItemValuePoster) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieChangesOKChangesItemItemsItemValuePoster to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieChangesOKChangesItemItemsItemValuePoster) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieChangesOKChangesItemItemsItemValuePoster) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieNowPlayingListOKDates as json.
func (o OptMovieNowPlayingListOKDates) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieNowPlayingListOKDates from json.
func (o *OptMovieNowPlayingListOKDates) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieNowPlayingListOKDates to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieNowPlayingListOKDates) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieNowPlayingListOKDates) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieReviewsOKResultsItemAuthorDetails as json.
func (o OptMovieReviewsOKResultsItemAuthorDetails) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieReviewsOKResultsItemAuthorDetails from json.
func (o *OptMovieReviewsOKResultsItemAuthorDetails) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieReviewsOKResultsItemAuthorDetails to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieReviewsOKResultsItemAuthorDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieReviewsOKResultsItemAuthorDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieTranslationsOKTranslationsItemData as json.
func (o OptMovieTranslationsOKTranslationsItemData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieTranslationsOKTranslationsItemData from json.
func (o *OptMovieTranslationsOKTranslationsItemData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieTranslationsOKTranslationsItemData to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieTranslationsOKTranslationsItemData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieTranslationsOKTranslationsItemData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieUpcomingListOKDates as json.
func (o OptMovieUpcomingListOKDates) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieUpcomingListOKDates from json.
func (o *OptMovieUpcomingListOKDates) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieUpcomingListOKDates to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieUpcomingListOKDates) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieUpcomingListOKDates) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResults as json.
func (o OptMovieWatchProvidersOKResults) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResults from json.
func (o *OptMovieWatchProvidersOKResults) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResults to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResults) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResults) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsAE as json.
func (o OptMovieWatchProvidersOKResultsAE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsAE from json.
func (o *OptMovieWatchProvidersOKResultsAE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsAE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsAE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsAE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsAL as json.
func (o OptMovieWatchProvidersOKResultsAL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsAL from json.
func (o *OptMovieWatchProvidersOKResultsAL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsAL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsAL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsAL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsAR as json.
func (o OptMovieWatchProvidersOKResultsAR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsAR from json.
func (o *OptMovieWatchProvidersOKResultsAR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsAR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsAR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsAR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsAT as json.
func (o OptMovieWatchProvidersOKResultsAT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsAT from json.
func (o *OptMovieWatchProvidersOKResultsAT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsAT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsAT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsAT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsAU as json.
func (o OptMovieWatchProvidersOKResultsAU) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsAU from json.
func (o *OptMovieWatchProvidersOKResultsAU) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsAU to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsAU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsAU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsBA as json.
func (o OptMovieWatchProvidersOKResultsBA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsBA from json.
func (o *OptMovieWatchProvidersOKResultsBA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsBA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsBA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsBA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsBB as json.
func (o OptMovieWatchProvidersOKResultsBB) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsBB from json.
func (o *OptMovieWatchProvidersOKResultsBB) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsBB to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsBB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsBB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsBE as json.
func (o OptMovieWatchProvidersOKResultsBE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsBE from json.
func (o *OptMovieWatchProvidersOKResultsBE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsBE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsBE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsBE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsBG as json.
func (o OptMovieWatchProvidersOKResultsBG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsBG from json.
func (o *OptMovieWatchProvidersOKResultsBG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsBG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsBG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsBG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsBH as json.
func (o OptMovieWatchProvidersOKResultsBH) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsBH from json.
func (o *OptMovieWatchProvidersOKResultsBH) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsBH to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsBH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsBH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsBO as json.
func (o OptMovieWatchProvidersOKResultsBO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsBO from json.
func (o *OptMovieWatchProvidersOKResultsBO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsBO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsBO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsBO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsBR as json.
func (o OptMovieWatchProvidersOKResultsBR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsBR from json.
func (o *OptMovieWatchProvidersOKResultsBR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsBR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsBR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsBR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsBS as json.
func (o OptMovieWatchProvidersOKResultsBS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsBS from json.
func (o *OptMovieWatchProvidersOKResultsBS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsBS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsBS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsBS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsCA as json.
func (o OptMovieWatchProvidersOKResultsCA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsCA from json.
func (o *OptMovieWatchProvidersOKResultsCA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsCA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsCA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsCA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsCH as json.
func (o OptMovieWatchProvidersOKResultsCH) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsCH from json.
func (o *OptMovieWatchProvidersOKResultsCH) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsCH to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsCH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsCH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsCL as json.
func (o OptMovieWatchProvidersOKResultsCL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsCL from json.
func (o *OptMovieWatchProvidersOKResultsCL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsCL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsCL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsCL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsCO as json.
func (o OptMovieWatchProvidersOKResultsCO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsCO from json.
func (o *OptMovieWatchProvidersOKResultsCO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsCO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsCO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsCO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsCR as json.
func (o OptMovieWatchProvidersOKResultsCR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsCR from json.
func (o *OptMovieWatchProvidersOKResultsCR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsCR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsCR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsCR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsCV as json.
func (o OptMovieWatchProvidersOKResultsCV) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsCV from json.
func (o *OptMovieWatchProvidersOKResultsCV) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsCV to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsCV) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsCV) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsCZ as json.
func (o OptMovieWatchProvidersOKResultsCZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsCZ from json.
func (o *OptMovieWatchProvidersOKResultsCZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsCZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsCZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsCZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsDE as json.
func (o OptMovieWatchProvidersOKResultsDE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsDE from json.
func (o *OptMovieWatchProvidersOKResultsDE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsDE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsDE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsDE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsDK as json.
func (o OptMovieWatchProvidersOKResultsDK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsDK from json.
func (o *OptMovieWatchProvidersOKResultsDK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsDK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsDK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsDK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsDO as json.
func (o OptMovieWatchProvidersOKResultsDO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsDO from json.
func (o *OptMovieWatchProvidersOKResultsDO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsDO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsDO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsDO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsEC as json.
func (o OptMovieWatchProvidersOKResultsEC) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsEC from json.
func (o *OptMovieWatchProvidersOKResultsEC) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsEC to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsEC) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsEC) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsEE as json.
func (o OptMovieWatchProvidersOKResultsEE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsEE from json.
func (o *OptMovieWatchProvidersOKResultsEE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsEE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsEE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsEE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsEG as json.
func (o OptMovieWatchProvidersOKResultsEG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsEG from json.
func (o *OptMovieWatchProvidersOKResultsEG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsEG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsEG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsEG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsES as json.
func (o OptMovieWatchProvidersOKResultsES) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsES from json.
func (o *OptMovieWatchProvidersOKResultsES) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsES to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsES) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsES) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsFI as json.
func (o OptMovieWatchProvidersOKResultsFI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsFI from json.
func (o *OptMovieWatchProvidersOKResultsFI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsFI to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsFI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsFI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsFJ as json.
func (o OptMovieWatchProvidersOKResultsFJ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsFJ from json.
func (o *OptMovieWatchProvidersOKResultsFJ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsFJ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsFJ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsFJ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsFR as json.
func (o OptMovieWatchProvidersOKResultsFR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsFR from json.
func (o *OptMovieWatchProvidersOKResultsFR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsFR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsFR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsFR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsGB as json.
func (o OptMovieWatchProvidersOKResultsGB) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsGB from json.
func (o *OptMovieWatchProvidersOKResultsGB) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsGB to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsGB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsGB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsGF as json.
func (o OptMovieWatchProvidersOKResultsGF) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsGF from json.
func (o *OptMovieWatchProvidersOKResultsGF) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsGF to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsGF) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsGF) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsGI as json.
func (o OptMovieWatchProvidersOKResultsGI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsGI from json.
func (o *OptMovieWatchProvidersOKResultsGI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsGI to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsGI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsGI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsGR as json.
func (o OptMovieWatchProvidersOKResultsGR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsGR from json.
func (o *OptMovieWatchProvidersOKResultsGR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsGR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsGR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsGR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsGT as json.
func (o OptMovieWatchProvidersOKResultsGT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsGT from json.
func (o *OptMovieWatchProvidersOKResultsGT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsGT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsGT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsGT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsHK as json.
func (o OptMovieWatchProvidersOKResultsHK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsHK from json.
func (o *OptMovieWatchProvidersOKResultsHK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsHK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsHK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsHK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsHN as json.
func (o OptMovieWatchProvidersOKResultsHN) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsHN from json.
func (o *OptMovieWatchProvidersOKResultsHN) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsHN to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsHN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsHN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsHR as json.
func (o OptMovieWatchProvidersOKResultsHR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsHR from json.
func (o *OptMovieWatchProvidersOKResultsHR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsHR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsHR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsHR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsHU as json.
func (o OptMovieWatchProvidersOKResultsHU) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsHU from json.
func (o *OptMovieWatchProvidersOKResultsHU) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsHU to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsHU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsHU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsID as json.
func (o OptMovieWatchProvidersOKResultsID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsID from json.
func (o *OptMovieWatchProvidersOKResultsID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsIE as json.
func (o OptMovieWatchProvidersOKResultsIE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsIE from json.
func (o *OptMovieWatchProvidersOKResultsIE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsIE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsIE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsIE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsIL as json.
func (o OptMovieWatchProvidersOKResultsIL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsIL from json.
func (o *OptMovieWatchProvidersOKResultsIL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsIL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsIL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsIL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsIN as json.
func (o OptMovieWatchProvidersOKResultsIN) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsIN from json.
func (o *OptMovieWatchProvidersOKResultsIN) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsIN to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsIN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsIN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsIQ as json.
func (o OptMovieWatchProvidersOKResultsIQ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsIQ from json.
func (o *OptMovieWatchProvidersOKResultsIQ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsIQ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsIQ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsIQ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsIS as json.
func (o OptMovieWatchProvidersOKResultsIS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsIS from json.
func (o *OptMovieWatchProvidersOKResultsIS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsIS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsIS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsIS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsIT as json.
func (o OptMovieWatchProvidersOKResultsIT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsIT from json.
func (o *OptMovieWatchProvidersOKResultsIT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsIT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsIT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsIT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsJM as json.
func (o OptMovieWatchProvidersOKResultsJM) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsJM from json.
func (o *OptMovieWatchProvidersOKResultsJM) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsJM to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsJM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsJM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsJO as json.
func (o OptMovieWatchProvidersOKResultsJO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsJO from json.
func (o *OptMovieWatchProvidersOKResultsJO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsJO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsJO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsJO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsJP as json.
func (o OptMovieWatchProvidersOKResultsJP) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsJP from json.
func (o *OptMovieWatchProvidersOKResultsJP) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsJP to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsJP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsJP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsKR as json.
func (o OptMovieWatchProvidersOKResultsKR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsKR from json.
func (o *OptMovieWatchProvidersOKResultsKR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsKR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsKR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsKR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsKW as json.
func (o OptMovieWatchProvidersOKResultsKW) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsKW from json.
func (o *OptMovieWatchProvidersOKResultsKW) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsKW to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsKW) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsKW) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsLB as json.
func (o OptMovieWatchProvidersOKResultsLB) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsLB from json.
func (o *OptMovieWatchProvidersOKResultsLB) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsLB to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsLB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsLB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsLI as json.
func (o OptMovieWatchProvidersOKResultsLI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsLI from json.
func (o *OptMovieWatchProvidersOKResultsLI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsLI to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsLI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsLI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsLT as json.
func (o OptMovieWatchProvidersOKResultsLT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsLT from json.
func (o *OptMovieWatchProvidersOKResultsLT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsLT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsLT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsLT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsLV as json.
func (o OptMovieWatchProvidersOKResultsLV) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsLV from json.
func (o *OptMovieWatchProvidersOKResultsLV) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsLV to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsLV) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsLV) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsMD as json.
func (o OptMovieWatchProvidersOKResultsMD) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsMD from json.
func (o *OptMovieWatchProvidersOKResultsMD) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsMD to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsMD) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsMD) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsMK as json.
func (o OptMovieWatchProvidersOKResultsMK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsMK from json.
func (o *OptMovieWatchProvidersOKResultsMK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsMK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsMK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsMK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsMT as json.
func (o OptMovieWatchProvidersOKResultsMT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsMT from json.
func (o *OptMovieWatchProvidersOKResultsMT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsMT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsMT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsMT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsMU as json.
func (o OptMovieWatchProvidersOKResultsMU) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsMU from json.
func (o *OptMovieWatchProvidersOKResultsMU) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsMU to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsMU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsMU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsMX as json.
func (o OptMovieWatchProvidersOKResultsMX) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsMX from json.
func (o *OptMovieWatchProvidersOKResultsMX) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsMX to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsMX) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsMX) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsMY as json.
func (o OptMovieWatchProvidersOKResultsMY) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsMY from json.
func (o *OptMovieWatchProvidersOKResultsMY) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsMY to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsMY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsMY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsMZ as json.
func (o OptMovieWatchProvidersOKResultsMZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsMZ from json.
func (o *OptMovieWatchProvidersOKResultsMZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsMZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsMZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsMZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsNL as json.
func (o OptMovieWatchProvidersOKResultsNL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsNL from json.
func (o *OptMovieWatchProvidersOKResultsNL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsNL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsNL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsNL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsNO as json.
func (o OptMovieWatchProvidersOKResultsNO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsNO from json.
func (o *OptMovieWatchProvidersOKResultsNO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsNO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsNO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsNO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsNZ as json.
func (o OptMovieWatchProvidersOKResultsNZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsNZ from json.
func (o *OptMovieWatchProvidersOKResultsNZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsNZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsNZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsNZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsOM as json.
func (o OptMovieWatchProvidersOKResultsOM) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsOM from json.
func (o *OptMovieWatchProvidersOKResultsOM) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsOM to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsOM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsOM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsPA as json.
func (o OptMovieWatchProvidersOKResultsPA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsPA from json.
func (o *OptMovieWatchProvidersOKResultsPA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsPA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsPA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsPA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsPE as json.
func (o OptMovieWatchProvidersOKResultsPE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsPE from json.
func (o *OptMovieWatchProvidersOKResultsPE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsPE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsPE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsPE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsPH as json.
func (o OptMovieWatchProvidersOKResultsPH) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsPH from json.
func (o *OptMovieWatchProvidersOKResultsPH) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsPH to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsPH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsPH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsPK as json.
func (o OptMovieWatchProvidersOKResultsPK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsPK from json.
func (o *OptMovieWatchProvidersOKResultsPK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsPK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsPK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsPK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsPL as json.
func (o OptMovieWatchProvidersOKResultsPL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsPL from json.
func (o *OptMovieWatchProvidersOKResultsPL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsPL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsPL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsPL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsPS as json.
func (o OptMovieWatchProvidersOKResultsPS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsPS from json.
func (o *OptMovieWatchProvidersOKResultsPS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsPS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsPS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsPS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsPT as json.
func (o OptMovieWatchProvidersOKResultsPT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsPT from json.
func (o *OptMovieWatchProvidersOKResultsPT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsPT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsPT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsPT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsPY as json.
func (o OptMovieWatchProvidersOKResultsPY) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsPY from json.
func (o *OptMovieWatchProvidersOKResultsPY) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsPY to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsPY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsPY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsQA as json.
func (o OptMovieWatchProvidersOKResultsQA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsQA from json.
func (o *OptMovieWatchProvidersOKResultsQA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsQA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsQA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsQA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsRO as json.
func (o OptMovieWatchProvidersOKResultsRO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsRO from json.
func (o *OptMovieWatchProvidersOKResultsRO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsRO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsRO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsRO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsRS as json.
func (o OptMovieWatchProvidersOKResultsRS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsRS from json.
func (o *OptMovieWatchProvidersOKResultsRS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsRS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsRS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsRS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsRU as json.
func (o OptMovieWatchProvidersOKResultsRU) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsRU from json.
func (o *OptMovieWatchProvidersOKResultsRU) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsRU to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsRU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsRU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsSA as json.
func (o OptMovieWatchProvidersOKResultsSA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsSA from json.
func (o *OptMovieWatchProvidersOKResultsSA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsSA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsSA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsSA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsSE as json.
func (o OptMovieWatchProvidersOKResultsSE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsSE from json.
func (o *OptMovieWatchProvidersOKResultsSE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsSE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsSE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsSE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsSG as json.
func (o OptMovieWatchProvidersOKResultsSG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsSG from json.
func (o *OptMovieWatchProvidersOKResultsSG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsSG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsSG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsSG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsSI as json.
func (o OptMovieWatchProvidersOKResultsSI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsSI from json.
func (o *OptMovieWatchProvidersOKResultsSI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsSI to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsSI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsSI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsSK as json.
func (o OptMovieWatchProvidersOKResultsSK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsSK from json.
func (o *OptMovieWatchProvidersOKResultsSK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsSK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsSK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsSK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsSM as json.
func (o OptMovieWatchProvidersOKResultsSM) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsSM from json.
func (o *OptMovieWatchProvidersOKResultsSM) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsSM to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsSM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsSM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsSV as json.
func (o OptMovieWatchProvidersOKResultsSV) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsSV from json.
func (o *OptMovieWatchProvidersOKResultsSV) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsSV to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsSV) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsSV) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsTH as json.
func (o OptMovieWatchProvidersOKResultsTH) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsTH from json.
func (o *OptMovieWatchProvidersOKResultsTH) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsTH to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsTH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsTH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsTR as json.
func (o OptMovieWatchProvidersOKResultsTR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsTR from json.
func (o *OptMovieWatchProvidersOKResultsTR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsTR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsTR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsTR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsTT as json.
func (o OptMovieWatchProvidersOKResultsTT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsTT from json.
func (o *OptMovieWatchProvidersOKResultsTT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsTT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsTT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsTT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsTW as json.
func (o OptMovieWatchProvidersOKResultsTW) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsTW from json.
func (o *OptMovieWatchProvidersOKResultsTW) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsTW to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsTW) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsTW) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsUG as json.
func (o OptMovieWatchProvidersOKResultsUG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsUG from json.
func (o *OptMovieWatchProvidersOKResultsUG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsUG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsUG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsUG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsUS as json.
func (o OptMovieWatchProvidersOKResultsUS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsUS from json.
func (o *OptMovieWatchProvidersOKResultsUS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsUS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsUS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsUS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsUY as json.
func (o OptMovieWatchProvidersOKResultsUY) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsUY from json.
func (o *OptMovieWatchProvidersOKResultsUY) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsUY to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsUY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsUY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsVE as json.
func (o OptMovieWatchProvidersOKResultsVE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsVE from json.
func (o *OptMovieWatchProvidersOKResultsVE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsVE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsVE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsVE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsYE as json.
func (o OptMovieWatchProvidersOKResultsYE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsYE from json.
func (o *OptMovieWatchProvidersOKResultsYE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsYE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsYE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsYE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MovieWatchProvidersOKResultsZA as json.
func (o OptMovieWatchProvidersOKResultsZA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MovieWatchProvidersOKResultsZA from json.
func (o *OptMovieWatchProvidersOKResultsZA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptMovieWatchProvidersOKResultsZA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptMovieWatchProvidersOKResultsZA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptMovieWatchProvidersOKResultsZA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptNilBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptNilBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilBool to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v bool
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptNilFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptNilFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilFloat64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PersonTaggedImagesOKResultsItemMedia as json.
func (o OptPersonTaggedImagesOKResultsItemMedia) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PersonTaggedImagesOKResultsItemMedia from json.
func (o *OptPersonTaggedImagesOKResultsItemMedia) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPersonTaggedImagesOKResultsItemMedia to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPersonTaggedImagesOKResultsItemMedia) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPersonTaggedImagesOKResultsItemMedia) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReviewDetailsOKAuthorDetails as json.
func (o OptReviewDetailsOKAuthorDetails) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ReviewDetailsOKAuthorDetails from json.
func (o *OptReviewDetailsOKAuthorDetails) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptReviewDetailsOKAuthorDetails to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptReviewDetailsOKAuthorDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptReviewDetailsOKAuthorDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TranslationsOKTranslationsItemData as json.
func (o OptTranslationsOKTranslationsItemData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TranslationsOKTranslationsItemData from json.
func (o *OptTranslationsOKTranslationsItemData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTranslationsOKTranslationsItemData to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTranslationsOKTranslationsItemData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTranslationsOKTranslationsItemData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvEpisodeAccountStatesOKRated as json.
func (o OptTvEpisodeAccountStatesOKRated) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvEpisodeAccountStatesOKRated from json.
func (o *OptTvEpisodeAccountStatesOKRated) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvEpisodeAccountStatesOKRated to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvEpisodeAccountStatesOKRated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvEpisodeAccountStatesOKRated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvEpisodeAddRatingReq as json.
func (o OptTvEpisodeAddRatingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvEpisodeAddRatingReq from json.
func (o *OptTvEpisodeAddRatingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvEpisodeAddRatingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvEpisodeAddRatingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvEpisodeAddRatingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvEpisodeGroupDetailsOKNetwork as json.
func (o OptTvEpisodeGroupDetailsOKNetwork) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvEpisodeGroupDetailsOKNetwork from json.
func (o *OptTvEpisodeGroupDetailsOKNetwork) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvEpisodeGroupDetailsOKNetwork to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvEpisodeGroupDetailsOKNetwork) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvEpisodeGroupDetailsOKNetwork) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvEpisodeTranslationsOKTranslationsItemData as json.
func (o OptTvEpisodeTranslationsOKTranslationsItemData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvEpisodeTranslationsOKTranslationsItemData from json.
func (o *OptTvEpisodeTranslationsOKTranslationsItemData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvEpisodeTranslationsOKTranslationsItemData to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvEpisodeTranslationsOKTranslationsItemData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvEpisodeTranslationsOKTranslationsItemData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonAccountStatesOKResultsItemRated as json.
func (o OptTvSeasonAccountStatesOKResultsItemRated) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonAccountStatesOKResultsItemRated from json.
func (o *OptTvSeasonAccountStatesOKResultsItemRated) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonAccountStatesOKResultsItemRated to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonAccountStatesOKResultsItemRated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonAccountStatesOKResultsItemRated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonChangesByIDOKChangesItemItemsItemValue as json.
func (o OptTvSeasonChangesByIDOKChangesItemItemsItemValue) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonChangesByIDOKChangesItemItemsItemValue from json.
func (o *OptTvSeasonChangesByIDOKChangesItemItemsItemValue) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonChangesByIDOKChangesItemItemsItemValue to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonChangesByIDOKChangesItemItemsItemValue) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonChangesByIDOKChangesItemItemsItemValue) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonTranslationsOKTranslationsItemData as json.
func (o OptTvSeasonTranslationsOKTranslationsItemData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonTranslationsOKTranslationsItemData from json.
func (o *OptTvSeasonTranslationsOKTranslationsItemData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonTranslationsOKTranslationsItemData to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonTranslationsOKTranslationsItemData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonTranslationsOKTranslationsItemData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResults as json.
func (o OptTvSeasonWatchProvidersOKResults) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResults from json.
func (o *OptTvSeasonWatchProvidersOKResults) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResults to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResults) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResults) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsAE as json.
func (o OptTvSeasonWatchProvidersOKResultsAE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsAE from json.
func (o *OptTvSeasonWatchProvidersOKResultsAE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsAE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsAE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsAE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsAR as json.
func (o OptTvSeasonWatchProvidersOKResultsAR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsAR from json.
func (o *OptTvSeasonWatchProvidersOKResultsAR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsAR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsAR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsAR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsAT as json.
func (o OptTvSeasonWatchProvidersOKResultsAT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsAT from json.
func (o *OptTvSeasonWatchProvidersOKResultsAT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsAT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsAT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsAT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsAU as json.
func (o OptTvSeasonWatchProvidersOKResultsAU) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsAU from json.
func (o *OptTvSeasonWatchProvidersOKResultsAU) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsAU to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsAU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsAU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsBA as json.
func (o OptTvSeasonWatchProvidersOKResultsBA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsBA from json.
func (o *OptTvSeasonWatchProvidersOKResultsBA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsBA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsBA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsBA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsBB as json.
func (o OptTvSeasonWatchProvidersOKResultsBB) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsBB from json.
func (o *OptTvSeasonWatchProvidersOKResultsBB) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsBB to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsBB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsBB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsBE as json.
func (o OptTvSeasonWatchProvidersOKResultsBE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsBE from json.
func (o *OptTvSeasonWatchProvidersOKResultsBE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsBE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsBE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsBE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsBG as json.
func (o OptTvSeasonWatchProvidersOKResultsBG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsBG from json.
func (o *OptTvSeasonWatchProvidersOKResultsBG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsBG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsBG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsBG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsBO as json.
func (o OptTvSeasonWatchProvidersOKResultsBO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsBO from json.
func (o *OptTvSeasonWatchProvidersOKResultsBO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsBO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsBO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsBO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsBR as json.
func (o OptTvSeasonWatchProvidersOKResultsBR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsBR from json.
func (o *OptTvSeasonWatchProvidersOKResultsBR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsBR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsBR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsBR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsBS as json.
func (o OptTvSeasonWatchProvidersOKResultsBS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsBS from json.
func (o *OptTvSeasonWatchProvidersOKResultsBS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsBS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsBS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsBS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsCA as json.
func (o OptTvSeasonWatchProvidersOKResultsCA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsCA from json.
func (o *OptTvSeasonWatchProvidersOKResultsCA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsCA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsCA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsCA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsCH as json.
func (o OptTvSeasonWatchProvidersOKResultsCH) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsCH from json.
func (o *OptTvSeasonWatchProvidersOKResultsCH) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsCH to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsCH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsCH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsCI as json.
func (o OptTvSeasonWatchProvidersOKResultsCI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsCI from json.
func (o *OptTvSeasonWatchProvidersOKResultsCI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsCI to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsCI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsCI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsCL as json.
func (o OptTvSeasonWatchProvidersOKResultsCL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsCL from json.
func (o *OptTvSeasonWatchProvidersOKResultsCL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsCL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsCL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsCL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsCO as json.
func (o OptTvSeasonWatchProvidersOKResultsCO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsCO from json.
func (o *OptTvSeasonWatchProvidersOKResultsCO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsCO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsCO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsCO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsCR as json.
func (o OptTvSeasonWatchProvidersOKResultsCR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsCR from json.
func (o *OptTvSeasonWatchProvidersOKResultsCR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsCR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsCR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsCR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsCZ as json.
func (o OptTvSeasonWatchProvidersOKResultsCZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsCZ from json.
func (o *OptTvSeasonWatchProvidersOKResultsCZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsCZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsCZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsCZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsDE as json.
func (o OptTvSeasonWatchProvidersOKResultsDE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsDE from json.
func (o *OptTvSeasonWatchProvidersOKResultsDE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsDE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsDE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsDE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsDK as json.
func (o OptTvSeasonWatchProvidersOKResultsDK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsDK from json.
func (o *OptTvSeasonWatchProvidersOKResultsDK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsDK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsDK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsDK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsDO as json.
func (o OptTvSeasonWatchProvidersOKResultsDO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsDO from json.
func (o *OptTvSeasonWatchProvidersOKResultsDO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsDO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsDO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsDO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsDZ as json.
func (o OptTvSeasonWatchProvidersOKResultsDZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsDZ from json.
func (o *OptTvSeasonWatchProvidersOKResultsDZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsDZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsDZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsDZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsEC as json.
func (o OptTvSeasonWatchProvidersOKResultsEC) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsEC from json.
func (o *OptTvSeasonWatchProvidersOKResultsEC) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsEC to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsEC) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsEC) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsEG as json.
func (o OptTvSeasonWatchProvidersOKResultsEG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsEG from json.
func (o *OptTvSeasonWatchProvidersOKResultsEG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsEG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsEG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsEG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsES as json.
func (o OptTvSeasonWatchProvidersOKResultsES) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsES from json.
func (o *OptTvSeasonWatchProvidersOKResultsES) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsES to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsES) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsES) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsFI as json.
func (o OptTvSeasonWatchProvidersOKResultsFI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsFI from json.
func (o *OptTvSeasonWatchProvidersOKResultsFI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsFI to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsFI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsFI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsFR as json.
func (o OptTvSeasonWatchProvidersOKResultsFR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsFR from json.
func (o *OptTvSeasonWatchProvidersOKResultsFR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsFR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsFR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsFR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsGB as json.
func (o OptTvSeasonWatchProvidersOKResultsGB) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsGB from json.
func (o *OptTvSeasonWatchProvidersOKResultsGB) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsGB to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsGB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsGB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsGF as json.
func (o OptTvSeasonWatchProvidersOKResultsGF) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsGF from json.
func (o *OptTvSeasonWatchProvidersOKResultsGF) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsGF to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsGF) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsGF) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsGH as json.
func (o OptTvSeasonWatchProvidersOKResultsGH) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsGH from json.
func (o *OptTvSeasonWatchProvidersOKResultsGH) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsGH to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsGH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsGH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsGQ as json.
func (o OptTvSeasonWatchProvidersOKResultsGQ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsGQ from json.
func (o *OptTvSeasonWatchProvidersOKResultsGQ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsGQ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsGQ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsGQ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsGT as json.
func (o OptTvSeasonWatchProvidersOKResultsGT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsGT from json.
func (o *OptTvSeasonWatchProvidersOKResultsGT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsGT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsGT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsGT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsHK as json.
func (o OptTvSeasonWatchProvidersOKResultsHK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsHK from json.
func (o *OptTvSeasonWatchProvidersOKResultsHK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsHK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsHK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsHK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsHN as json.
func (o OptTvSeasonWatchProvidersOKResultsHN) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsHN from json.
func (o *OptTvSeasonWatchProvidersOKResultsHN) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsHN to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsHN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsHN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsHR as json.
func (o OptTvSeasonWatchProvidersOKResultsHR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsHR from json.
func (o *OptTvSeasonWatchProvidersOKResultsHR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsHR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsHR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsHR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsHU as json.
func (o OptTvSeasonWatchProvidersOKResultsHU) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsHU from json.
func (o *OptTvSeasonWatchProvidersOKResultsHU) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsHU to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsHU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsHU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsID as json.
func (o OptTvSeasonWatchProvidersOKResultsID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsID from json.
func (o *OptTvSeasonWatchProvidersOKResultsID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsIE as json.
func (o OptTvSeasonWatchProvidersOKResultsIE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsIE from json.
func (o *OptTvSeasonWatchProvidersOKResultsIE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsIE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsIE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsIE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsIL as json.
func (o OptTvSeasonWatchProvidersOKResultsIL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsIL from json.
func (o *OptTvSeasonWatchProvidersOKResultsIL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsIL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsIL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsIL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsIQ as json.
func (o OptTvSeasonWatchProvidersOKResultsIQ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsIQ from json.
func (o *OptTvSeasonWatchProvidersOKResultsIQ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsIQ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsIQ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsIQ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsIT as json.
func (o OptTvSeasonWatchProvidersOKResultsIT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsIT from json.
func (o *OptTvSeasonWatchProvidersOKResultsIT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsIT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsIT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsIT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsJM as json.
func (o OptTvSeasonWatchProvidersOKResultsJM) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsJM from json.
func (o *OptTvSeasonWatchProvidersOKResultsJM) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsJM to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsJM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsJM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsJP as json.
func (o OptTvSeasonWatchProvidersOKResultsJP) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsJP from json.
func (o *OptTvSeasonWatchProvidersOKResultsJP) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsJP to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsJP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsJP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsKE as json.
func (o OptTvSeasonWatchProvidersOKResultsKE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsKE from json.
func (o *OptTvSeasonWatchProvidersOKResultsKE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsKE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsKE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsKE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsKR as json.
func (o OptTvSeasonWatchProvidersOKResultsKR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsKR from json.
func (o *OptTvSeasonWatchProvidersOKResultsKR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsKR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsKR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsKR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsLB as json.
func (o OptTvSeasonWatchProvidersOKResultsLB) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsLB from json.
func (o *OptTvSeasonWatchProvidersOKResultsLB) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsLB to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsLB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsLB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsLY as json.
func (o OptTvSeasonWatchProvidersOKResultsLY) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsLY from json.
func (o *OptTvSeasonWatchProvidersOKResultsLY) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsLY to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsLY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsLY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsMD as json.
func (o OptTvSeasonWatchProvidersOKResultsMD) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsMD from json.
func (o *OptTvSeasonWatchProvidersOKResultsMD) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsMD to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsMD) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsMD) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsMK as json.
func (o OptTvSeasonWatchProvidersOKResultsMK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsMK from json.
func (o *OptTvSeasonWatchProvidersOKResultsMK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsMK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsMK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsMK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsMU as json.
func (o OptTvSeasonWatchProvidersOKResultsMU) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsMU from json.
func (o *OptTvSeasonWatchProvidersOKResultsMU) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsMU to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsMU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsMU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsMX as json.
func (o OptTvSeasonWatchProvidersOKResultsMX) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsMX from json.
func (o *OptTvSeasonWatchProvidersOKResultsMX) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsMX to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsMX) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsMX) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsMY as json.
func (o OptTvSeasonWatchProvidersOKResultsMY) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsMY from json.
func (o *OptTvSeasonWatchProvidersOKResultsMY) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsMY to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsMY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsMY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsMZ as json.
func (o OptTvSeasonWatchProvidersOKResultsMZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsMZ from json.
func (o *OptTvSeasonWatchProvidersOKResultsMZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsMZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsMZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsMZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsNE as json.
func (o OptTvSeasonWatchProvidersOKResultsNE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsNE from json.
func (o *OptTvSeasonWatchProvidersOKResultsNE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsNE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsNE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsNE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsNG as json.
func (o OptTvSeasonWatchProvidersOKResultsNG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsNG from json.
func (o *OptTvSeasonWatchProvidersOKResultsNG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsNG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsNG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsNG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsNL as json.
func (o OptTvSeasonWatchProvidersOKResultsNL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsNL from json.
func (o *OptTvSeasonWatchProvidersOKResultsNL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsNL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsNL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsNL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsNO as json.
func (o OptTvSeasonWatchProvidersOKResultsNO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsNO from json.
func (o *OptTvSeasonWatchProvidersOKResultsNO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsNO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsNO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsNO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsNZ as json.
func (o OptTvSeasonWatchProvidersOKResultsNZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsNZ from json.
func (o *OptTvSeasonWatchProvidersOKResultsNZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsNZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsNZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsNZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsPA as json.
func (o OptTvSeasonWatchProvidersOKResultsPA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsPA from json.
func (o *OptTvSeasonWatchProvidersOKResultsPA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsPA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsPA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsPA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsPE as json.
func (o OptTvSeasonWatchProvidersOKResultsPE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsPE from json.
func (o *OptTvSeasonWatchProvidersOKResultsPE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsPE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsPE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsPE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsPH as json.
func (o OptTvSeasonWatchProvidersOKResultsPH) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsPH from json.
func (o *OptTvSeasonWatchProvidersOKResultsPH) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsPH to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsPH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsPH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsPL as json.
func (o OptTvSeasonWatchProvidersOKResultsPL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsPL from json.
func (o *OptTvSeasonWatchProvidersOKResultsPL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsPL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsPL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsPL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsPS as json.
func (o OptTvSeasonWatchProvidersOKResultsPS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsPS from json.
func (o *OptTvSeasonWatchProvidersOKResultsPS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsPS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsPS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsPS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsPT as json.
func (o OptTvSeasonWatchProvidersOKResultsPT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsPT from json.
func (o *OptTvSeasonWatchProvidersOKResultsPT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsPT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsPT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsPT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsPY as json.
func (o OptTvSeasonWatchProvidersOKResultsPY) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsPY from json.
func (o *OptTvSeasonWatchProvidersOKResultsPY) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsPY to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsPY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsPY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsRO as json.
func (o OptTvSeasonWatchProvidersOKResultsRO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsRO from json.
func (o *OptTvSeasonWatchProvidersOKResultsRO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsRO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsRO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsRO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsRS as json.
func (o OptTvSeasonWatchProvidersOKResultsRS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsRS from json.
func (o *OptTvSeasonWatchProvidersOKResultsRS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsRS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsRS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsRS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsRU as json.
func (o OptTvSeasonWatchProvidersOKResultsRU) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsRU from json.
func (o *OptTvSeasonWatchProvidersOKResultsRU) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsRU to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsRU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsRU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsSA as json.
func (o OptTvSeasonWatchProvidersOKResultsSA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsSA from json.
func (o *OptTvSeasonWatchProvidersOKResultsSA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsSA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsSA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsSA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsSC as json.
func (o OptTvSeasonWatchProvidersOKResultsSC) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsSC from json.
func (o *OptTvSeasonWatchProvidersOKResultsSC) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsSC to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsSC) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsSC) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsSE as json.
func (o OptTvSeasonWatchProvidersOKResultsSE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsSE from json.
func (o *OptTvSeasonWatchProvidersOKResultsSE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsSE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsSE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsSE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsSG as json.
func (o OptTvSeasonWatchProvidersOKResultsSG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsSG from json.
func (o *OptTvSeasonWatchProvidersOKResultsSG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsSG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsSG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsSG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsSI as json.
func (o OptTvSeasonWatchProvidersOKResultsSI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsSI from json.
func (o *OptTvSeasonWatchProvidersOKResultsSI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsSI to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsSI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsSI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsSK as json.
func (o OptTvSeasonWatchProvidersOKResultsSK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsSK from json.
func (o *OptTvSeasonWatchProvidersOKResultsSK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsSK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsSK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsSK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsSN as json.
func (o OptTvSeasonWatchProvidersOKResultsSN) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsSN from json.
func (o *OptTvSeasonWatchProvidersOKResultsSN) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsSN to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsSN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsSN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsSV as json.
func (o OptTvSeasonWatchProvidersOKResultsSV) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsSV from json.
func (o *OptTvSeasonWatchProvidersOKResultsSV) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsSV to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsSV) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsSV) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsTH as json.
func (o OptTvSeasonWatchProvidersOKResultsTH) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsTH from json.
func (o *OptTvSeasonWatchProvidersOKResultsTH) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsTH to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsTH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsTH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsTR as json.
func (o OptTvSeasonWatchProvidersOKResultsTR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsTR from json.
func (o *OptTvSeasonWatchProvidersOKResultsTR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsTR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsTR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsTR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsTT as json.
func (o OptTvSeasonWatchProvidersOKResultsTT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsTT from json.
func (o *OptTvSeasonWatchProvidersOKResultsTT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsTT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsTT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsTT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsTW as json.
func (o OptTvSeasonWatchProvidersOKResultsTW) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsTW from json.
func (o *OptTvSeasonWatchProvidersOKResultsTW) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsTW to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsTW) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsTW) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsTZ as json.
func (o OptTvSeasonWatchProvidersOKResultsTZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsTZ from json.
func (o *OptTvSeasonWatchProvidersOKResultsTZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsTZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsTZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsTZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsUG as json.
func (o OptTvSeasonWatchProvidersOKResultsUG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsUG from json.
func (o *OptTvSeasonWatchProvidersOKResultsUG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsUG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsUG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsUG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsUS as json.
func (o OptTvSeasonWatchProvidersOKResultsUS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsUS from json.
func (o *OptTvSeasonWatchProvidersOKResultsUS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsUS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsUS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsUS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsUY as json.
func (o OptTvSeasonWatchProvidersOKResultsUY) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsUY from json.
func (o *OptTvSeasonWatchProvidersOKResultsUY) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsUY to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsUY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsUY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsVE as json.
func (o OptTvSeasonWatchProvidersOKResultsVE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsVE from json.
func (o *OptTvSeasonWatchProvidersOKResultsVE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsVE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsVE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsVE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsZA as json.
func (o OptTvSeasonWatchProvidersOKResultsZA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsZA from json.
func (o *OptTvSeasonWatchProvidersOKResultsZA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsZA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsZA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsZA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeasonWatchProvidersOKResultsZM as json.
func (o OptTvSeasonWatchProvidersOKResultsZM) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeasonWatchProvidersOKResultsZM from json.
func (o *OptTvSeasonWatchProvidersOKResultsZM) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeasonWatchProvidersOKResultsZM to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeasonWatchProvidersOKResultsZM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeasonWatchProvidersOKResultsZM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesAccountStatesOKRated as json.
func (o OptTvSeriesAccountStatesOKRated) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesAccountStatesOKRated from json.
func (o *OptTvSeriesAccountStatesOKRated) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesAccountStatesOKRated to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesAccountStatesOKRated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesAccountStatesOKRated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesAddRatingReq as json.
func (o OptTvSeriesAddRatingReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesAddRatingReq from json.
func (o *OptTvSeriesAddRatingReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesAddRatingReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesAddRatingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesAddRatingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesChangesOKChangesItemItemsItemOriginalValue as json.
func (o OptTvSeriesChangesOKChangesItemItemsItemOriginalValue) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesChangesOKChangesItemItemsItemOriginalValue from json.
func (o *OptTvSeriesChangesOKChangesItemItemsItemOriginalValue) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesChangesOKChangesItemItemsItemOriginalValue to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesChangesOKChangesItemItemsItemOriginalValue) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesChangesOKChangesItemItemsItemOriginalValue) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesChangesOKChangesItemItemsItemOriginalValuePoster as json.
func (o OptTvSeriesChangesOKChangesItemItemsItemOriginalValuePoster) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesChangesOKChangesItemItemsItemOriginalValuePoster from json.
func (o *OptTvSeriesChangesOKChangesItemItemsItemOriginalValuePoster) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesChangesOKChangesItemItemsItemOriginalValuePoster to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesChangesOKChangesItemItemsItemOriginalValuePoster) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesChangesOKChangesItemItemsItemOriginalValuePoster) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesChangesOKChangesItemItemsItemValue as json.
func (o OptTvSeriesChangesOKChangesItemItemsItemValue) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesChangesOKChangesItemItemsItemValue from json.
func (o *OptTvSeriesChangesOKChangesItemItemsItemValue) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesChangesOKChangesItemItemsItemValue to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesChangesOKChangesItemItemsItemValue) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesChangesOKChangesItemItemsItemValue) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesChangesOKChangesItemItemsItemValuePoster as json.
func (o OptTvSeriesChangesOKChangesItemItemsItemValuePoster) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesChangesOKChangesItemItemsItemValuePoster from json.
func (o *OptTvSeriesChangesOKChangesItemItemsItemValuePoster) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesChangesOKChangesItemItemsItemValuePoster to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesChangesOKChangesItemItemsItemValuePoster) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesChangesOKChangesItemItemsItemValuePoster) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesDetailsOKLastEpisodeToAir as json.
func (o OptTvSeriesDetailsOKLastEpisodeToAir) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesDetailsOKLastEpisodeToAir from json.
func (o *OptTvSeriesDetailsOKLastEpisodeToAir) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesDetailsOKLastEpisodeToAir to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesDetailsOKLastEpisodeToAir) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesDetailsOKLastEpisodeToAir) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesEpisodeGroupsOKResultsItemNetwork as json.
func (o OptTvSeriesEpisodeGroupsOKResultsItemNetwork) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesEpisodeGroupsOKResultsItemNetwork from json.
func (o *OptTvSeriesEpisodeGroupsOKResultsItemNetwork) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesEpisodeGroupsOKResultsItemNetwork to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesEpisodeGroupsOKResultsItemNetwork) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesEpisodeGroupsOKResultsItemNetwork) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesLatestIDOKLastEpisodeToAir as json.
func (o OptTvSeriesLatestIDOKLastEpisodeToAir) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesLatestIDOKLastEpisodeToAir from json.
func (o *OptTvSeriesLatestIDOKLastEpisodeToAir) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesLatestIDOKLastEpisodeToAir to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesLatestIDOKLastEpisodeToAir) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesLatestIDOKLastEpisodeToAir) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesReviewsOKResultsItemAuthorDetails as json.
func (o OptTvSeriesReviewsOKResultsItemAuthorDetails) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesReviewsOKResultsItemAuthorDetails from json.
func (o *OptTvSeriesReviewsOKResultsItemAuthorDetails) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesReviewsOKResultsItemAuthorDetails to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesReviewsOKResultsItemAuthorDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesReviewsOKResultsItemAuthorDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesTranslationsOKTranslationsItemData as json.
func (o OptTvSeriesTranslationsOKTranslationsItemData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesTranslationsOKTranslationsItemData from json.
func (o *OptTvSeriesTranslationsOKTranslationsItemData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesTranslationsOKTranslationsItemData to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesTranslationsOKTranslationsItemData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesTranslationsOKTranslationsItemData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResults as json.
func (o OptTvSeriesWatchProvidersOKResults) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResults from json.
func (o *OptTvSeriesWatchProvidersOKResults) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResults to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResults) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResults) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsAE as json.
func (o OptTvSeriesWatchProvidersOKResultsAE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsAE from json.
func (o *OptTvSeriesWatchProvidersOKResultsAE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsAE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsAE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsAE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsAR as json.
func (o OptTvSeriesWatchProvidersOKResultsAR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsAR from json.
func (o *OptTvSeriesWatchProvidersOKResultsAR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsAR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsAR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsAR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsAT as json.
func (o OptTvSeriesWatchProvidersOKResultsAT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsAT from json.
func (o *OptTvSeriesWatchProvidersOKResultsAT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsAT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsAT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsAT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsAU as json.
func (o OptTvSeriesWatchProvidersOKResultsAU) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsAU from json.
func (o *OptTvSeriesWatchProvidersOKResultsAU) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsAU to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsAU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsAU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsBA as json.
func (o OptTvSeriesWatchProvidersOKResultsBA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsBA from json.
func (o *OptTvSeriesWatchProvidersOKResultsBA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsBA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsBA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsBA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsBB as json.
func (o OptTvSeriesWatchProvidersOKResultsBB) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsBB from json.
func (o *OptTvSeriesWatchProvidersOKResultsBB) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsBB to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsBB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsBB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsBE as json.
func (o OptTvSeriesWatchProvidersOKResultsBE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsBE from json.
func (o *OptTvSeriesWatchProvidersOKResultsBE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsBE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsBE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsBE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsBG as json.
func (o OptTvSeriesWatchProvidersOKResultsBG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsBG from json.
func (o *OptTvSeriesWatchProvidersOKResultsBG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsBG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsBG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsBG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsBO as json.
func (o OptTvSeriesWatchProvidersOKResultsBO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsBO from json.
func (o *OptTvSeriesWatchProvidersOKResultsBO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsBO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsBO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsBO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsBR as json.
func (o OptTvSeriesWatchProvidersOKResultsBR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsBR from json.
func (o *OptTvSeriesWatchProvidersOKResultsBR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsBR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsBR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsBR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsBS as json.
func (o OptTvSeriesWatchProvidersOKResultsBS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsBS from json.
func (o *OptTvSeriesWatchProvidersOKResultsBS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsBS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsBS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsBS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsCA as json.
func (o OptTvSeriesWatchProvidersOKResultsCA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsCA from json.
func (o *OptTvSeriesWatchProvidersOKResultsCA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsCA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsCA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsCA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsCH as json.
func (o OptTvSeriesWatchProvidersOKResultsCH) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsCH from json.
func (o *OptTvSeriesWatchProvidersOKResultsCH) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsCH to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsCH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsCH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsCI as json.
func (o OptTvSeriesWatchProvidersOKResultsCI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsCI from json.
func (o *OptTvSeriesWatchProvidersOKResultsCI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsCI to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsCI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsCI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsCL as json.
func (o OptTvSeriesWatchProvidersOKResultsCL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsCL from json.
func (o *OptTvSeriesWatchProvidersOKResultsCL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsCL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsCL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsCL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsCO as json.
func (o OptTvSeriesWatchProvidersOKResultsCO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsCO from json.
func (o *OptTvSeriesWatchProvidersOKResultsCO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsCO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsCO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsCO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsCR as json.
func (o OptTvSeriesWatchProvidersOKResultsCR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsCR from json.
func (o *OptTvSeriesWatchProvidersOKResultsCR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsCR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsCR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsCR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsCZ as json.
func (o OptTvSeriesWatchProvidersOKResultsCZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsCZ from json.
func (o *OptTvSeriesWatchProvidersOKResultsCZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsCZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsCZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsCZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsDE as json.
func (o OptTvSeriesWatchProvidersOKResultsDE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsDE from json.
func (o *OptTvSeriesWatchProvidersOKResultsDE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsDE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsDE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsDE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsDK as json.
func (o OptTvSeriesWatchProvidersOKResultsDK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsDK from json.
func (o *OptTvSeriesWatchProvidersOKResultsDK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsDK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsDK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsDK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsDO as json.
func (o OptTvSeriesWatchProvidersOKResultsDO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsDO from json.
func (o *OptTvSeriesWatchProvidersOKResultsDO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsDO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsDO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsDO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsDZ as json.
func (o OptTvSeriesWatchProvidersOKResultsDZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsDZ from json.
func (o *OptTvSeriesWatchProvidersOKResultsDZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsDZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsDZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsDZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsEC as json.
func (o OptTvSeriesWatchProvidersOKResultsEC) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsEC from json.
func (o *OptTvSeriesWatchProvidersOKResultsEC) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsEC to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsEC) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsEC) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsEG as json.
func (o OptTvSeriesWatchProvidersOKResultsEG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsEG from json.
func (o *OptTvSeriesWatchProvidersOKResultsEG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsEG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsEG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsEG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsES as json.
func (o OptTvSeriesWatchProvidersOKResultsES) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsES from json.
func (o *OptTvSeriesWatchProvidersOKResultsES) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsES to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsES) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsES) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsFI as json.
func (o OptTvSeriesWatchProvidersOKResultsFI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsFI from json.
func (o *OptTvSeriesWatchProvidersOKResultsFI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsFI to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsFI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsFI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsFR as json.
func (o OptTvSeriesWatchProvidersOKResultsFR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsFR from json.
func (o *OptTvSeriesWatchProvidersOKResultsFR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsFR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsFR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsFR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsGB as json.
func (o OptTvSeriesWatchProvidersOKResultsGB) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsGB from json.
func (o *OptTvSeriesWatchProvidersOKResultsGB) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsGB to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsGB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsGB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsGF as json.
func (o OptTvSeriesWatchProvidersOKResultsGF) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsGF from json.
func (o *OptTvSeriesWatchProvidersOKResultsGF) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsGF to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsGF) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsGF) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsGH as json.
func (o OptTvSeriesWatchProvidersOKResultsGH) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsGH from json.
func (o *OptTvSeriesWatchProvidersOKResultsGH) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsGH to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsGH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsGH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsGQ as json.
func (o OptTvSeriesWatchProvidersOKResultsGQ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsGQ from json.
func (o *OptTvSeriesWatchProvidersOKResultsGQ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsGQ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsGQ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsGQ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsGT as json.
func (o OptTvSeriesWatchProvidersOKResultsGT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsGT from json.
func (o *OptTvSeriesWatchProvidersOKResultsGT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsGT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsGT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsGT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsHK as json.
func (o OptTvSeriesWatchProvidersOKResultsHK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsHK from json.
func (o *OptTvSeriesWatchProvidersOKResultsHK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsHK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsHK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsHK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsHN as json.
func (o OptTvSeriesWatchProvidersOKResultsHN) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsHN from json.
func (o *OptTvSeriesWatchProvidersOKResultsHN) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsHN to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsHN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsHN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsHR as json.
func (o OptTvSeriesWatchProvidersOKResultsHR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsHR from json.
func (o *OptTvSeriesWatchProvidersOKResultsHR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsHR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsHR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsHR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsHU as json.
func (o OptTvSeriesWatchProvidersOKResultsHU) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsHU from json.
func (o *OptTvSeriesWatchProvidersOKResultsHU) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsHU to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsHU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsHU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsID as json.
func (o OptTvSeriesWatchProvidersOKResultsID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsID from json.
func (o *OptTvSeriesWatchProvidersOKResultsID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsIE as json.
func (o OptTvSeriesWatchProvidersOKResultsIE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsIE from json.
func (o *OptTvSeriesWatchProvidersOKResultsIE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsIE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsIE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsIE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsIL as json.
func (o OptTvSeriesWatchProvidersOKResultsIL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsIL from json.
func (o *OptTvSeriesWatchProvidersOKResultsIL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsIL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsIL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsIL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsIQ as json.
func (o OptTvSeriesWatchProvidersOKResultsIQ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsIQ from json.
func (o *OptTvSeriesWatchProvidersOKResultsIQ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsIQ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsIQ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsIQ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsIT as json.
func (o OptTvSeriesWatchProvidersOKResultsIT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsIT from json.
func (o *OptTvSeriesWatchProvidersOKResultsIT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsIT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsIT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsIT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsJM as json.
func (o OptTvSeriesWatchProvidersOKResultsJM) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsJM from json.
func (o *OptTvSeriesWatchProvidersOKResultsJM) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsJM to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsJM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsJM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsJP as json.
func (o OptTvSeriesWatchProvidersOKResultsJP) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsJP from json.
func (o *OptTvSeriesWatchProvidersOKResultsJP) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsJP to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsJP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsJP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsKE as json.
func (o OptTvSeriesWatchProvidersOKResultsKE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsKE from json.
func (o *OptTvSeriesWatchProvidersOKResultsKE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsKE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsKE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsKE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsKR as json.
func (o OptTvSeriesWatchProvidersOKResultsKR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsKR from json.
func (o *OptTvSeriesWatchProvidersOKResultsKR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsKR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsKR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsKR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsLB as json.
func (o OptTvSeriesWatchProvidersOKResultsLB) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsLB from json.
func (o *OptTvSeriesWatchProvidersOKResultsLB) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsLB to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsLB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsLB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsLT as json.
func (o OptTvSeriesWatchProvidersOKResultsLT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsLT from json.
func (o *OptTvSeriesWatchProvidersOKResultsLT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsLT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsLT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsLT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsLY as json.
func (o OptTvSeriesWatchProvidersOKResultsLY) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsLY from json.
func (o *OptTvSeriesWatchProvidersOKResultsLY) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsLY to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsLY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsLY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsMD as json.
func (o OptTvSeriesWatchProvidersOKResultsMD) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsMD from json.
func (o *OptTvSeriesWatchProvidersOKResultsMD) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsMD to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsMD) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsMD) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsMK as json.
func (o OptTvSeriesWatchProvidersOKResultsMK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsMK from json.
func (o *OptTvSeriesWatchProvidersOKResultsMK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsMK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsMK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsMK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsMU as json.
func (o OptTvSeriesWatchProvidersOKResultsMU) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsMU from json.
func (o *OptTvSeriesWatchProvidersOKResultsMU) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsMU to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsMU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsMU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsMX as json.
func (o OptTvSeriesWatchProvidersOKResultsMX) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsMX from json.
func (o *OptTvSeriesWatchProvidersOKResultsMX) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsMX to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsMX) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsMX) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsMY as json.
func (o OptTvSeriesWatchProvidersOKResultsMY) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsMY from json.
func (o *OptTvSeriesWatchProvidersOKResultsMY) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsMY to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsMY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsMY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsMZ as json.
func (o OptTvSeriesWatchProvidersOKResultsMZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsMZ from json.
func (o *OptTvSeriesWatchProvidersOKResultsMZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsMZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsMZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsMZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsNE as json.
func (o OptTvSeriesWatchProvidersOKResultsNE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsNE from json.
func (o *OptTvSeriesWatchProvidersOKResultsNE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsNE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsNE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsNE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsNG as json.
func (o OptTvSeriesWatchProvidersOKResultsNG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsNG from json.
func (o *OptTvSeriesWatchProvidersOKResultsNG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsNG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsNG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsNG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsNL as json.
func (o OptTvSeriesWatchProvidersOKResultsNL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsNL from json.
func (o *OptTvSeriesWatchProvidersOKResultsNL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsNL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsNL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsNL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsNO as json.
func (o OptTvSeriesWatchProvidersOKResultsNO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsNO from json.
func (o *OptTvSeriesWatchProvidersOKResultsNO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsNO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsNO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsNO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsNZ as json.
func (o OptTvSeriesWatchProvidersOKResultsNZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsNZ from json.
func (o *OptTvSeriesWatchProvidersOKResultsNZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsNZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsNZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsNZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsPA as json.
func (o OptTvSeriesWatchProvidersOKResultsPA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsPA from json.
func (o *OptTvSeriesWatchProvidersOKResultsPA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsPA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsPA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsPA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsPE as json.
func (o OptTvSeriesWatchProvidersOKResultsPE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsPE from json.
func (o *OptTvSeriesWatchProvidersOKResultsPE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsPE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsPE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsPE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsPH as json.
func (o OptTvSeriesWatchProvidersOKResultsPH) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsPH from json.
func (o *OptTvSeriesWatchProvidersOKResultsPH) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsPH to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsPH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsPH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsPL as json.
func (o OptTvSeriesWatchProvidersOKResultsPL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsPL from json.
func (o *OptTvSeriesWatchProvidersOKResultsPL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsPL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsPL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsPL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsPS as json.
func (o OptTvSeriesWatchProvidersOKResultsPS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsPS from json.
func (o *OptTvSeriesWatchProvidersOKResultsPS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsPS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsPS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsPS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsPT as json.
func (o OptTvSeriesWatchProvidersOKResultsPT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsPT from json.
func (o *OptTvSeriesWatchProvidersOKResultsPT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsPT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsPT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsPT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsPY as json.
func (o OptTvSeriesWatchProvidersOKResultsPY) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsPY from json.
func (o *OptTvSeriesWatchProvidersOKResultsPY) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsPY to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsPY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsPY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsRO as json.
func (o OptTvSeriesWatchProvidersOKResultsRO) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsRO from json.
func (o *OptTvSeriesWatchProvidersOKResultsRO) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsRO to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsRO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsRO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsRS as json.
func (o OptTvSeriesWatchProvidersOKResultsRS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsRS from json.
func (o *OptTvSeriesWatchProvidersOKResultsRS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsRS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsRS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsRS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsRU as json.
func (o OptTvSeriesWatchProvidersOKResultsRU) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsRU from json.
func (o *OptTvSeriesWatchProvidersOKResultsRU) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsRU to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsRU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsRU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsSA as json.
func (o OptTvSeriesWatchProvidersOKResultsSA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsSA from json.
func (o *OptTvSeriesWatchProvidersOKResultsSA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsSA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsSA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsSA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsSC as json.
func (o OptTvSeriesWatchProvidersOKResultsSC) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsSC from json.
func (o *OptTvSeriesWatchProvidersOKResultsSC) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsSC to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsSC) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsSC) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsSE as json.
func (o OptTvSeriesWatchProvidersOKResultsSE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsSE from json.
func (o *OptTvSeriesWatchProvidersOKResultsSE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsSE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsSE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsSE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsSG as json.
func (o OptTvSeriesWatchProvidersOKResultsSG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsSG from json.
func (o *OptTvSeriesWatchProvidersOKResultsSG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsSG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsSG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsSG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsSI as json.
func (o OptTvSeriesWatchProvidersOKResultsSI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsSI from json.
func (o *OptTvSeriesWatchProvidersOKResultsSI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsSI to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsSI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsSI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsSK as json.
func (o OptTvSeriesWatchProvidersOKResultsSK) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsSK from json.
func (o *OptTvSeriesWatchProvidersOKResultsSK) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsSK to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsSK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsSK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsSN as json.
func (o OptTvSeriesWatchProvidersOKResultsSN) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsSN from json.
func (o *OptTvSeriesWatchProvidersOKResultsSN) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsSN to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsSN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsSN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsSV as json.
func (o OptTvSeriesWatchProvidersOKResultsSV) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsSV from json.
func (o *OptTvSeriesWatchProvidersOKResultsSV) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsSV to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsSV) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsSV) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsTH as json.
func (o OptTvSeriesWatchProvidersOKResultsTH) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsTH from json.
func (o *OptTvSeriesWatchProvidersOKResultsTH) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsTH to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsTH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsTH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsTR as json.
func (o OptTvSeriesWatchProvidersOKResultsTR) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsTR from json.
func (o *OptTvSeriesWatchProvidersOKResultsTR) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsTR to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsTR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsTR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsTT as json.
func (o OptTvSeriesWatchProvidersOKResultsTT) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsTT from json.
func (o *OptTvSeriesWatchProvidersOKResultsTT) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsTT to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsTT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsTT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsTW as json.
func (o OptTvSeriesWatchProvidersOKResultsTW) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsTW from json.
func (o *OptTvSeriesWatchProvidersOKResultsTW) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsTW to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsTW) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsTW) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsTZ as json.
func (o OptTvSeriesWatchProvidersOKResultsTZ) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsTZ from json.
func (o *OptTvSeriesWatchProvidersOKResultsTZ) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsTZ to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsTZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsTZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsUG as json.
func (o OptTvSeriesWatchProvidersOKResultsUG) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsUG from json.
func (o *OptTvSeriesWatchProvidersOKResultsUG) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsUG to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsUG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsUG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsUS as json.
func (o OptTvSeriesWatchProvidersOKResultsUS) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsUS from json.
func (o *OptTvSeriesWatchProvidersOKResultsUS) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsUS to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsUS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsUS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsUY as json.
func (o OptTvSeriesWatchProvidersOKResultsUY) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsUY from json.
func (o *OptTvSeriesWatchProvidersOKResultsUY) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsUY to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsUY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsUY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsVE as json.
func (o OptTvSeriesWatchProvidersOKResultsVE) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsVE from json.
func (o *OptTvSeriesWatchProvidersOKResultsVE) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsVE to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsVE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsVE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsZA as json.
func (o OptTvSeriesWatchProvidersOKResultsZA) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsZA from json.
func (o *OptTvSeriesWatchProvidersOKResultsZA) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsZA to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsZA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsZA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TvSeriesWatchProvidersOKResultsZM as json.
func (o OptTvSeriesWatchProvidersOKResultsZM) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TvSeriesWatchProvidersOKResultsZM from json.
func (o *OptTvSeriesWatchProvidersOKResultsZM) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTvSeriesWatchProvidersOKResultsZM to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTvSeriesWatchProvidersOKResultsZM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTvSeriesWatchProvidersOKResultsZM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WatchProviderTvListOKResultsItemDisplayPriorities as json.
func (o OptWatchProviderTvListOKResultsItemDisplayPriorities) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes WatchProviderTvListOKResultsItemDisplayPriorities from json.
func (o *OptWatchProviderTvListOKResultsItemDisplayPriorities) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWatchProviderTvListOKResultsItemDisplayPriorities to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWatchProviderTvListOKResultsItemDisplayPriorities) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWatchProviderTvListOKResultsItemDisplayPriorities) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WatchProvidersMovieListOKResultsItemDisplayPriorities as json.
func (o OptWatchProvidersMovieListOKResultsItemDisplayPriorities) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes WatchProvidersMovieListOKResultsItemDisplayPriorities from json.
func (o *OptWatchProvidersMovieListOKResultsItemDisplayPriorities) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWatchProvidersMovieListOKResultsItemDisplayPriorities to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWatchProvidersMovieListOKResultsItemDisplayPriorities) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWatchProvidersMovieListOKResultsItemDisplayPriorities) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonChangesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonChangesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Changes != nil {
			e.FieldStart("changes")
			e.ArrStart()
			for _, elem := range s.Changes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPersonChangesOK = [1]string{
	0: "changes",
}

// Decode decodes PersonChangesOK from json.
func (s *PersonChangesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonChangesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "changes":
			if err := func() error {
				s.Changes = make([]PersonChangesOKChangesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PersonChangesOKChangesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Changes = append(s.Changes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"changes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonChangesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonChangesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonChangesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonChangesOKChangesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonChangesOKChangesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPersonChangesOKChangesItem = [2]string{
	0: "key",
	1: "items",
}

// Decode decodes PersonChangesOKChangesItem from json.
func (s *PersonChangesOKChangesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonChangesOKChangesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]PersonChangesOKChangesItemItemsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PersonChangesOKChangesItemItemsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonChangesOKChangesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonChangesOKChangesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonChangesOKChangesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonChangesOKChangesItemItemsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonChangesOKChangesItemItemsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.Time.Set {
			e.FieldStart("time")
			s.Time.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonChangesOKChangesItemItemsItem = [6]string{
	0: "id",
	1: "action",
	2: "time",
	3: "iso_639_1",
	4: "iso_3166_1",
	5: "value",
}

// Decode decodes PersonChangesOKChangesItemItemsItem from json.
func (s *PersonChangesOKChangesItemItemsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonChangesOKChangesItemItemsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "time":
			if err := func() error {
				s.Time.Reset()
				if err := s.Time.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonChangesOKChangesItemItemsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonChangesOKChangesItemItemsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonChangesOKChangesItemItemsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonCombinedCreditsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonCombinedCreditsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Cast != nil {
			e.FieldStart("cast")
			e.ArrStart()
			for _, elem := range s.Cast {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Crew != nil {
			e.FieldStart("crew")
			e.ArrStart()
			for _, elem := range s.Crew {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonCombinedCreditsOK = [3]string{
	0: "cast",
	1: "crew",
	2: "id",
}

// Decode decodes PersonCombinedCreditsOK from json.
func (s *PersonCombinedCreditsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonCombinedCreditsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cast":
			if err := func() error {
				s.Cast = make([]PersonCombinedCreditsOKCastItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PersonCombinedCreditsOKCastItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Cast = append(s.Cast, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cast\"")
			}
		case "crew":
			if err := func() error {
				s.Crew = make([]PersonCombinedCreditsOKCrewItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PersonCombinedCreditsOKCrewItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Crew = append(s.Crew, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"crew\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonCombinedCreditsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonCombinedCreditsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonCombinedCreditsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonCombinedCreditsOKCastItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonCombinedCreditsOKCastItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonCombinedCreditsOKCastItem = [18]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
	14: "character",
	15: "credit_id",
	16: "order",
	17: "media_type",
}

// Decode decodes PersonCombinedCreditsOKCastItem from json.
func (s *PersonCombinedCreditsOKCastItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonCombinedCreditsOKCastItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonCombinedCreditsOKCastItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonCombinedCreditsOKCastItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonCombinedCreditsOKCastItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonCombinedCreditsOKCrewItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonCombinedCreditsOKCrewItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Job.Set {
			e.FieldStart("job")
			s.Job.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonCombinedCreditsOKCrewItem = [18]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
	14: "credit_id",
	15: "department",
	16: "job",
	17: "media_type",
}

// Decode decodes PersonCombinedCreditsOKCrewItem from json.
func (s *PersonCombinedCreditsOKCrewItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonCombinedCreditsOKCrewItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "job":
			if err := func() error {
				s.Job.Reset()
				if err := s.Job.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonCombinedCreditsOKCrewItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonCombinedCreditsOKCrewItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonCombinedCreditsOKCrewItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.AlsoKnownAs != nil {
			e.FieldStart("also_known_as")
			e.ArrStart()
			for _, elem := range s.AlsoKnownAs {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Biography.Set {
			e.FieldStart("biography")
			s.Biography.Encode(e)
		}
	}
	{
		if s.Birthday.Set {
			e.FieldStart("birthday")
			s.Birthday.Encode(e)
		}
	}
	{
		if len(s.Deathday) != 0 {
			e.FieldStart("deathday")
			e.Raw(s.Deathday)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if len(s.Homepage) != 0 {
			e.FieldStart("homepage")
			e.Raw(s.Homepage)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ImdbID.Set {
			e.FieldStart("imdb_id")
			s.ImdbID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PlaceOfBirth.Set {
			e.FieldStart("place_of_birth")
			s.PlaceOfBirth.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonDetailsOK = [14]string{
	0:  "adult",
	1:  "also_known_as",
	2:  "biography",
	3:  "birthday",
	4:  "deathday",
	5:  "gender",
	6:  "homepage",
	7:  "id",
	8:  "imdb_id",
	9:  "known_for_department",
	10: "name",
	11: "place_of_birth",
	12: "popularity",
	13: "profile_path",
}

// Decode decodes PersonDetailsOK from json.
func (s *PersonDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonDetailsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "also_known_as":
			if err := func() error {
				s.AlsoKnownAs = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.AlsoKnownAs = append(s.AlsoKnownAs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"also_known_as\"")
			}
		case "biography":
			if err := func() error {
				s.Biography.Reset()
				if err := s.Biography.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"biography\"")
			}
		case "birthday":
			if err := func() error {
				s.Birthday.Reset()
				if err := s.Birthday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"birthday\"")
			}
		case "deathday":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Deathday = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deathday\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "homepage":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Homepage = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"homepage\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "imdb_id":
			if err := func() error {
				s.ImdbID.Reset()
				if err := s.ImdbID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"imdb_id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "place_of_birth":
			if err := func() error {
				s.PlaceOfBirth.Reset()
				if err := s.PlaceOfBirth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"place_of_birth\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonExternalIdsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonExternalIdsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.FreebaseMid.Set {
			e.FieldStart("freebase_mid")
			s.FreebaseMid.Encode(e)
		}
	}
	{
		if s.FreebaseID.Set {
			e.FieldStart("freebase_id")
			s.FreebaseID.Encode(e)
		}
	}
	{
		if s.ImdbID.Set {
			e.FieldStart("imdb_id")
			s.ImdbID.Encode(e)
		}
	}
	{
		if s.TvrageID.Set {
			e.FieldStart("tvrage_id")
			s.TvrageID.Encode(e)
		}
	}
	{
		if s.WikidataID.Set {
			e.FieldStart("wikidata_id")
			s.WikidataID.Encode(e)
		}
	}
	{
		if s.FacebookID.Set {
			e.FieldStart("facebook_id")
			s.FacebookID.Encode(e)
		}
	}
	{
		if s.InstagramID.Set {
			e.FieldStart("instagram_id")
			s.InstagramID.Encode(e)
		}
	}
	{
		if s.TiktokID.Set {
			e.FieldStart("tiktok_id")
			s.TiktokID.Encode(e)
		}
	}
	{
		if s.TwitterID.Set {
			e.FieldStart("twitter_id")
			s.TwitterID.Encode(e)
		}
	}
	{
		if len(s.YoutubeID) != 0 {
			e.FieldStart("youtube_id")
			e.Raw(s.YoutubeID)
		}
	}
}

var jsonFieldsNameOfPersonExternalIdsOK = [11]string{
	0:  "id",
	1:  "freebase_mid",
	2:  "freebase_id",
	3:  "imdb_id",
	4:  "tvrage_id",
	5:  "wikidata_id",
	6:  "facebook_id",
	7:  "instagram_id",
	8:  "tiktok_id",
	9:  "twitter_id",
	10: "youtube_id",
}

// Decode decodes PersonExternalIdsOK from json.
func (s *PersonExternalIdsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonExternalIdsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "freebase_mid":
			if err := func() error {
				s.FreebaseMid.Reset()
				if err := s.FreebaseMid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"freebase_mid\"")
			}
		case "freebase_id":
			if err := func() error {
				s.FreebaseID.Reset()
				if err := s.FreebaseID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"freebase_id\"")
			}
		case "imdb_id":
			if err := func() error {
				s.ImdbID.Reset()
				if err := s.ImdbID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"imdb_id\"")
			}
		case "tvrage_id":
			if err := func() error {
				s.TvrageID.Reset()
				if err := s.TvrageID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tvrage_id\"")
			}
		case "wikidata_id":
			if err := func() error {
				s.WikidataID.Reset()
				if err := s.WikidataID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wikidata_id\"")
			}
		case "facebook_id":
			if err := func() error {
				s.FacebookID.Reset()
				if err := s.FacebookID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"facebook_id\"")
			}
		case "instagram_id":
			if err := func() error {
				s.InstagramID.Reset()
				if err := s.InstagramID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"instagram_id\"")
			}
		case "tiktok_id":
			if err := func() error {
				s.TiktokID.Reset()
				if err := s.TiktokID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tiktok_id\"")
			}
		case "twitter_id":
			if err := func() error {
				s.TwitterID.Reset()
				if err := s.TwitterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"twitter_id\"")
			}
		case "youtube_id":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.YoutubeID = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"youtube_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonExternalIdsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonExternalIdsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonExternalIdsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonImagesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonImagesOK) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfPersonImagesOK = [0]string{}

// Decode decodes PersonImagesOK from json.
func (s *PersonImagesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonImagesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode PersonImagesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonImagesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonImagesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonLatestIDOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonLatestIDOK) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.AlsoKnownAs != nil {
			e.FieldStart("also_known_as")
			e.ArrStart()
			for _, elem := range s.AlsoKnownAs {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.Biography.Set {
			e.FieldStart("biography")
			s.Biography.Encode(e)
		}
	}
	{
		if len(s.Birthday) != 0 {
			e.FieldStart("birthday")
			e.Raw(s.Birthday)
		}
	}
	{
		if len(s.Deathday) != 0 {
			e.FieldStart("deathday")
			e.Raw(s.Deathday)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if len(s.Homepage) != 0 {
			e.FieldStart("homepage")
			e.Raw(s.Homepage)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if len(s.ImdbID) != 0 {
			e.FieldStart("imdb_id")
			e.Raw(s.ImdbID)
		}
	}
	{
		if len(s.KnownForDepartment) != 0 {
			e.FieldStart("known_for_department")
			e.Raw(s.KnownForDepartment)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if len(s.PlaceOfBirth) != 0 {
			e.FieldStart("place_of_birth")
			e.Raw(s.PlaceOfBirth)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonLatestIDOK = [14]string{
	0:  "adult",
	1:  "also_known_as",
	2:  "biography",
	3:  "birthday",
	4:  "deathday",
	5:  "gender",
	6:  "homepage",
	7:  "id",
	8:  "imdb_id",
	9:  "known_for_department",
	10: "name",
	11: "place_of_birth",
	12: "popularity",
	13: "profile_path",
}

// Decode decodes PersonLatestIDOK from json.
func (s *PersonLatestIDOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonLatestIDOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "also_known_as":
			if err := func() error {
				s.AlsoKnownAs = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.AlsoKnownAs = append(s.AlsoKnownAs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"also_known_as\"")
			}
		case "biography":
			if err := func() error {
				s.Biography.Reset()
				if err := s.Biography.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"biography\"")
			}
		case "birthday":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Birthday = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"birthday\"")
			}
		case "deathday":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Deathday = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deathday\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "homepage":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Homepage = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"homepage\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "imdb_id":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.ImdbID = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"imdb_id\"")
			}
		case "known_for_department":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.KnownForDepartment = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "place_of_birth":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.PlaceOfBirth = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"place_of_birth\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonLatestIDOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonLatestIDOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonLatestIDOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonMovieCreditsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonMovieCreditsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Cast != nil {
			e.FieldStart("cast")
			e.ArrStart()
			for _, elem := range s.Cast {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Crew != nil {
			e.FieldStart("crew")
			e.ArrStart()
			for _, elem := range s.Crew {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonMovieCreditsOK = [3]string{
	0: "cast",
	1: "crew",
	2: "id",
}

// Decode decodes PersonMovieCreditsOK from json.
func (s *PersonMovieCreditsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonMovieCreditsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cast":
			if err := func() error {
				s.Cast = make([]PersonMovieCreditsOKCastItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PersonMovieCreditsOKCastItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Cast = append(s.Cast, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cast\"")
			}
		case "crew":
			if err := func() error {
				s.Crew = make([]PersonMovieCreditsOKCrewItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PersonMovieCreditsOKCrewItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Crew = append(s.Crew, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"crew\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonMovieCreditsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonMovieCreditsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonMovieCreditsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonMovieCreditsOKCastItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonMovieCreditsOKCastItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonMovieCreditsOKCastItem = [17]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
	14: "character",
	15: "credit_id",
	16: "order",
}

// Decode decodes PersonMovieCreditsOKCastItem from json.
func (s *PersonMovieCreditsOKCastItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonMovieCreditsOKCastItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonMovieCreditsOKCastItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonMovieCreditsOKCastItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonMovieCreditsOKCastItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonMovieCreditsOKCrewItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonMovieCreditsOKCrewItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Job.Set {
			e.FieldStart("job")
			s.Job.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonMovieCreditsOKCrewItem = [17]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
	14: "credit_id",
	15: "department",
	16: "job",
}

// Decode decodes PersonMovieCreditsOKCrewItem from json.
func (s *PersonMovieCreditsOKCrewItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonMovieCreditsOKCrewItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "job":
			if err := func() error {
				s.Job.Reset()
				if err := s.Job.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonMovieCreditsOKCrewItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonMovieCreditsOKCrewItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonMovieCreditsOKCrewItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonPopularListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonPopularListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonPopularListOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes PersonPopularListOK from json.
func (s *PersonPopularListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonPopularListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]PersonPopularListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PersonPopularListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonPopularListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonPopularListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonPopularListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonPopularListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonPopularListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownFor != nil {
			e.FieldStart("known_for")
			e.ArrStart()
			for _, elem := range s.KnownFor {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonPopularListOKResultsItem = [8]string{
	0: "adult",
	1: "gender",
	2: "id",
	3: "known_for",
	4: "known_for_department",
	5: "name",
	6: "popularity",
	7: "profile_path",
}

// Decode decodes PersonPopularListOKResultsItem from json.
func (s *PersonPopularListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonPopularListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for":
			if err := func() error {
				s.KnownFor = make([]PersonPopularListOKResultsItemKnownForItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PersonPopularListOKResultsItemKnownForItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.KnownFor = append(s.KnownFor, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonPopularListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonPopularListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonPopularListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonPopularListOKResultsItemKnownForItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonPopularListOKResultsItemKnownForItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonPopularListOKResultsItemKnownForItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "media_type",
	5:  "original_language",
	6:  "original_title",
	7:  "overview",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes PersonPopularListOKResultsItemKnownForItem from json.
func (s *PersonPopularListOKResultsItemKnownForItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonPopularListOKResultsItemKnownForItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonPopularListOKResultsItemKnownForItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonPopularListOKResultsItemKnownForItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonPopularListOKResultsItemKnownForItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonTaggedImagesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonTaggedImagesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonTaggedImagesOK = [5]string{
	0: "id",
	1: "page",
	2: "results",
	3: "total_pages",
	4: "total_results",
}

// Decode decodes PersonTaggedImagesOK from json.
func (s *PersonTaggedImagesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonTaggedImagesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]PersonTaggedImagesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PersonTaggedImagesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonTaggedImagesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonTaggedImagesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonTaggedImagesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonTaggedImagesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonTaggedImagesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
	{
		if s.ImageType.Set {
			e.FieldStart("image_type")
			s.ImageType.Encode(e)
		}
	}
	{
		if s.Media.Set {
			e.FieldStart("media")
			s.Media.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonTaggedImagesOKResultsItem = [11]string{
	0:  "aspect_ratio",
	1:  "file_path",
	2:  "height",
	3:  "id",
	4:  "iso_639_1",
	5:  "vote_average",
	6:  "vote_count",
	7:  "width",
	8:  "image_type",
	9:  "media",
	10: "media_type",
}

// Decode decodes PersonTaggedImagesOKResultsItem from json.
func (s *PersonTaggedImagesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonTaggedImagesOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		case "image_type":
			if err := func() error {
				s.ImageType.Reset()
				if err := s.ImageType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"image_type\"")
			}
		case "media":
			if err := func() error {
				s.Media.Reset()
				if err := s.Media.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonTaggedImagesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonTaggedImagesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonTaggedImagesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonTaggedImagesOKResultsItemMedia) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonTaggedImagesOKResultsItemMedia) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonTaggedImagesOKResultsItemMedia = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "id",
	3:  "title",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "poster_path",
	8:  "media_type",
	9:  "genre_ids",
	10: "popularity",
	11: "release_date",
	12: "video",
	13: "vote_average",
	14: "vote_count",
}

// Decode decodes PersonTaggedImagesOKResultsItemMedia from json.
func (s *PersonTaggedImagesOKResultsItemMedia) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonTaggedImagesOKResultsItemMedia to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonTaggedImagesOKResultsItemMedia")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonTaggedImagesOKResultsItemMedia) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonTaggedImagesOKResultsItemMedia) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonTvCreditsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonTvCreditsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Cast != nil {
			e.FieldStart("cast")
			e.ArrStart()
			for _, elem := range s.Cast {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Crew != nil {
			e.FieldStart("crew")
			e.ArrStart()
			for _, elem := range s.Crew {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonTvCreditsOK = [3]string{
	0: "cast",
	1: "crew",
	2: "id",
}

// Decode decodes PersonTvCreditsOK from json.
func (s *PersonTvCreditsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonTvCreditsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cast":
			if err := func() error {
				s.Cast = make([]PersonTvCreditsOKCastItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PersonTvCreditsOKCastItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Cast = append(s.Cast, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cast\"")
			}
		case "crew":
			if err := func() error {
				s.Crew = make([]PersonTvCreditsOKCrewItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PersonTvCreditsOKCrewItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Crew = append(s.Crew, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"crew\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonTvCreditsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonTvCreditsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonTvCreditsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonTvCreditsOKCastItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonTvCreditsOKCastItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.EpisodeCount.Set {
			e.FieldStart("episode_count")
			s.EpisodeCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonTvCreditsOKCastItem = [17]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "origin_country",
	5:  "original_language",
	6:  "original_name",
	7:  "overview",
	8:  "popularity",
	9:  "poster_path",
	10: "first_air_date",
	11: "name",
	12: "vote_average",
	13: "vote_count",
	14: "character",
	15: "credit_id",
	16: "episode_count",
}

// Decode decodes PersonTvCreditsOKCastItem from json.
func (s *PersonTvCreditsOKCastItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonTvCreditsOKCastItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "episode_count":
			if err := func() error {
				s.EpisodeCount.Reset()
				if err := s.EpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonTvCreditsOKCastItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonTvCreditsOKCastItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonTvCreditsOKCastItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PersonTvCreditsOKCrewItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PersonTvCreditsOKCrewItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.EpisodeCount.Set {
			e.FieldStart("episode_count")
			s.EpisodeCount.Encode(e)
		}
	}
	{
		if s.Job.Set {
			e.FieldStart("job")
			s.Job.Encode(e)
		}
	}
}

var jsonFieldsNameOfPersonTvCreditsOKCrewItem = [18]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "origin_country",
	5:  "original_language",
	6:  "original_name",
	7:  "overview",
	8:  "popularity",
	9:  "poster_path",
	10: "first_air_date",
	11: "name",
	12: "vote_average",
	13: "vote_count",
	14: "credit_id",
	15: "department",
	16: "episode_count",
	17: "job",
}

// Decode decodes PersonTvCreditsOKCrewItem from json.
func (s *PersonTvCreditsOKCrewItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PersonTvCreditsOKCrewItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "episode_count":
			if err := func() error {
				s.EpisodeCount.Reset()
				if err := s.EpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_count\"")
			}
		case "job":
			if err := func() error {
				s.Job.Reset()
				if err := s.Job.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PersonTvCreditsOKCrewItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PersonTvCreditsOKCrewItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PersonTvCreditsOKCrewItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ReviewDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ReviewDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Author.Set {
			e.FieldStart("author")
			s.Author.Encode(e)
		}
	}
	{
		if s.AuthorDetails.Set {
			e.FieldStart("author_details")
			s.AuthorDetails.Encode(e)
		}
	}
	{
		if s.Content.Set {
			e.FieldStart("content")
			s.Content.Encode(e)
		}
	}
	{
		if s.CreatedAt.Set {
			e.FieldStart("created_at")
			s.CreatedAt.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.MediaID.Set {
			e.FieldStart("media_id")
			s.MediaID.Encode(e)
		}
	}
	{
		if s.MediaTitle.Set {
			e.FieldStart("media_title")
			s.MediaTitle.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.UpdatedAt.Set {
			e.FieldStart("updated_at")
			s.UpdatedAt.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
}

var jsonFieldsNameOfReviewDetailsOK = [11]string{
	0:  "id",
	1:  "author",
	2:  "author_details",
	3:  "content",
	4:  "created_at",
	5:  "iso_639_1",
	6:  "media_id",
	7:  "media_title",
	8:  "media_type",
	9:  "updated_at",
	10: "url",
}

// Decode decodes ReviewDetailsOK from json.
func (s *ReviewDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReviewDetailsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "author":
			if err := func() error {
				s.Author.Reset()
				if err := s.Author.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"author\"")
			}
		case "author_details":
			if err := func() error {
				s.AuthorDetails.Reset()
				if err := s.AuthorDetails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"author_details\"")
			}
		case "content":
			if err := func() error {
				s.Content.Reset()
				if err := s.Content.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content\"")
			}
		case "created_at":
			if err := func() error {
				s.CreatedAt.Reset()
				if err := s.CreatedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_at\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "media_id":
			if err := func() error {
				s.MediaID.Reset()
				if err := s.MediaID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_id\"")
			}
		case "media_title":
			if err := func() error {
				s.MediaTitle.Reset()
				if err := s.MediaTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_title\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "updated_at":
			if err := func() error {
				s.UpdatedAt.Reset()
				if err := s.UpdatedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated_at\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ReviewDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ReviewDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReviewDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ReviewDetailsOKAuthorDetails) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ReviewDetailsOKAuthorDetails) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
	{
		if s.AvatarPath.Set {
			e.FieldStart("avatar_path")
			s.AvatarPath.Encode(e)
		}
	}
	{
		if s.Rating.Set {
			e.FieldStart("rating")
			s.Rating.Encode(e)
		}
	}
}

var jsonFieldsNameOfReviewDetailsOKAuthorDetails = [4]string{
	0: "name",
	1: "username",
	2: "avatar_path",
	3: "rating",
}

// Decode decodes ReviewDetailsOKAuthorDetails from json.
func (s *ReviewDetailsOKAuthorDetails) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReviewDetailsOKAuthorDetails to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		case "avatar_path":
			if err := func() error {
				s.AvatarPath.Reset()
				if err := s.AvatarPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"avatar_path\"")
			}
		case "rating":
			if err := func() error {
				s.Rating.Reset()
				if err := s.Rating.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rating\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ReviewDetailsOKAuthorDetails")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ReviewDetailsOKAuthorDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReviewDetailsOKAuthorDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchCollectionOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchCollectionOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchCollectionOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes SearchCollectionOK from json.
func (s *SearchCollectionOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchCollectionOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]SearchCollectionOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SearchCollectionOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchCollectionOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchCollectionOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchCollectionOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchCollectionOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchCollectionOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchCollectionOKResultsItem = [8]string{
	0: "adult",
	1: "backdrop_path",
	2: "id",
	3: "name",
	4: "original_language",
	5: "original_name",
	6: "overview",
	7: "poster_path",
}

// Decode decodes SearchCollectionOKResultsItem from json.
func (s *SearchCollectionOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchCollectionOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchCollectionOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchCollectionOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchCollectionOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchCompanyOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchCompanyOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchCompanyOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes SearchCompanyOK from json.
func (s *SearchCompanyOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchCompanyOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]SearchCompanyOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SearchCompanyOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchCompanyOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchCompanyOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchCompanyOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchCompanyOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchCompanyOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry.Set {
			e.FieldStart("origin_country")
			s.OriginCountry.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchCompanyOKResultsItem = [4]string{
	0: "id",
	1: "logo_path",
	2: "name",
	3: "origin_country",
}

// Decode decodes SearchCompanyOKResultsItem from json.
func (s *SearchCompanyOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchCompanyOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry.Reset()
				if err := s.OriginCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchCompanyOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchCompanyOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchCompanyOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchKeywordOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchKeywordOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchKeywordOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes SearchKeywordOK from json.
func (s *SearchKeywordOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchKeywordOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]SearchKeywordOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SearchKeywordOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchKeywordOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchKeywordOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchKeywordOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchKeywordOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchKeywordOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchKeywordOKResultsItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes SearchKeywordOKResultsItem from json.
func (s *SearchKeywordOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchKeywordOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchKeywordOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchKeywordOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchKeywordOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchMovieOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchMovieOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchMovieOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes SearchMovieOK from json.
func (s *SearchMovieOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchMovieOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]SearchMovieOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SearchMovieOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchMovieOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchMovieOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchMovieOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchMovieOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchMovieOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchMovieOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "popularity",
	8:  "poster_path",
	9:  "release_date",
	10: "title",
	11: "video",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes SearchMovieOKResultsItem from json.
func (s *SearchMovieOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchMovieOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchMovieOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchMovieOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchMovieOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchMultiOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchMultiOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchMultiOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes SearchMultiOK from json.
func (s *SearchMultiOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchMultiOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]SearchMultiOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SearchMultiOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchMultiOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchMultiOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchMultiOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchMultiOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchMultiOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchMultiOKResultsItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "id",
	3:  "title",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "poster_path",
	8:  "media_type",
	9:  "genre_ids",
	10: "popularity",
	11: "release_date",
	12: "video",
	13: "vote_average",
	14: "vote_count",
}

// Decode decodes SearchMultiOKResultsItem from json.
func (s *SearchMultiOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchMultiOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchMultiOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchMultiOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchMultiOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchPersonOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchPersonOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchPersonOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes SearchPersonOK from json.
func (s *SearchPersonOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchPersonOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]SearchPersonOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SearchPersonOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchPersonOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchPersonOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchPersonOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchPersonOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchPersonOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.KnownFor != nil {
			e.FieldStart("known_for")
			e.ArrStart()
			for _, elem := range s.KnownFor {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfSearchPersonOKResultsItem = [9]string{
	0: "adult",
	1: "gender",
	2: "id",
	3: "known_for_department",
	4: "name",
	5: "original_name",
	6: "popularity",
	7: "profile_path",
	8: "known_for",
}

// Decode decodes SearchPersonOKResultsItem from json.
func (s *SearchPersonOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchPersonOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "known_for":
			if err := func() error {
				s.KnownFor = make([]SearchPersonOKResultsItemKnownForItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SearchPersonOKResultsItemKnownForItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.KnownFor = append(s.KnownFor, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchPersonOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchPersonOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchPersonOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchPersonOKResultsItemKnownForItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchPersonOKResultsItemKnownForItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchPersonOKResultsItemKnownForItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "id",
	3:  "title",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "poster_path",
	8:  "media_type",
	9:  "genre_ids",
	10: "popularity",
	11: "release_date",
	12: "video",
	13: "vote_average",
	14: "vote_count",
}

// Decode decodes SearchPersonOKResultsItemKnownForItem from json.
func (s *SearchPersonOKResultsItemKnownForItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchPersonOKResultsItemKnownForItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchPersonOKResultsItemKnownForItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchPersonOKResultsItemKnownForItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchPersonOKResultsItemKnownForItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchTvOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchTvOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchTvOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes SearchTvOK from json.
func (s *SearchTvOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchTvOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]SearchTvOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SearchTvOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchTvOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchTvOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchTvOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchTvOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchTvOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchTvOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "origin_country",
	5:  "original_language",
	6:  "original_name",
	7:  "overview",
	8:  "popularity",
	9:  "poster_path",
	10: "first_air_date",
	11: "name",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes SearchTvOKResultsItem from json.
func (s *SearchTvOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchTvOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchTvOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchTvOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchTvOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TranslationsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TranslationsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Translations != nil {
			e.FieldStart("translations")
			e.ArrStart()
			for _, elem := range s.Translations {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTranslationsOK = [2]string{
	0: "id",
	1: "translations",
}

// Decode decodes TranslationsOK from json.
func (s *TranslationsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TranslationsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "translations":
			if err := func() error {
				s.Translations = make([]TranslationsOKTranslationsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TranslationsOKTranslationsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Translations = append(s.Translations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translations\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TranslationsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TranslationsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TranslationsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TranslationsOKTranslationsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TranslationsOKTranslationsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.EnglishName.Set {
			e.FieldStart("english_name")
			s.EnglishName.Encode(e)
		}
	}
	{
		if s.Data.Set {
			e.FieldStart("data")
			s.Data.Encode(e)
		}
	}
}

var jsonFieldsNameOfTranslationsOKTranslationsItem = [5]string{
	0: "iso_3166_1",
	1: "iso_639_1",
	2: "name",
	3: "english_name",
	4: "data",
}

// Decode decodes TranslationsOKTranslationsItem from json.
func (s *TranslationsOKTranslationsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TranslationsOKTranslationsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "english_name":
			if err := func() error {
				s.EnglishName.Reset()
				if err := s.EnglishName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"english_name\"")
			}
		case "data":
			if err := func() error {
				s.Data.Reset()
				if err := s.Data.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TranslationsOKTranslationsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TranslationsOKTranslationsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TranslationsOKTranslationsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TranslationsOKTranslationsItemData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TranslationsOKTranslationsItemData) encodeFields(e *jx.Encoder) {
	{
		if s.Biography.Set {
			e.FieldStart("biography")
			s.Biography.Encode(e)
		}
	}
}

var jsonFieldsNameOfTranslationsOKTranslationsItemData = [1]string{
	0: "biography",
}

// Decode decodes TranslationsOKTranslationsItemData from json.
func (s *TranslationsOKTranslationsItemData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TranslationsOKTranslationsItemData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "biography":
			if err := func() error {
				s.Biography.Reset()
				if err := s.Biography.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"biography\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TranslationsOKTranslationsItemData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TranslationsOKTranslationsItemData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TranslationsOKTranslationsItemData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TrendingAllOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TrendingAllOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfTrendingAllOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes TrendingAllOK from json.
func (s *TrendingAllOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TrendingAllOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TrendingAllOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TrendingAllOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TrendingAllOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TrendingAllOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TrendingAllOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TrendingAllOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TrendingAllOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTrendingAllOKResultsItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "id",
	3:  "title",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "poster_path",
	8:  "media_type",
	9:  "genre_ids",
	10: "popularity",
	11: "release_date",
	12: "video",
	13: "vote_average",
	14: "vote_count",
}

// Decode decodes TrendingAllOKResultsItem from json.
func (s *TrendingAllOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TrendingAllOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TrendingAllOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TrendingAllOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TrendingAllOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TrendingMoviesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TrendingMoviesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfTrendingMoviesOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes TrendingMoviesOK from json.
func (s *TrendingMoviesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TrendingMoviesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TrendingMoviesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TrendingMoviesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TrendingMoviesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TrendingMoviesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TrendingMoviesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TrendingMoviesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TrendingMoviesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTrendingMoviesOKResultsItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "id",
	3:  "title",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "poster_path",
	8:  "media_type",
	9:  "genre_ids",
	10: "popularity",
	11: "release_date",
	12: "video",
	13: "vote_average",
	14: "vote_count",
}

// Decode decodes TrendingMoviesOKResultsItem from json.
func (s *TrendingMoviesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TrendingMoviesOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TrendingMoviesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TrendingMoviesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TrendingMoviesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TrendingPeopleOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TrendingPeopleOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfTrendingPeopleOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes TrendingPeopleOK from json.
func (s *TrendingPeopleOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TrendingPeopleOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TrendingPeopleOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TrendingPeopleOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TrendingPeopleOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TrendingPeopleOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TrendingPeopleOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TrendingPeopleOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TrendingPeopleOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.KnownFor != nil {
			e.FieldStart("known_for")
			e.ArrStart()
			for _, elem := range s.KnownFor {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTrendingPeopleOKResultsItem = [10]string{
	0: "adult",
	1: "id",
	2: "name",
	3: "original_name",
	4: "media_type",
	5: "popularity",
	6: "gender",
	7: "known_for_department",
	8: "profile_path",
	9: "known_for",
}

// Decode decodes TrendingPeopleOKResultsItem from json.
func (s *TrendingPeopleOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TrendingPeopleOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "known_for":
			if err := func() error {
				s.KnownFor = make([]TrendingPeopleOKResultsItemKnownForItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TrendingPeopleOKResultsItemKnownForItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.KnownFor = append(s.KnownFor, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TrendingPeopleOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TrendingPeopleOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TrendingPeopleOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TrendingPeopleOKResultsItemKnownForItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TrendingPeopleOKResultsItemKnownForItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalTitle.Set {
			e.FieldStart("original_title")
			s.OriginalTitle.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ReleaseDate.Set {
			e.FieldStart("release_date")
			s.ReleaseDate.Encode(e)
		}
	}
	{
		if s.Video.Set {
			e.FieldStart("video")
			s.Video.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTrendingPeopleOKResultsItemKnownForItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "id",
	3:  "title",
	4:  "original_language",
	5:  "original_title",
	6:  "overview",
	7:  "poster_path",
	8:  "media_type",
	9:  "genre_ids",
	10: "popularity",
	11: "release_date",
	12: "video",
	13: "vote_average",
	14: "vote_count",
}

// Decode decodes TrendingPeopleOKResultsItemKnownForItem from json.
func (s *TrendingPeopleOKResultsItemKnownForItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TrendingPeopleOKResultsItemKnownForItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_title":
			if err := func() error {
				s.OriginalTitle.Reset()
				if err := s.OriginalTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_title\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "release_date":
			if err := func() error {
				s.ReleaseDate.Reset()
				if err := s.ReleaseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release_date\"")
			}
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"video\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TrendingPeopleOKResultsItemKnownForItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TrendingPeopleOKResultsItemKnownForItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TrendingPeopleOKResultsItemKnownForItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TrendingTvOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TrendingTvOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfTrendingTvOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes TrendingTvOK from json.
func (s *TrendingTvOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TrendingTvOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TrendingTvOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TrendingTvOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TrendingTvOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TrendingTvOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TrendingTvOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TrendingTvOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TrendingTvOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTrendingTvOKResultsItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "id",
	3:  "name",
	4:  "original_language",
	5:  "original_name",
	6:  "overview",
	7:  "poster_path",
	8:  "media_type",
	9:  "genre_ids",
	10: "popularity",
	11: "first_air_date",
	12: "vote_average",
	13: "vote_count",
	14: "origin_country",
}

// Decode decodes TrendingTvOKResultsItem from json.
func (s *TrendingTvOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TrendingTvOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TrendingTvOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TrendingTvOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TrendingTvOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeAccountStatesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeAccountStatesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Favorite.Set {
			e.FieldStart("favorite")
			s.Favorite.Encode(e)
		}
	}
	{
		if s.Rated.Set {
			e.FieldStart("rated")
			s.Rated.Encode(e)
		}
	}
	{
		if s.Watchlist.Set {
			e.FieldStart("watchlist")
			s.Watchlist.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeAccountStatesOK = [4]string{
	0: "id",
	1: "favorite",
	2: "rated",
	3: "watchlist",
}

// Decode decodes TvEpisodeAccountStatesOK from json.
func (s *TvEpisodeAccountStatesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeAccountStatesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "favorite":
			if err := func() error {
				s.Favorite.Reset()
				if err := s.Favorite.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"favorite\"")
			}
		case "rated":
			if err := func() error {
				s.Rated.Reset()
				if err := s.Rated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rated\"")
			}
		case "watchlist":
			if err := func() error {
				s.Watchlist.Reset()
				if err := s.Watchlist.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"watchlist\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeAccountStatesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeAccountStatesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeAccountStatesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeAccountStatesOKRated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeAccountStatesOKRated) encodeFields(e *jx.Encoder) {
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeAccountStatesOKRated = [1]string{
	0: "value",
}

// Decode decodes TvEpisodeAccountStatesOKRated from json.
func (s *TvEpisodeAccountStatesOKRated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeAccountStatesOKRated to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeAccountStatesOKRated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeAccountStatesOKRated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeAccountStatesOKRated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeAddRatingOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeAddRatingOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeAddRatingOK = [2]string{
	0: "status_code",
	1: "status_message",
}

// Decode decodes TvEpisodeAddRatingOK from json.
func (s *TvEpisodeAddRatingOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeAddRatingOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeAddRatingOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeAddRatingOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeAddRatingOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeAddRatingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeAddRatingReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("RAW_BODY")
		e.Str(s.RAWBODY)
	}
}

var jsonFieldsNameOfTvEpisodeAddRatingReq = [1]string{
	0: "RAW_BODY",
}

// Decode decodes TvEpisodeAddRatingReq from json.
func (s *TvEpisodeAddRatingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeAddRatingReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "RAW_BODY":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RAWBODY = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RAW_BODY\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeAddRatingReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfTvEpisodeAddRatingReq) {
					name = jsonFieldsNameOfTvEpisodeAddRatingReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeAddRatingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeAddRatingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeChangesByIDOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeChangesByIDOK) encodeFields(e *jx.Encoder) {
	{
		if s.Changes != nil {
			e.FieldStart("changes")
			e.ArrStart()
			for _, elem := range s.Changes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvEpisodeChangesByIDOK = [1]string{
	0: "changes",
}

// Decode decodes TvEpisodeChangesByIDOK from json.
func (s *TvEpisodeChangesByIDOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeChangesByIDOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "changes":
			if err := func() error {
				s.Changes = make([]TvEpisodeChangesByIDOKChangesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvEpisodeChangesByIDOKChangesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Changes = append(s.Changes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"changes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeChangesByIDOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeChangesByIDOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeChangesByIDOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeChangesByIDOKChangesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeChangesByIDOKChangesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvEpisodeChangesByIDOKChangesItem = [2]string{
	0: "key",
	1: "items",
}

// Decode decodes TvEpisodeChangesByIDOKChangesItem from json.
func (s *TvEpisodeChangesByIDOKChangesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeChangesByIDOKChangesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]TvEpisodeChangesByIDOKChangesItemItemsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvEpisodeChangesByIDOKChangesItemItemsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeChangesByIDOKChangesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeChangesByIDOKChangesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeChangesByIDOKChangesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeChangesByIDOKChangesItemItemsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeChangesByIDOKChangesItemItemsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.Time.Set {
			e.FieldStart("time")
			s.Time.Encode(e)
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeChangesByIDOKChangesItemItemsItem = [4]string{
	0: "id",
	1: "action",
	2: "time",
	3: "value",
}

// Decode decodes TvEpisodeChangesByIDOKChangesItemItemsItem from json.
func (s *TvEpisodeChangesByIDOKChangesItemItemsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeChangesByIDOKChangesItemItemsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "time":
			if err := func() error {
				s.Time.Reset()
				if err := s.Time.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeChangesByIDOKChangesItemItemsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeChangesByIDOKChangesItemItemsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeChangesByIDOKChangesItemItemsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeCreditsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeCreditsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Cast != nil {
			e.FieldStart("cast")
			e.ArrStart()
			for _, elem := range s.Cast {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Crew != nil {
			e.FieldStart("crew")
			e.ArrStart()
			for _, elem := range s.Crew {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.GuestStars != nil {
			e.FieldStart("guest_stars")
			e.ArrStart()
			for _, elem := range s.GuestStars {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeCreditsOK = [4]string{
	0: "cast",
	1: "crew",
	2: "guest_stars",
	3: "id",
}

// Decode decodes TvEpisodeCreditsOK from json.
func (s *TvEpisodeCreditsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeCreditsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cast":
			if err := func() error {
				s.Cast = make([]TvEpisodeCreditsOKCastItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvEpisodeCreditsOKCastItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Cast = append(s.Cast, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cast\"")
			}
		case "crew":
			if err := func() error {
				s.Crew = make([]TvEpisodeCreditsOKCrewItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvEpisodeCreditsOKCrewItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Crew = append(s.Crew, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"crew\"")
			}
		case "guest_stars":
			if err := func() error {
				s.GuestStars = make([]TvEpisodeCreditsOKGuestStarsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvEpisodeCreditsOKGuestStarsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.GuestStars = append(s.GuestStars, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guest_stars\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeCreditsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeCreditsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeCreditsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeCreditsOKCastItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeCreditsOKCastItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeCreditsOKCastItem = [11]string{
	0:  "adult",
	1:  "gender",
	2:  "id",
	3:  "known_for_department",
	4:  "name",
	5:  "original_name",
	6:  "popularity",
	7:  "profile_path",
	8:  "character",
	9:  "credit_id",
	10: "order",
}

// Decode decodes TvEpisodeCreditsOKCastItem from json.
func (s *TvEpisodeCreditsOKCastItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeCreditsOKCastItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeCreditsOKCastItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeCreditsOKCastItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeCreditsOKCastItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeCreditsOKCrewItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeCreditsOKCrewItem) encodeFields(e *jx.Encoder) {
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Job.Set {
			e.FieldStart("job")
			s.Job.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeCreditsOKCrewItem = [11]string{
	0:  "department",
	1:  "job",
	2:  "credit_id",
	3:  "adult",
	4:  "gender",
	5:  "id",
	6:  "known_for_department",
	7:  "name",
	8:  "original_name",
	9:  "popularity",
	10: "profile_path",
}

// Decode decodes TvEpisodeCreditsOKCrewItem from json.
func (s *TvEpisodeCreditsOKCrewItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeCreditsOKCrewItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "job":
			if err := func() error {
				s.Job.Reset()
				if err := s.Job.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeCreditsOKCrewItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeCreditsOKCrewItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeCreditsOKCrewItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeCreditsOKGuestStarsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeCreditsOKGuestStarsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeCreditsOKGuestStarsItem = [11]string{
	0:  "character",
	1:  "credit_id",
	2:  "order",
	3:  "adult",
	4:  "gender",
	5:  "id",
	6:  "known_for_department",
	7:  "name",
	8:  "original_name",
	9:  "popularity",
	10: "profile_path",
}

// Decode decodes TvEpisodeCreditsOKGuestStarsItem from json.
func (s *TvEpisodeCreditsOKGuestStarsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeCreditsOKGuestStarsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeCreditsOKGuestStarsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeCreditsOKGuestStarsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeCreditsOKGuestStarsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeDeleteRatingOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeDeleteRatingOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeDeleteRatingOK = [2]string{
	0: "status_code",
	1: "status_message",
}

// Decode decodes TvEpisodeDeleteRatingOK from json.
func (s *TvEpisodeDeleteRatingOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeDeleteRatingOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeDeleteRatingOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeDeleteRatingOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeDeleteRatingOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.AirDate.Set {
			e.FieldStart("air_date")
			s.AirDate.Encode(e)
		}
	}
	{
		if s.Crew != nil {
			e.FieldStart("crew")
			e.ArrStart()
			for _, elem := range s.Crew {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.EpisodeNumber.Set {
			e.FieldStart("episode_number")
			s.EpisodeNumber.Encode(e)
		}
	}
	{
		if s.GuestStars != nil {
			e.FieldStart("guest_stars")
			e.ArrStart()
			for _, elem := range s.GuestStars {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ProductionCode.Set {
			e.FieldStart("production_code")
			s.ProductionCode.Encode(e)
		}
	}
	{
		if s.Runtime.Set {
			e.FieldStart("runtime")
			s.Runtime.Encode(e)
		}
	}
	{
		if s.SeasonNumber.Set {
			e.FieldStart("season_number")
			s.SeasonNumber.Encode(e)
		}
	}
	{
		if s.StillPath.Set {
			e.FieldStart("still_path")
			s.StillPath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeDetailsOK = [13]string{
	0:  "air_date",
	1:  "crew",
	2:  "episode_number",
	3:  "guest_stars",
	4:  "name",
	5:  "overview",
	6:  "id",
	7:  "production_code",
	8:  "runtime",
	9:  "season_number",
	10: "still_path",
	11: "vote_average",
	12: "vote_count",
}

// Decode decodes TvEpisodeDetailsOK from json.
func (s *TvEpisodeDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeDetailsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "air_date":
			if err := func() error {
				s.AirDate.Reset()
				if err := s.AirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"air_date\"")
			}
		case "crew":
			if err := func() error {
				s.Crew = make([]TvEpisodeDetailsOKCrewItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvEpisodeDetailsOKCrewItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Crew = append(s.Crew, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"crew\"")
			}
		case "episode_number":
			if err := func() error {
				s.EpisodeNumber.Reset()
				if err := s.EpisodeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_number\"")
			}
		case "guest_stars":
			if err := func() error {
				s.GuestStars = make([]TvEpisodeDetailsOKGuestStarsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvEpisodeDetailsOKGuestStarsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.GuestStars = append(s.GuestStars, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guest_stars\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "production_code":
			if err := func() error {
				s.ProductionCode.Reset()
				if err := s.ProductionCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_code\"")
			}
		case "runtime":
			if err := func() error {
				s.Runtime.Reset()
				if err := s.Runtime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runtime\"")
			}
		case "season_number":
			if err := func() error {
				s.SeasonNumber.Reset()
				if err := s.SeasonNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"season_number\"")
			}
		case "still_path":
			if err := func() error {
				s.StillPath.Reset()
				if err := s.StillPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"still_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeDetailsOKCrewItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeDetailsOKCrewItem) encodeFields(e *jx.Encoder) {
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Job.Set {
			e.FieldStart("job")
			s.Job.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeDetailsOKCrewItem = [11]string{
	0:  "department",
	1:  "job",
	2:  "credit_id",
	3:  "adult",
	4:  "gender",
	5:  "id",
	6:  "known_for_department",
	7:  "name",
	8:  "original_name",
	9:  "popularity",
	10: "profile_path",
}

// Decode decodes TvEpisodeDetailsOKCrewItem from json.
func (s *TvEpisodeDetailsOKCrewItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeDetailsOKCrewItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "job":
			if err := func() error {
				s.Job.Reset()
				if err := s.Job.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeDetailsOKCrewItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeDetailsOKCrewItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeDetailsOKCrewItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeDetailsOKGuestStarsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeDetailsOKGuestStarsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeDetailsOKGuestStarsItem = [11]string{
	0:  "character",
	1:  "credit_id",
	2:  "order",
	3:  "adult",
	4:  "gender",
	5:  "id",
	6:  "known_for_department",
	7:  "name",
	8:  "original_name",
	9:  "popularity",
	10: "profile_path",
}

// Decode decodes TvEpisodeDetailsOKGuestStarsItem from json.
func (s *TvEpisodeDetailsOKGuestStarsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeDetailsOKGuestStarsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeDetailsOKGuestStarsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeDetailsOKGuestStarsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeDetailsOKGuestStarsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeExternalIdsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeExternalIdsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ImdbID.Set {
			e.FieldStart("imdb_id")
			s.ImdbID.Encode(e)
		}
	}
	{
		if s.FreebaseMid.Set {
			e.FieldStart("freebase_mid")
			s.FreebaseMid.Encode(e)
		}
	}
	{
		if s.FreebaseID.Set {
			e.FieldStart("freebase_id")
			s.FreebaseID.Encode(e)
		}
	}
	{
		if s.TvdbID.Set {
			e.FieldStart("tvdb_id")
			s.TvdbID.Encode(e)
		}
	}
	{
		if s.TvrageID.Set {
			e.FieldStart("tvrage_id")
			s.TvrageID.Encode(e)
		}
	}
	{
		if s.WikidataID.Set {
			e.FieldStart("wikidata_id")
			s.WikidataID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeExternalIdsOK = [7]string{
	0: "id",
	1: "imdb_id",
	2: "freebase_mid",
	3: "freebase_id",
	4: "tvdb_id",
	5: "tvrage_id",
	6: "wikidata_id",
}

// Decode decodes TvEpisodeExternalIdsOK from json.
func (s *TvEpisodeExternalIdsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeExternalIdsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "imdb_id":
			if err := func() error {
				s.ImdbID.Reset()
				if err := s.ImdbID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"imdb_id\"")
			}
		case "freebase_mid":
			if err := func() error {
				s.FreebaseMid.Reset()
				if err := s.FreebaseMid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"freebase_mid\"")
			}
		case "freebase_id":
			if err := func() error {
				s.FreebaseID.Reset()
				if err := s.FreebaseID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"freebase_id\"")
			}
		case "tvdb_id":
			if err := func() error {
				s.TvdbID.Reset()
				if err := s.TvdbID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tvdb_id\"")
			}
		case "tvrage_id":
			if err := func() error {
				s.TvrageID.Reset()
				if err := s.TvrageID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tvrage_id\"")
			}
		case "wikidata_id":
			if err := func() error {
				s.WikidataID.Reset()
				if err := s.WikidataID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wikidata_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeExternalIdsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeExternalIdsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeExternalIdsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeGroupDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeGroupDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.EpisodeCount.Set {
			e.FieldStart("episode_count")
			s.EpisodeCount.Encode(e)
		}
	}
	{
		if s.GroupCount.Set {
			e.FieldStart("group_count")
			s.GroupCount.Encode(e)
		}
	}
	{
		if s.Groups != nil {
			e.FieldStart("groups")
			e.ArrStart()
			for _, elem := range s.Groups {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Network.Set {
			e.FieldStart("network")
			s.Network.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeGroupDetailsOK = [8]string{
	0: "description",
	1: "episode_count",
	2: "group_count",
	3: "groups",
	4: "id",
	5: "name",
	6: "network",
	7: "type",
}

// Decode decodes TvEpisodeGroupDetailsOK from json.
func (s *TvEpisodeGroupDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeGroupDetailsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "episode_count":
			if err := func() error {
				s.EpisodeCount.Reset()
				if err := s.EpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_count\"")
			}
		case "group_count":
			if err := func() error {
				s.GroupCount.Reset()
				if err := s.GroupCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_count\"")
			}
		case "groups":
			if err := func() error {
				s.Groups = make([]TvEpisodeGroupDetailsOKGroupsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvEpisodeGroupDetailsOKGroupsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Groups = append(s.Groups, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"groups\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "network":
			if err := func() error {
				s.Network.Reset()
				if err := s.Network.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"network\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeGroupDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeGroupDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeGroupDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeGroupDetailsOKGroupsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeGroupDetailsOKGroupsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
	{
		if s.Episodes != nil {
			e.FieldStart("episodes")
			e.ArrStart()
			for _, elem := range s.Episodes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Locked.Set {
			e.FieldStart("locked")
			s.Locked.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeGroupDetailsOKGroupsItem = [5]string{
	0: "id",
	1: "name",
	2: "order",
	3: "episodes",
	4: "locked",
}

// Decode decodes TvEpisodeGroupDetailsOKGroupsItem from json.
func (s *TvEpisodeGroupDetailsOKGroupsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeGroupDetailsOKGroupsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "episodes":
			if err := func() error {
				s.Episodes = make([]TvEpisodeGroupDetailsOKGroupsItemEpisodesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvEpisodeGroupDetailsOKGroupsItemEpisodesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Episodes = append(s.Episodes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episodes\"")
			}
		case "locked":
			if err := func() error {
				s.Locked.Reset()
				if err := s.Locked.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locked\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeGroupDetailsOKGroupsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeGroupDetailsOKGroupsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeGroupDetailsOKGroupsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeGroupDetailsOKGroupsItemEpisodesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeGroupDetailsOKGroupsItemEpisodesItem) encodeFields(e *jx.Encoder) {
	{
		if s.AirDate.Set {
			e.FieldStart("air_date")
			s.AirDate.Encode(e)
		}
	}
	{
		if s.EpisodeNumber.Set {
			e.FieldStart("episode_number")
			s.EpisodeNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.ProductionCode.Set {
			e.FieldStart("production_code")
			s.ProductionCode.Encode(e)
		}
	}
	{
		if len(s.Runtime) != 0 {
			e.FieldStart("runtime")
			e.Raw(s.Runtime)
		}
	}
	{
		if s.SeasonNumber.Set {
			e.FieldStart("season_number")
			s.SeasonNumber.Encode(e)
		}
	}
	{
		if s.ShowID.Set {
			e.FieldStart("show_id")
			s.ShowID.Encode(e)
		}
	}
	{
		if s.StillPath.Set {
			e.FieldStart("still_path")
			s.StillPath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeGroupDetailsOKGroupsItemEpisodesItem = [13]string{
	0:  "air_date",
	1:  "episode_number",
	2:  "id",
	3:  "name",
	4:  "overview",
	5:  "production_code",
	6:  "runtime",
	7:  "season_number",
	8:  "show_id",
	9:  "still_path",
	10: "vote_average",
	11: "vote_count",
	12: "order",
}

// Decode decodes TvEpisodeGroupDetailsOKGroupsItemEpisodesItem from json.
func (s *TvEpisodeGroupDetailsOKGroupsItemEpisodesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeGroupDetailsOKGroupsItemEpisodesItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "air_date":
			if err := func() error {
				s.AirDate.Reset()
				if err := s.AirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"air_date\"")
			}
		case "episode_number":
			if err := func() error {
				s.EpisodeNumber.Reset()
				if err := s.EpisodeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "production_code":
			if err := func() error {
				s.ProductionCode.Reset()
				if err := s.ProductionCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_code\"")
			}
		case "runtime":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Runtime = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runtime\"")
			}
		case "season_number":
			if err := func() error {
				s.SeasonNumber.Reset()
				if err := s.SeasonNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"season_number\"")
			}
		case "show_id":
			if err := func() error {
				s.ShowID.Reset()
				if err := s.ShowID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_id\"")
			}
		case "still_path":
			if err := func() error {
				s.StillPath.Reset()
				if err := s.StillPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"still_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeGroupDetailsOKGroupsItemEpisodesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeGroupDetailsOKGroupsItemEpisodesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeGroupDetailsOKGroupsItemEpisodesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeGroupDetailsOKNetwork) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeGroupDetailsOKNetwork) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry.Set {
			e.FieldStart("origin_country")
			s.OriginCountry.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeGroupDetailsOKNetwork = [4]string{
	0: "id",
	1: "logo_path",
	2: "name",
	3: "origin_country",
}

// Decode decodes TvEpisodeGroupDetailsOKNetwork from json.
func (s *TvEpisodeGroupDetailsOKNetwork) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeGroupDetailsOKNetwork to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry.Reset()
				if err := s.OriginCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeGroupDetailsOKNetwork")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeGroupDetailsOKNetwork) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeGroupDetailsOKNetwork) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeImagesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeImagesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Stills != nil {
			e.FieldStart("stills")
			e.ArrStart()
			for _, elem := range s.Stills {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvEpisodeImagesOK = [2]string{
	0: "id",
	1: "stills",
}

// Decode decodes TvEpisodeImagesOK from json.
func (s *TvEpisodeImagesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeImagesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "stills":
			if err := func() error {
				s.Stills = make([]TvEpisodeImagesOKStillsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvEpisodeImagesOKStillsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Stills = append(s.Stills, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stills\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeImagesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeImagesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeImagesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeImagesOKStillsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeImagesOKStillsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeImagesOKStillsItem = [7]string{
	0: "aspect_ratio",
	1: "height",
	2: "iso_639_1",
	3: "file_path",
	4: "vote_average",
	5: "vote_count",
	6: "width",
}

// Decode decodes TvEpisodeImagesOKStillsItem from json.
func (s *TvEpisodeImagesOKStillsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeImagesOKStillsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeImagesOKStillsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeImagesOKStillsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeImagesOKStillsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeTranslationsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeTranslationsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Translations != nil {
			e.FieldStart("translations")
			e.ArrStart()
			for _, elem := range s.Translations {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvEpisodeTranslationsOK = [2]string{
	0: "id",
	1: "translations",
}

// Decode decodes TvEpisodeTranslationsOK from json.
func (s *TvEpisodeTranslationsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeTranslationsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "translations":
			if err := func() error {
				s.Translations = make([]TvEpisodeTranslationsOKTranslationsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvEpisodeTranslationsOKTranslationsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Translations = append(s.Translations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translations\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeTranslationsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeTranslationsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeTranslationsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeTranslationsOKTranslationsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeTranslationsOKTranslationsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.EnglishName.Set {
			e.FieldStart("english_name")
			s.EnglishName.Encode(e)
		}
	}
	{
		if s.Data.Set {
			e.FieldStart("data")
			s.Data.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeTranslationsOKTranslationsItem = [5]string{
	0: "iso_3166_1",
	1: "iso_639_1",
	2: "name",
	3: "english_name",
	4: "data",
}

// Decode decodes TvEpisodeTranslationsOKTranslationsItem from json.
func (s *TvEpisodeTranslationsOKTranslationsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeTranslationsOKTranslationsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "english_name":
			if err := func() error {
				s.EnglishName.Reset()
				if err := s.EnglishName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"english_name\"")
			}
		case "data":
			if err := func() error {
				s.Data.Reset()
				if err := s.Data.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeTranslationsOKTranslationsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeTranslationsOKTranslationsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeTranslationsOKTranslationsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeTranslationsOKTranslationsItemData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeTranslationsOKTranslationsItemData) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeTranslationsOKTranslationsItemData = [2]string{
	0: "name",
	1: "overview",
}

// Decode decodes TvEpisodeTranslationsOKTranslationsItemData from json.
func (s *TvEpisodeTranslationsOKTranslationsItemData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeTranslationsOKTranslationsItemData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeTranslationsOKTranslationsItemData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeTranslationsOKTranslationsItemData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeTranslationsOKTranslationsItemData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeVideosOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeVideosOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvEpisodeVideosOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes TvEpisodeVideosOK from json.
func (s *TvEpisodeVideosOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeVideosOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvEpisodeVideosOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvEpisodeVideosOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeVideosOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeVideosOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeVideosOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvEpisodeVideosOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvEpisodeVideosOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Size.Set {
			e.FieldStart("size")
			s.Size.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Official.Set {
			e.FieldStart("official")
			s.Official.Encode(e)
		}
	}
	{
		if s.PublishedAt.Set {
			e.FieldStart("published_at")
			s.PublishedAt.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvEpisodeVideosOKResultsItem = [10]string{
	0: "iso_639_1",
	1: "iso_3166_1",
	2: "name",
	3: "key",
	4: "site",
	5: "size",
	6: "type",
	7: "official",
	8: "published_at",
	9: "id",
}

// Decode decodes TvEpisodeVideosOKResultsItem from json.
func (s *TvEpisodeVideosOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvEpisodeVideosOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "size":
			if err := func() error {
				s.Size.Reset()
				if err := s.Size.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "official":
			if err := func() error {
				s.Official.Reset()
				if err := s.Official.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"official\"")
			}
		case "published_at":
			if err := func() error {
				s.PublishedAt.Reset()
				if err := s.PublishedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"published_at\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvEpisodeVideosOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvEpisodeVideosOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvEpisodeVideosOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonAccountStatesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonAccountStatesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonAccountStatesOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes TvSeasonAccountStatesOK from json.
func (s *TvSeasonAccountStatesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonAccountStatesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeasonAccountStatesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonAccountStatesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonAccountStatesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonAccountStatesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonAccountStatesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonAccountStatesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonAccountStatesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.EpisodeNumber.Set {
			e.FieldStart("episode_number")
			s.EpisodeNumber.Encode(e)
		}
	}
	{
		if s.Rated.Set {
			e.FieldStart("rated")
			s.Rated.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonAccountStatesOKResultsItem = [3]string{
	0: "id",
	1: "episode_number",
	2: "rated",
}

// Decode decodes TvSeasonAccountStatesOKResultsItem from json.
func (s *TvSeasonAccountStatesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonAccountStatesOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "episode_number":
			if err := func() error {
				s.EpisodeNumber.Reset()
				if err := s.EpisodeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_number\"")
			}
		case "rated":
			if err := func() error {
				s.Rated.Reset()
				if err := s.Rated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonAccountStatesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonAccountStatesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonAccountStatesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonAccountStatesOKResultsItemRated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonAccountStatesOKResultsItemRated) encodeFields(e *jx.Encoder) {
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonAccountStatesOKResultsItemRated = [1]string{
	0: "value",
}

// Decode decodes TvSeasonAccountStatesOKResultsItemRated from json.
func (s *TvSeasonAccountStatesOKResultsItemRated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonAccountStatesOKResultsItemRated to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonAccountStatesOKResultsItemRated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonAccountStatesOKResultsItemRated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonAccountStatesOKResultsItemRated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonAggregateCreditsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonAggregateCreditsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Cast != nil {
			e.FieldStart("cast")
			e.ArrStart()
			for _, elem := range s.Cast {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Crew != nil {
			e.FieldStart("crew")
			e.ArrStart()
			for _, elem := range s.Crew {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonAggregateCreditsOK = [3]string{
	0: "cast",
	1: "crew",
	2: "id",
}

// Decode decodes TvSeasonAggregateCreditsOK from json.
func (s *TvSeasonAggregateCreditsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonAggregateCreditsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cast":
			if err := func() error {
				s.Cast = make([]TvSeasonAggregateCreditsOKCastItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonAggregateCreditsOKCastItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Cast = append(s.Cast, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cast\"")
			}
		case "crew":
			if err := func() error {
				s.Crew = make([]TvSeasonAggregateCreditsOKCrewItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonAggregateCreditsOKCrewItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Crew = append(s.Crew, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"crew\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonAggregateCreditsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonAggregateCreditsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonAggregateCreditsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonAggregateCreditsOKCastItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonAggregateCreditsOKCastItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.Roles != nil {
			e.FieldStart("roles")
			e.ArrStart()
			for _, elem := range s.Roles {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalEpisodeCount.Set {
			e.FieldStart("total_episode_count")
			s.TotalEpisodeCount.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonAggregateCreditsOKCastItem = [11]string{
	0:  "adult",
	1:  "gender",
	2:  "id",
	3:  "known_for_department",
	4:  "name",
	5:  "original_name",
	6:  "popularity",
	7:  "profile_path",
	8:  "roles",
	9:  "total_episode_count",
	10: "order",
}

// Decode decodes TvSeasonAggregateCreditsOKCastItem from json.
func (s *TvSeasonAggregateCreditsOKCastItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonAggregateCreditsOKCastItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "roles":
			if err := func() error {
				s.Roles = make([]TvSeasonAggregateCreditsOKCastItemRolesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonAggregateCreditsOKCastItemRolesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Roles = append(s.Roles, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"roles\"")
			}
		case "total_episode_count":
			if err := func() error {
				s.TotalEpisodeCount.Reset()
				if err := s.TotalEpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_episode_count\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonAggregateCreditsOKCastItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonAggregateCreditsOKCastItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonAggregateCreditsOKCastItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonAggregateCreditsOKCastItemRolesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonAggregateCreditsOKCastItemRolesItem) encodeFields(e *jx.Encoder) {
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.EpisodeCount.Set {
			e.FieldStart("episode_count")
			s.EpisodeCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonAggregateCreditsOKCastItemRolesItem = [3]string{
	0: "credit_id",
	1: "character",
	2: "episode_count",
}

// Decode decodes TvSeasonAggregateCreditsOKCastItemRolesItem from json.
func (s *TvSeasonAggregateCreditsOKCastItemRolesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonAggregateCreditsOKCastItemRolesItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "episode_count":
			if err := func() error {
				s.EpisodeCount.Reset()
				if err := s.EpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonAggregateCreditsOKCastItemRolesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonAggregateCreditsOKCastItemRolesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonAggregateCreditsOKCastItemRolesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonAggregateCreditsOKCrewItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonAggregateCreditsOKCrewItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.Jobs != nil {
			e.FieldStart("jobs")
			e.ArrStart()
			for _, elem := range s.Jobs {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.TotalEpisodeCount.Set {
			e.FieldStart("total_episode_count")
			s.TotalEpisodeCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonAggregateCreditsOKCrewItem = [11]string{
	0:  "adult",
	1:  "gender",
	2:  "id",
	3:  "known_for_department",
	4:  "name",
	5:  "original_name",
	6:  "popularity",
	7:  "profile_path",
	8:  "jobs",
	9:  "department",
	10: "total_episode_count",
}

// Decode decodes TvSeasonAggregateCreditsOKCrewItem from json.
func (s *TvSeasonAggregateCreditsOKCrewItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonAggregateCreditsOKCrewItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "jobs":
			if err := func() error {
				s.Jobs = make([]TvSeasonAggregateCreditsOKCrewItemJobsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonAggregateCreditsOKCrewItemJobsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Jobs = append(s.Jobs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jobs\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "total_episode_count":
			if err := func() error {
				s.TotalEpisodeCount.Reset()
				if err := s.TotalEpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_episode_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonAggregateCreditsOKCrewItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonAggregateCreditsOKCrewItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonAggregateCreditsOKCrewItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonAggregateCreditsOKCrewItemJobsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonAggregateCreditsOKCrewItemJobsItem) encodeFields(e *jx.Encoder) {
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Job.Set {
			e.FieldStart("job")
			s.Job.Encode(e)
		}
	}
	{
		if s.EpisodeCount.Set {
			e.FieldStart("episode_count")
			s.EpisodeCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonAggregateCreditsOKCrewItemJobsItem = [3]string{
	0: "credit_id",
	1: "job",
	2: "episode_count",
}

// Decode decodes TvSeasonAggregateCreditsOKCrewItemJobsItem from json.
func (s *TvSeasonAggregateCreditsOKCrewItemJobsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonAggregateCreditsOKCrewItemJobsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "job":
			if err := func() error {
				s.Job.Reset()
				if err := s.Job.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job\"")
			}
		case "episode_count":
			if err := func() error {
				s.EpisodeCount.Reset()
				if err := s.EpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonAggregateCreditsOKCrewItemJobsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonAggregateCreditsOKCrewItemJobsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonAggregateCreditsOKCrewItemJobsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonChangesByIDOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonChangesByIDOK) encodeFields(e *jx.Encoder) {
	{
		if s.Changes != nil {
			e.FieldStart("changes")
			e.ArrStart()
			for _, elem := range s.Changes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonChangesByIDOK = [1]string{
	0: "changes",
}

// Decode decodes TvSeasonChangesByIDOK from json.
func (s *TvSeasonChangesByIDOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonChangesByIDOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "changes":
			if err := func() error {
				s.Changes = make([]TvSeasonChangesByIDOKChangesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonChangesByIDOKChangesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Changes = append(s.Changes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"changes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonChangesByIDOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonChangesByIDOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonChangesByIDOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonChangesByIDOKChangesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonChangesByIDOKChangesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonChangesByIDOKChangesItem = [2]string{
	0: "key",
	1: "items",
}

// Decode decodes TvSeasonChangesByIDOKChangesItem from json.
func (s *TvSeasonChangesByIDOKChangesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonChangesByIDOKChangesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]TvSeasonChangesByIDOKChangesItemItemsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonChangesByIDOKChangesItemItemsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonChangesByIDOKChangesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonChangesByIDOKChangesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonChangesByIDOKChangesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonChangesByIDOKChangesItemItemsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonChangesByIDOKChangesItemItemsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.Time.Set {
			e.FieldStart("time")
			s.Time.Encode(e)
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonChangesByIDOKChangesItemItemsItem = [4]string{
	0: "id",
	1: "action",
	2: "time",
	3: "value",
}

// Decode decodes TvSeasonChangesByIDOKChangesItemItemsItem from json.
func (s *TvSeasonChangesByIDOKChangesItemItemsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonChangesByIDOKChangesItemItemsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "time":
			if err := func() error {
				s.Time.Reset()
				if err := s.Time.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonChangesByIDOKChangesItemItemsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonChangesByIDOKChangesItemItemsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonChangesByIDOKChangesItemItemsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonChangesByIDOKChangesItemItemsItemValue) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonChangesByIDOKChangesItemItemsItemValue) encodeFields(e *jx.Encoder) {
	{
		if s.EpisodeID.Set {
			e.FieldStart("episode_id")
			s.EpisodeID.Encode(e)
		}
	}
	{
		if s.EpisodeNumber.Set {
			e.FieldStart("episode_number")
			s.EpisodeNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonChangesByIDOKChangesItemItemsItemValue = [2]string{
	0: "episode_id",
	1: "episode_number",
}

// Decode decodes TvSeasonChangesByIDOKChangesItemItemsItemValue from json.
func (s *TvSeasonChangesByIDOKChangesItemItemsItemValue) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonChangesByIDOKChangesItemItemsItemValue to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "episode_id":
			if err := func() error {
				s.EpisodeID.Reset()
				if err := s.EpisodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_id\"")
			}
		case "episode_number":
			if err := func() error {
				s.EpisodeNumber.Reset()
				if err := s.EpisodeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonChangesByIDOKChangesItemItemsItemValue")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonChangesByIDOKChangesItemItemsItemValue) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonChangesByIDOKChangesItemItemsItemValue) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonCreditsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonCreditsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Cast != nil {
			e.FieldStart("cast")
			e.ArrStart()
			for _, elem := range s.Cast {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Crew != nil {
			e.FieldStart("crew")
			e.ArrStart()
			for _, elem := range s.Crew {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonCreditsOK = [3]string{
	0: "cast",
	1: "crew",
	2: "id",
}

// Decode decodes TvSeasonCreditsOK from json.
func (s *TvSeasonCreditsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonCreditsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cast":
			if err := func() error {
				s.Cast = make([]TvSeasonCreditsOKCastItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonCreditsOKCastItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Cast = append(s.Cast, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cast\"")
			}
		case "crew":
			if err := func() error {
				s.Crew = make([]TvSeasonCreditsOKCrewItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonCreditsOKCrewItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Crew = append(s.Crew, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"crew\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonCreditsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonCreditsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonCreditsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonCreditsOKCastItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonCreditsOKCastItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonCreditsOKCastItem = [11]string{
	0:  "adult",
	1:  "gender",
	2:  "id",
	3:  "known_for_department",
	4:  "name",
	5:  "original_name",
	6:  "popularity",
	7:  "profile_path",
	8:  "character",
	9:  "credit_id",
	10: "order",
}

// Decode decodes TvSeasonCreditsOKCastItem from json.
func (s *TvSeasonCreditsOKCastItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonCreditsOKCastItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonCreditsOKCastItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonCreditsOKCastItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonCreditsOKCastItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonCreditsOKCrewItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonCreditsOKCrewItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Job.Set {
			e.FieldStart("job")
			s.Job.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonCreditsOKCrewItem = [11]string{
	0:  "adult",
	1:  "gender",
	2:  "id",
	3:  "known_for_department",
	4:  "name",
	5:  "original_name",
	6:  "popularity",
	7:  "profile_path",
	8:  "credit_id",
	9:  "department",
	10: "job",
}

// Decode decodes TvSeasonCreditsOKCrewItem from json.
func (s *TvSeasonCreditsOKCrewItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonCreditsOKCrewItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "job":
			if err := func() error {
				s.Job.Reset()
				if err := s.Job.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonCreditsOKCrewItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonCreditsOKCrewItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonCreditsOKCrewItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.AirDate.Set {
			e.FieldStart("air_date")
			s.AirDate.Encode(e)
		}
	}
	{
		if s.Episodes != nil {
			e.FieldStart("episodes")
			e.ArrStart()
			for _, elem := range s.Episodes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.SeasonNumber.Set {
			e.FieldStart("season_number")
			s.SeasonNumber.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	for k, elem := range s.AdditionalProps {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

var jsonFieldsNameOfTvSeasonDetailsOK = [8]string{
	0: "air_date",
	1: "episodes",
	2: "name",
	3: "overview",
	4: "id",
	5: "poster_path",
	6: "season_number",
	7: "vote_average",
}

// Decode decodes TvSeasonDetailsOK from json.
func (s *TvSeasonDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonDetailsOK to nil")
	}
	s.setDefaults()
	s.AdditionalProps = map[string]jx.Raw{}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "air_date":
			if err := func() error {
				s.AirDate.Reset()
				if err := s.AirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"air_date\"")
			}
		case "episodes":
			if err := func() error {
				s.Episodes = make([]TvSeasonDetailsOKEpisodesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonDetailsOKEpisodesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Episodes = append(s.Episodes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episodes\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "season_number":
			if err := func() error {
				s.SeasonNumber.Reset()
				if err := s.SeasonNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"season_number\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		default:
			var elem jx.Raw
			if err := func() error {
				v, err := d.RawAppend(nil)
				elem = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrapf(err, "decode field %q", k)
			}
			s.AdditionalProps[string(k)] = elem
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s TvSeasonDetailsOKAdditional) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s TvSeasonDetailsOKAdditional) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		if len(elem) != 0 {
			e.Raw(elem)
		}
	}
}

// Decode decodes TvSeasonDetailsOKAdditional from json.
func (s *TvSeasonDetailsOKAdditional) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonDetailsOKAdditional to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem jx.Raw
		if err := func() error {
			v, err := d.RawAppend(nil)
			elem = jx.Raw(v)
			if err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonDetailsOKAdditional")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TvSeasonDetailsOKAdditional) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonDetailsOKAdditional) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonDetailsOKEpisodesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonDetailsOKEpisodesItem) encodeFields(e *jx.Encoder) {
	{
		if s.AirDate.Set {
			e.FieldStart("air_date")
			s.AirDate.Encode(e)
		}
	}
	{
		if s.EpisodeNumber.Set {
			e.FieldStart("episode_number")
			s.EpisodeNumber.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.ProductionCode.Set {
			e.FieldStart("production_code")
			s.ProductionCode.Encode(e)
		}
	}
	{
		if s.Runtime.Set {
			e.FieldStart("runtime")
			s.Runtime.Encode(e)
		}
	}
	{
		if s.SeasonNumber.Set {
			e.FieldStart("season_number")
			s.SeasonNumber.Encode(e)
		}
	}
	{
		if s.ShowID.Set {
			e.FieldStart("show_id")
			s.ShowID.Encode(e)
		}
	}
	{
		if s.StillPath.Set {
			e.FieldStart("still_path")
			s.StillPath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Crew != nil {
			e.FieldStart("crew")
			e.ArrStart()
			for _, elem := range s.Crew {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.GuestStars != nil {
			e.FieldStart("guest_stars")
			e.ArrStart()
			for _, elem := range s.GuestStars {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonDetailsOKEpisodesItem = [14]string{
	0:  "air_date",
	1:  "episode_number",
	2:  "id",
	3:  "name",
	4:  "overview",
	5:  "production_code",
	6:  "runtime",
	7:  "season_number",
	8:  "show_id",
	9:  "still_path",
	10: "vote_average",
	11: "vote_count",
	12: "crew",
	13: "guest_stars",
}

// Decode decodes TvSeasonDetailsOKEpisodesItem from json.
func (s *TvSeasonDetailsOKEpisodesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonDetailsOKEpisodesItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "air_date":
			if err := func() error {
				s.AirDate.Reset()
				if err := s.AirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"air_date\"")
			}
		case "episode_number":
			if err := func() error {
				s.EpisodeNumber.Reset()
				if err := s.EpisodeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_number\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "production_code":
			if err := func() error {
				s.ProductionCode.Reset()
				if err := s.ProductionCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_code\"")
			}
		case "runtime":
			if err := func() error {
				s.Runtime.Reset()
				if err := s.Runtime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runtime\"")
			}
		case "season_number":
			if err := func() error {
				s.SeasonNumber.Reset()
				if err := s.SeasonNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"season_number\"")
			}
		case "show_id":
			if err := func() error {
				s.ShowID.Reset()
				if err := s.ShowID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_id\"")
			}
		case "still_path":
			if err := func() error {
				s.StillPath.Reset()
				if err := s.StillPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"still_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "crew":
			if err := func() error {
				s.Crew = make([]TvSeasonDetailsOKEpisodesItemCrewItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonDetailsOKEpisodesItemCrewItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Crew = append(s.Crew, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"crew\"")
			}
		case "guest_stars":
			if err := func() error {
				s.GuestStars = make([]TvSeasonDetailsOKEpisodesItemGuestStarsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonDetailsOKEpisodesItemGuestStarsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.GuestStars = append(s.GuestStars, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guest_stars\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonDetailsOKEpisodesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonDetailsOKEpisodesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonDetailsOKEpisodesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonDetailsOKEpisodesItemCrewItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonDetailsOKEpisodesItemCrewItem) encodeFields(e *jx.Encoder) {
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Job.Set {
			e.FieldStart("job")
			s.Job.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonDetailsOKEpisodesItemCrewItem = [11]string{
	0:  "department",
	1:  "job",
	2:  "credit_id",
	3:  "adult",
	4:  "gender",
	5:  "id",
	6:  "known_for_department",
	7:  "name",
	8:  "original_name",
	9:  "popularity",
	10: "profile_path",
}

// Decode decodes TvSeasonDetailsOKEpisodesItemCrewItem from json.
func (s *TvSeasonDetailsOKEpisodesItemCrewItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonDetailsOKEpisodesItemCrewItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "job":
			if err := func() error {
				s.Job.Reset()
				if err := s.Job.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonDetailsOKEpisodesItemCrewItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonDetailsOKEpisodesItemCrewItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonDetailsOKEpisodesItemCrewItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonDetailsOKEpisodesItemGuestStarsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonDetailsOKEpisodesItemGuestStarsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonDetailsOKEpisodesItemGuestStarsItem = [11]string{
	0:  "character",
	1:  "credit_id",
	2:  "order",
	3:  "adult",
	4:  "gender",
	5:  "id",
	6:  "known_for_department",
	7:  "name",
	8:  "original_name",
	9:  "popularity",
	10: "profile_path",
}

// Decode decodes TvSeasonDetailsOKEpisodesItemGuestStarsItem from json.
func (s *TvSeasonDetailsOKEpisodesItemGuestStarsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonDetailsOKEpisodesItemGuestStarsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonDetailsOKEpisodesItemGuestStarsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonDetailsOKEpisodesItemGuestStarsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonDetailsOKEpisodesItemGuestStarsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonExternalIdsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonExternalIdsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.FreebaseMid.Set {
			e.FieldStart("freebase_mid")
			s.FreebaseMid.Encode(e)
		}
	}
	{
		if s.FreebaseID.Set {
			e.FieldStart("freebase_id")
			s.FreebaseID.Encode(e)
		}
	}
	{
		if s.TvdbID.Set {
			e.FieldStart("tvdb_id")
			s.TvdbID.Encode(e)
		}
	}
	{
		if len(s.TvrageID) != 0 {
			e.FieldStart("tvrage_id")
			e.Raw(s.TvrageID)
		}
	}
	{
		if s.WikidataID.Set {
			e.FieldStart("wikidata_id")
			s.WikidataID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonExternalIdsOK = [6]string{
	0: "id",
	1: "freebase_mid",
	2: "freebase_id",
	3: "tvdb_id",
	4: "tvrage_id",
	5: "wikidata_id",
}

// Decode decodes TvSeasonExternalIdsOK from json.
func (s *TvSeasonExternalIdsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonExternalIdsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "freebase_mid":
			if err := func() error {
				s.FreebaseMid.Reset()
				if err := s.FreebaseMid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"freebase_mid\"")
			}
		case "freebase_id":
			if err := func() error {
				s.FreebaseID.Reset()
				if err := s.FreebaseID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"freebase_id\"")
			}
		case "tvdb_id":
			if err := func() error {
				s.TvdbID.Reset()
				if err := s.TvdbID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tvdb_id\"")
			}
		case "tvrage_id":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.TvrageID = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tvrage_id\"")
			}
		case "wikidata_id":
			if err := func() error {
				s.WikidataID.Reset()
				if err := s.WikidataID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wikidata_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonExternalIdsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonExternalIdsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonExternalIdsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonImagesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonImagesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Posters != nil {
			e.FieldStart("posters")
			e.ArrStart()
			for _, elem := range s.Posters {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonImagesOK = [2]string{
	0: "id",
	1: "posters",
}

// Decode decodes TvSeasonImagesOK from json.
func (s *TvSeasonImagesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonImagesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "posters":
			if err := func() error {
				s.Posters = make([]TvSeasonImagesOKPostersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonImagesOKPostersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Posters = append(s.Posters, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"posters\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonImagesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonImagesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonImagesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonImagesOKPostersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonImagesOKPostersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonImagesOKPostersItem = [7]string{
	0: "aspect_ratio",
	1: "height",
	2: "iso_639_1",
	3: "file_path",
	4: "vote_average",
	5: "vote_count",
	6: "width",
}

// Decode decodes TvSeasonImagesOKPostersItem from json.
func (s *TvSeasonImagesOKPostersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonImagesOKPostersItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonImagesOKPostersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonImagesOKPostersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonImagesOKPostersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonTranslationsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonTranslationsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Translations != nil {
			e.FieldStart("translations")
			e.ArrStart()
			for _, elem := range s.Translations {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonTranslationsOK = [2]string{
	0: "id",
	1: "translations",
}

// Decode decodes TvSeasonTranslationsOK from json.
func (s *TvSeasonTranslationsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonTranslationsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "translations":
			if err := func() error {
				s.Translations = make([]TvSeasonTranslationsOKTranslationsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonTranslationsOKTranslationsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Translations = append(s.Translations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translations\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonTranslationsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonTranslationsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonTranslationsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonTranslationsOKTranslationsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonTranslationsOKTranslationsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.EnglishName.Set {
			e.FieldStart("english_name")
			s.EnglishName.Encode(e)
		}
	}
	{
		if s.Data.Set {
			e.FieldStart("data")
			s.Data.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonTranslationsOKTranslationsItem = [5]string{
	0: "iso_3166_1",
	1: "iso_639_1",
	2: "name",
	3: "english_name",
	4: "data",
}

// Decode decodes TvSeasonTranslationsOKTranslationsItem from json.
func (s *TvSeasonTranslationsOKTranslationsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonTranslationsOKTranslationsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "english_name":
			if err := func() error {
				s.EnglishName.Reset()
				if err := s.EnglishName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"english_name\"")
			}
		case "data":
			if err := func() error {
				s.Data.Reset()
				if err := s.Data.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonTranslationsOKTranslationsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonTranslationsOKTranslationsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonTranslationsOKTranslationsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonTranslationsOKTranslationsItemData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonTranslationsOKTranslationsItemData) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonTranslationsOKTranslationsItemData = [2]string{
	0: "name",
	1: "overview",
}

// Decode decodes TvSeasonTranslationsOKTranslationsItemData from json.
func (s *TvSeasonTranslationsOKTranslationsItemData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonTranslationsOKTranslationsItemData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonTranslationsOKTranslationsItemData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonTranslationsOKTranslationsItemData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonTranslationsOKTranslationsItemData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonVideosOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonVideosOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonVideosOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes TvSeasonVideosOK from json.
func (s *TvSeasonVideosOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonVideosOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeasonVideosOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonVideosOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonVideosOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonVideosOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonVideosOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonVideosOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonVideosOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Size.Set {
			e.FieldStart("size")
			s.Size.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Official.Set {
			e.FieldStart("official")
			s.Official.Encode(e)
		}
	}
	{
		if s.PublishedAt.Set {
			e.FieldStart("published_at")
			s.PublishedAt.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonVideosOKResultsItem = [10]string{
	0: "iso_639_1",
	1: "iso_3166_1",
	2: "name",
	3: "key",
	4: "site",
	5: "size",
	6: "type",
	7: "official",
	8: "published_at",
	9: "id",
}

// Decode decodes TvSeasonVideosOKResultsItem from json.
func (s *TvSeasonVideosOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonVideosOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "size":
			if err := func() error {
				s.Size.Reset()
				if err := s.Size.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "official":
			if err := func() error {
				s.Official.Reset()
				if err := s.Official.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"official\"")
			}
		case "published_at":
			if err := func() error {
				s.PublishedAt.Reset()
				if err := s.PublishedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"published_at\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonVideosOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonVideosOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonVideosOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results.Set {
			e.FieldStart("results")
			s.Results.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes TvSeasonWatchProvidersOK from json.
func (s *TvSeasonWatchProvidersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results.Reset()
				if err := s.Results.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResults) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResults) encodeFields(e *jx.Encoder) {
	{
		if s.AE.Set {
			e.FieldStart("AE")
			s.AE.Encode(e)
		}
	}
	{
		if s.AR.Set {
			e.FieldStart("AR")
			s.AR.Encode(e)
		}
	}
	{
		if s.AT.Set {
			e.FieldStart("AT")
			s.AT.Encode(e)
		}
	}
	{
		if s.AU.Set {
			e.FieldStart("AU")
			s.AU.Encode(e)
		}
	}
	{
		if s.BA.Set {
			e.FieldStart("BA")
			s.BA.Encode(e)
		}
	}
	{
		if s.BB.Set {
			e.FieldStart("BB")
			s.BB.Encode(e)
		}
	}
	{
		if s.BE.Set {
			e.FieldStart("BE")
			s.BE.Encode(e)
		}
	}
	{
		if s.BG.Set {
			e.FieldStart("BG")
			s.BG.Encode(e)
		}
	}
	{
		if s.BO.Set {
			e.FieldStart("BO")
			s.BO.Encode(e)
		}
	}
	{
		if s.BR.Set {
			e.FieldStart("BR")
			s.BR.Encode(e)
		}
	}
	{
		if s.BS.Set {
			e.FieldStart("BS")
			s.BS.Encode(e)
		}
	}
	{
		if s.CA.Set {
			e.FieldStart("CA")
			s.CA.Encode(e)
		}
	}
	{
		if s.CH.Set {
			e.FieldStart("CH")
			s.CH.Encode(e)
		}
	}
	{
		if s.CI.Set {
			e.FieldStart("CI")
			s.CI.Encode(e)
		}
	}
	{
		if s.CL.Set {
			e.FieldStart("CL")
			s.CL.Encode(e)
		}
	}
	{
		if s.CO.Set {
			e.FieldStart("CO")
			s.CO.Encode(e)
		}
	}
	{
		if s.CR.Set {
			e.FieldStart("CR")
			s.CR.Encode(e)
		}
	}
	{
		if s.CZ.Set {
			e.FieldStart("CZ")
			s.CZ.Encode(e)
		}
	}
	{
		if s.DE.Set {
			e.FieldStart("DE")
			s.DE.Encode(e)
		}
	}
	{
		if s.DK.Set {
			e.FieldStart("DK")
			s.DK.Encode(e)
		}
	}
	{
		if s.DO.Set {
			e.FieldStart("DO")
			s.DO.Encode(e)
		}
	}
	{
		if s.DZ.Set {
			e.FieldStart("DZ")
			s.DZ.Encode(e)
		}
	}
	{
		if s.EC.Set {
			e.FieldStart("EC")
			s.EC.Encode(e)
		}
	}
	{
		if s.EG.Set {
			e.FieldStart("EG")
			s.EG.Encode(e)
		}
	}
	{
		if s.ES.Set {
			e.FieldStart("ES")
			s.ES.Encode(e)
		}
	}
	{
		if s.FI.Set {
			e.FieldStart("FI")
			s.FI.Encode(e)
		}
	}
	{
		if s.FR.Set {
			e.FieldStart("FR")
			s.FR.Encode(e)
		}
	}
	{
		if s.GB.Set {
			e.FieldStart("GB")
			s.GB.Encode(e)
		}
	}
	{
		if s.GF.Set {
			e.FieldStart("GF")
			s.GF.Encode(e)
		}
	}
	{
		if s.GH.Set {
			e.FieldStart("GH")
			s.GH.Encode(e)
		}
	}
	{
		if s.GQ.Set {
			e.FieldStart("GQ")
			s.GQ.Encode(e)
		}
	}
	{
		if s.GT.Set {
			e.FieldStart("GT")
			s.GT.Encode(e)
		}
	}
	{
		if s.HK.Set {
			e.FieldStart("HK")
			s.HK.Encode(e)
		}
	}
	{
		if s.HN.Set {
			e.FieldStart("HN")
			s.HN.Encode(e)
		}
	}
	{
		if s.HR.Set {
			e.FieldStart("HR")
			s.HR.Encode(e)
		}
	}
	{
		if s.HU.Set {
			e.FieldStart("HU")
			s.HU.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("ID")
			s.ID.Encode(e)
		}
	}
	{
		if s.IE.Set {
			e.FieldStart("IE")
			s.IE.Encode(e)
		}
	}
	{
		if s.IL.Set {
			e.FieldStart("IL")
			s.IL.Encode(e)
		}
	}
	{
		if s.IQ.Set {
			e.FieldStart("IQ")
			s.IQ.Encode(e)
		}
	}
	{
		if s.IT.Set {
			e.FieldStart("IT")
			s.IT.Encode(e)
		}
	}
	{
		if s.JM.Set {
			e.FieldStart("JM")
			s.JM.Encode(e)
		}
	}
	{
		if s.JP.Set {
			e.FieldStart("JP")
			s.JP.Encode(e)
		}
	}
	{
		if s.KE.Set {
			e.FieldStart("KE")
			s.KE.Encode(e)
		}
	}
	{
		if s.KR.Set {
			e.FieldStart("KR")
			s.KR.Encode(e)
		}
	}
	{
		if s.LB.Set {
			e.FieldStart("LB")
			s.LB.Encode(e)
		}
	}
	{
		if s.LY.Set {
			e.FieldStart("LY")
			s.LY.Encode(e)
		}
	}
	{
		if s.MD.Set {
			e.FieldStart("MD")
			s.MD.Encode(e)
		}
	}
	{
		if s.MK.Set {
			e.FieldStart("MK")
			s.MK.Encode(e)
		}
	}
	{
		if s.MU.Set {
			e.FieldStart("MU")
			s.MU.Encode(e)
		}
	}
	{
		if s.MX.Set {
			e.FieldStart("MX")
			s.MX.Encode(e)
		}
	}
	{
		if s.MY.Set {
			e.FieldStart("MY")
			s.MY.Encode(e)
		}
	}
	{
		if s.MZ.Set {
			e.FieldStart("MZ")
			s.MZ.Encode(e)
		}
	}
	{
		if s.NE.Set {
			e.FieldStart("NE")
			s.NE.Encode(e)
		}
	}
	{
		if s.NG.Set {
			e.FieldStart("NG")
			s.NG.Encode(e)
		}
	}
	{
		if s.NL.Set {
			e.FieldStart("NL")
			s.NL.Encode(e)
		}
	}
	{
		if s.NO.Set {
			e.FieldStart("NO")
			s.NO.Encode(e)
		}
	}
	{
		if s.NZ.Set {
			e.FieldStart("NZ")
			s.NZ.Encode(e)
		}
	}
	{
		if s.PA.Set {
			e.FieldStart("PA")
			s.PA.Encode(e)
		}
	}
	{
		if s.PE.Set {
			e.FieldStart("PE")
			s.PE.Encode(e)
		}
	}
	{
		if s.PH.Set {
			e.FieldStart("PH")
			s.PH.Encode(e)
		}
	}
	{
		if s.PL.Set {
			e.FieldStart("PL")
			s.PL.Encode(e)
		}
	}
	{
		if s.PS.Set {
			e.FieldStart("PS")
			s.PS.Encode(e)
		}
	}
	{
		if s.PT.Set {
			e.FieldStart("PT")
			s.PT.Encode(e)
		}
	}
	{
		if s.PY.Set {
			e.FieldStart("PY")
			s.PY.Encode(e)
		}
	}
	{
		if s.RO.Set {
			e.FieldStart("RO")
			s.RO.Encode(e)
		}
	}
	{
		if s.RS.Set {
			e.FieldStart("RS")
			s.RS.Encode(e)
		}
	}
	{
		if s.RU.Set {
			e.FieldStart("RU")
			s.RU.Encode(e)
		}
	}
	{
		if s.SA.Set {
			e.FieldStart("SA")
			s.SA.Encode(e)
		}
	}
	{
		if s.SC.Set {
			e.FieldStart("SC")
			s.SC.Encode(e)
		}
	}
	{
		if s.SE.Set {
			e.FieldStart("SE")
			s.SE.Encode(e)
		}
	}
	{
		if s.SG.Set {
			e.FieldStart("SG")
			s.SG.Encode(e)
		}
	}
	{
		if s.SI.Set {
			e.FieldStart("SI")
			s.SI.Encode(e)
		}
	}
	{
		if s.SK.Set {
			e.FieldStart("SK")
			s.SK.Encode(e)
		}
	}
	{
		if s.SN.Set {
			e.FieldStart("SN")
			s.SN.Encode(e)
		}
	}
	{
		if s.SV.Set {
			e.FieldStart("SV")
			s.SV.Encode(e)
		}
	}
	{
		if s.TH.Set {
			e.FieldStart("TH")
			s.TH.Encode(e)
		}
	}
	{
		if s.TR.Set {
			e.FieldStart("TR")
			s.TR.Encode(e)
		}
	}
	{
		if s.TT.Set {
			e.FieldStart("TT")
			s.TT.Encode(e)
		}
	}
	{
		if s.TW.Set {
			e.FieldStart("TW")
			s.TW.Encode(e)
		}
	}
	{
		if s.TZ.Set {
			e.FieldStart("TZ")
			s.TZ.Encode(e)
		}
	}
	{
		if s.UG.Set {
			e.FieldStart("UG")
			s.UG.Encode(e)
		}
	}
	{
		if s.US.Set {
			e.FieldStart("US")
			s.US.Encode(e)
		}
	}
	{
		if s.UY.Set {
			e.FieldStart("UY")
			s.UY.Encode(e)
		}
	}
	{
		if s.VE.Set {
			e.FieldStart("VE")
			s.VE.Encode(e)
		}
	}
	{
		if s.ZA.Set {
			e.FieldStart("ZA")
			s.ZA.Encode(e)
		}
	}
	{
		if s.ZM.Set {
			e.FieldStart("ZM")
			s.ZM.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResults = [87]string{
	0:  "AE",
	1:  "AR",
	2:  "AT",
	3:  "AU",
	4:  "BA",
	5:  "BB",
	6:  "BE",
	7:  "BG",
	8:  "BO",
	9:  "BR",
	10: "BS",
	11: "CA",
	12: "CH",
	13: "CI",
	14: "CL",
	15: "CO",
	16: "CR",
	17: "CZ",
	18: "DE",
	19: "DK",
	20: "DO",
	21: "DZ",
	22: "EC",
	23: "EG",
	24: "ES",
	25: "FI",
	26: "FR",
	27: "GB",
	28: "GF",
	29: "GH",
	30: "GQ",
	31: "GT",
	32: "HK",
	33: "HN",
	34: "HR",
	35: "HU",
	36: "ID",
	37: "IE",
	38: "IL",
	39: "IQ",
	40: "IT",
	41: "JM",
	42: "JP",
	43: "KE",
	44: "KR",
	45: "LB",
	46: "LY",
	47: "MD",
	48: "MK",
	49: "MU",
	50: "MX",
	51: "MY",
	52: "MZ",
	53: "NE",
	54: "NG",
	55: "NL",
	56: "NO",
	57: "NZ",
	58: "PA",
	59: "PE",
	60: "PH",
	61: "PL",
	62: "PS",
	63: "PT",
	64: "PY",
	65: "RO",
	66: "RS",
	67: "RU",
	68: "SA",
	69: "SC",
	70: "SE",
	71: "SG",
	72: "SI",
	73: "SK",
	74: "SN",
	75: "SV",
	76: "TH",
	77: "TR",
	78: "TT",
	79: "TW",
	80: "TZ",
	81: "UG",
	82: "US",
	83: "UY",
	84: "VE",
	85: "ZA",
	86: "ZM",
}

// Decode decodes TvSeasonWatchProvidersOKResults from json.
func (s *TvSeasonWatchProvidersOKResults) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResults to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "AE":
			if err := func() error {
				s.AE.Reset()
				if err := s.AE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AE\"")
			}
		case "AR":
			if err := func() error {
				s.AR.Reset()
				if err := s.AR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AR\"")
			}
		case "AT":
			if err := func() error {
				s.AT.Reset()
				if err := s.AT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AT\"")
			}
		case "AU":
			if err := func() error {
				s.AU.Reset()
				if err := s.AU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AU\"")
			}
		case "BA":
			if err := func() error {
				s.BA.Reset()
				if err := s.BA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BA\"")
			}
		case "BB":
			if err := func() error {
				s.BB.Reset()
				if err := s.BB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BB\"")
			}
		case "BE":
			if err := func() error {
				s.BE.Reset()
				if err := s.BE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BE\"")
			}
		case "BG":
			if err := func() error {
				s.BG.Reset()
				if err := s.BG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BG\"")
			}
		case "BO":
			if err := func() error {
				s.BO.Reset()
				if err := s.BO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BO\"")
			}
		case "BR":
			if err := func() error {
				s.BR.Reset()
				if err := s.BR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BR\"")
			}
		case "BS":
			if err := func() error {
				s.BS.Reset()
				if err := s.BS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BS\"")
			}
		case "CA":
			if err := func() error {
				s.CA.Reset()
				if err := s.CA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CA\"")
			}
		case "CH":
			if err := func() error {
				s.CH.Reset()
				if err := s.CH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CH\"")
			}
		case "CI":
			if err := func() error {
				s.CI.Reset()
				if err := s.CI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CI\"")
			}
		case "CL":
			if err := func() error {
				s.CL.Reset()
				if err := s.CL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CL\"")
			}
		case "CO":
			if err := func() error {
				s.CO.Reset()
				if err := s.CO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CO\"")
			}
		case "CR":
			if err := func() error {
				s.CR.Reset()
				if err := s.CR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CR\"")
			}
		case "CZ":
			if err := func() error {
				s.CZ.Reset()
				if err := s.CZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CZ\"")
			}
		case "DE":
			if err := func() error {
				s.DE.Reset()
				if err := s.DE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DE\"")
			}
		case "DK":
			if err := func() error {
				s.DK.Reset()
				if err := s.DK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DK\"")
			}
		case "DO":
			if err := func() error {
				s.DO.Reset()
				if err := s.DO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DO\"")
			}
		case "DZ":
			if err := func() error {
				s.DZ.Reset()
				if err := s.DZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DZ\"")
			}
		case "EC":
			if err := func() error {
				s.EC.Reset()
				if err := s.EC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EC\"")
			}
		case "EG":
			if err := func() error {
				s.EG.Reset()
				if err := s.EG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EG\"")
			}
		case "ES":
			if err := func() error {
				s.ES.Reset()
				if err := s.ES.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ES\"")
			}
		case "FI":
			if err := func() error {
				s.FI.Reset()
				if err := s.FI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FI\"")
			}
		case "FR":
			if err := func() error {
				s.FR.Reset()
				if err := s.FR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FR\"")
			}
		case "GB":
			if err := func() error {
				s.GB.Reset()
				if err := s.GB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GB\"")
			}
		case "GF":
			if err := func() error {
				s.GF.Reset()
				if err := s.GF.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GF\"")
			}
		case "GH":
			if err := func() error {
				s.GH.Reset()
				if err := s.GH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GH\"")
			}
		case "GQ":
			if err := func() error {
				s.GQ.Reset()
				if err := s.GQ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GQ\"")
			}
		case "GT":
			if err := func() error {
				s.GT.Reset()
				if err := s.GT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GT\"")
			}
		case "HK":
			if err := func() error {
				s.HK.Reset()
				if err := s.HK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HK\"")
			}
		case "HN":
			if err := func() error {
				s.HN.Reset()
				if err := s.HN.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HN\"")
			}
		case "HR":
			if err := func() error {
				s.HR.Reset()
				if err := s.HR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HR\"")
			}
		case "HU":
			if err := func() error {
				s.HU.Reset()
				if err := s.HU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HU\"")
			}
		case "ID":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ID\"")
			}
		case "IE":
			if err := func() error {
				s.IE.Reset()
				if err := s.IE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IE\"")
			}
		case "IL":
			if err := func() error {
				s.IL.Reset()
				if err := s.IL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IL\"")
			}
		case "IQ":
			if err := func() error {
				s.IQ.Reset()
				if err := s.IQ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IQ\"")
			}
		case "IT":
			if err := func() error {
				s.IT.Reset()
				if err := s.IT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IT\"")
			}
		case "JM":
			if err := func() error {
				s.JM.Reset()
				if err := s.JM.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JM\"")
			}
		case "JP":
			if err := func() error {
				s.JP.Reset()
				if err := s.JP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JP\"")
			}
		case "KE":
			if err := func() error {
				s.KE.Reset()
				if err := s.KE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"KE\"")
			}
		case "KR":
			if err := func() error {
				s.KR.Reset()
				if err := s.KR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"KR\"")
			}
		case "LB":
			if err := func() error {
				s.LB.Reset()
				if err := s.LB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LB\"")
			}
		case "LY":
			if err := func() error {
				s.LY.Reset()
				if err := s.LY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LY\"")
			}
		case "MD":
			if err := func() error {
				s.MD.Reset()
				if err := s.MD.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MD\"")
			}
		case "MK":
			if err := func() error {
				s.MK.Reset()
				if err := s.MK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MK\"")
			}
		case "MU":
			if err := func() error {
				s.MU.Reset()
				if err := s.MU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MU\"")
			}
		case "MX":
			if err := func() error {
				s.MX.Reset()
				if err := s.MX.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MX\"")
			}
		case "MY":
			if err := func() error {
				s.MY.Reset()
				if err := s.MY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MY\"")
			}
		case "MZ":
			if err := func() error {
				s.MZ.Reset()
				if err := s.MZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MZ\"")
			}
		case "NE":
			if err := func() error {
				s.NE.Reset()
				if err := s.NE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NE\"")
			}
		case "NG":
			if err := func() error {
				s.NG.Reset()
				if err := s.NG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NG\"")
			}
		case "NL":
			if err := func() error {
				s.NL.Reset()
				if err := s.NL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NL\"")
			}
		case "NO":
			if err := func() error {
				s.NO.Reset()
				if err := s.NO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NO\"")
			}
		case "NZ":
			if err := func() error {
				s.NZ.Reset()
				if err := s.NZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NZ\"")
			}
		case "PA":
			if err := func() error {
				s.PA.Reset()
				if err := s.PA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PA\"")
			}
		case "PE":
			if err := func() error {
				s.PE.Reset()
				if err := s.PE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PE\"")
			}
		case "PH":
			if err := func() error {
				s.PH.Reset()
				if err := s.PH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PH\"")
			}
		case "PL":
			if err := func() error {
				s.PL.Reset()
				if err := s.PL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PL\"")
			}
		case "PS":
			if err := func() error {
				s.PS.Reset()
				if err := s.PS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PS\"")
			}
		case "PT":
			if err := func() error {
				s.PT.Reset()
				if err := s.PT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PT\"")
			}
		case "PY":
			if err := func() error {
				s.PY.Reset()
				if err := s.PY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PY\"")
			}
		case "RO":
			if err := func() error {
				s.RO.Reset()
				if err := s.RO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RO\"")
			}
		case "RS":
			if err := func() error {
				s.RS.Reset()
				if err := s.RS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RS\"")
			}
		case "RU":
			if err := func() error {
				s.RU.Reset()
				if err := s.RU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RU\"")
			}
		case "SA":
			if err := func() error {
				s.SA.Reset()
				if err := s.SA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SA\"")
			}
		case "SC":
			if err := func() error {
				s.SC.Reset()
				if err := s.SC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SC\"")
			}
		case "SE":
			if err := func() error {
				s.SE.Reset()
				if err := s.SE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SE\"")
			}
		case "SG":
			if err := func() error {
				s.SG.Reset()
				if err := s.SG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SG\"")
			}
		case "SI":
			if err := func() error {
				s.SI.Reset()
				if err := s.SI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SI\"")
			}
		case "SK":
			if err := func() error {
				s.SK.Reset()
				if err := s.SK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SK\"")
			}
		case "SN":
			if err := func() error {
				s.SN.Reset()
				if err := s.SN.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SN\"")
			}
		case "SV":
			if err := func() error {
				s.SV.Reset()
				if err := s.SV.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SV\"")
			}
		case "TH":
			if err := func() error {
				s.TH.Reset()
				if err := s.TH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TH\"")
			}
		case "TR":
			if err := func() error {
				s.TR.Reset()
				if err := s.TR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TR\"")
			}
		case "TT":
			if err := func() error {
				s.TT.Reset()
				if err := s.TT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TT\"")
			}
		case "TW":
			if err := func() error {
				s.TW.Reset()
				if err := s.TW.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TW\"")
			}
		case "TZ":
			if err := func() error {
				s.TZ.Reset()
				if err := s.TZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TZ\"")
			}
		case "UG":
			if err := func() error {
				s.UG.Reset()
				if err := s.UG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"UG\"")
			}
		case "US":
			if err := func() error {
				s.US.Reset()
				if err := s.US.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"US\"")
			}
		case "UY":
			if err := func() error {
				s.UY.Reset()
				if err := s.UY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"UY\"")
			}
		case "VE":
			if err := func() error {
				s.VE.Reset()
				if err := s.VE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"VE\"")
			}
		case "ZA":
			if err := func() error {
				s.ZA.Reset()
				if err := s.ZA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ZA\"")
			}
		case "ZM":
			if err := func() error {
				s.ZM.Reset()
				if err := s.ZM.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ZM\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResults")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResults) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResults) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsAE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsAE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsAE from json.
func (s *TvSeasonWatchProvidersOKResultsAE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsAE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsAEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsAEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsAE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsAE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsAEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsAEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsAEFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsAEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsAEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsAEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsAEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsAR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsAR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsAR from json.
func (s *TvSeasonWatchProvidersOKResultsAR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsAR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsARFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsARFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsAR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsAR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsARFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsARFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsARFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsARFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsARFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsARFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsARFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsARFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsARFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsAT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsAT = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeasonWatchProvidersOKResultsAT from json.
func (s *TvSeasonWatchProvidersOKResultsAT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsAT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsATFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsATFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsATBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsATBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsAT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsAT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsATBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsATBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsATBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsATBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsATBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsATBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsATBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsATBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsATBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsATFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsATFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsATFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsATFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsATFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsATFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsATFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsATFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsATFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAU) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsAU) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsAU = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsAU from json.
func (s *TvSeasonWatchProvidersOKResultsAU) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsAU to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsAUBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsAUBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsAUFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsAUFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsAU")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsAU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAUBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsAUBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsAUBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsAUBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsAUBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsAUBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsAUBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAUBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsAUBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAUFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsAUFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsAUFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsAUFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsAUFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsAUFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsAUFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsAUFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsAUFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBA = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBA from json.
func (s *TvSeasonWatchProvidersOKResultsBA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsBAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsBAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBAFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsBAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBB) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBB) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBB = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBB from json.
func (s *TvSeasonWatchProvidersOKResultsBB) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBB to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsBBFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsBBFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBB")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBBFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBBFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBBFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBBFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsBBFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBBFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBBFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBBFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBBFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBE from json.
func (s *TvSeasonWatchProvidersOKResultsBE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsBEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsBEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBEFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsBEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBG = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBG from json.
func (s *TvSeasonWatchProvidersOKResultsBG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsBGFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsBGFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBGFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBGFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBGFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBGFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsBGFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBGFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBGFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBGFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBGFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBO = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBO from json.
func (s *TvSeasonWatchProvidersOKResultsBO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsBOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsBOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBOFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsBOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBR from json.
func (s *TvSeasonWatchProvidersOKResultsBR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsBRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsBRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBRFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsBRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBS = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBS from json.
func (s *TvSeasonWatchProvidersOKResultsBS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsBSFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsBSFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBSFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsBSFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsBSFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsBSFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsBSFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsBSFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsBSFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsBSFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsBSFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCA = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCA from json.
func (s *TvSeasonWatchProvidersOKResultsCA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsCABuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsCABuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsCAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsCAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCABuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCABuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCABuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCABuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsCABuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCABuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCABuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCABuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCABuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCAFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsCAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCH) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCH) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCH = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCH from json.
func (s *TvSeasonWatchProvidersOKResultsCH) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCH to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsCHBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsCHBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsCHFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsCHFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCH")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCHBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCHBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCHBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCHBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsCHBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCHBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCHBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCHBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCHBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCHFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCHFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCHFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCHFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsCHFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCHFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCHFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCHFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCHFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCI) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCI) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCI = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCI from json.
func (s *TvSeasonWatchProvidersOKResultsCI) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCI to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsCIFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsCIFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCI")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCIFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCIFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCIFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCIFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsCIFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCIFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCIFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCIFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCIFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCL = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCL from json.
func (s *TvSeasonWatchProvidersOKResultsCL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsCLFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsCLFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCLFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCLFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCLFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCLFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsCLFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCLFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCLFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCLFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCLFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCO = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCO from json.
func (s *TvSeasonWatchProvidersOKResultsCO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsCOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsCOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCOFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsCOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCR from json.
func (s *TvSeasonWatchProvidersOKResultsCR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsCRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsCRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCRFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsCRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCZ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCZ from json.
func (s *TvSeasonWatchProvidersOKResultsCZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsCZFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsCZFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCZFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsCZFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsCZFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsCZFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsCZFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsCZFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsCZFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsCZFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsCZFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsDE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsDE = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsDE from json.
func (s *TvSeasonWatchProvidersOKResultsDE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsDE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsDEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsDEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsDEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsDEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsDE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsDE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsDEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsDEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsDEBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsDEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsDEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsDEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsDEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsDEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsDEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsDEFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsDEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsDEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsDEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsDEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsDK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsDK = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsDK from json.
func (s *TvSeasonWatchProvidersOKResultsDK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsDK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsDKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsDKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsDK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsDK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsDKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsDKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsDKFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsDKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsDKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsDKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsDKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsDO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsDO = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsDO from json.
func (s *TvSeasonWatchProvidersOKResultsDO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsDO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsDOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsDOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsDO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsDO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsDOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsDOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsDOFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsDOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsDOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsDOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsDOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsDZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsDZ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsDZ from json.
func (s *TvSeasonWatchProvidersOKResultsDZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsDZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsDZFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsDZFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsDZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsDZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDZFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsDZFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsDZFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsDZFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsDZFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsDZFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsDZFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsDZFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsDZFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsEC) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsEC) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsEC = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsEC from json.
func (s *TvSeasonWatchProvidersOKResultsEC) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsEC to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsECFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsECFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsEC")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsEC) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsEC) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsECFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsECFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsECFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsECFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsECFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsECFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsECFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsECFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsECFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsEG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsEG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsEG = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsEG from json.
func (s *TvSeasonWatchProvidersOKResultsEG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsEG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsEGFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsEGFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsEG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsEG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsEG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsEGFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsEGFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsEGFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsEGFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsEGFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsEGFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsEGFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsEGFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsEGFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsES) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsES) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsES = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsES from json.
func (s *TvSeasonWatchProvidersOKResultsES) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsES to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsESFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsESFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsES")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsES) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsES) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsESFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsESFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsESFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsESFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsESFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsESFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsESFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsESFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsESFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsFI) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsFI) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsFI = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeasonWatchProvidersOKResultsFI from json.
func (s *TvSeasonWatchProvidersOKResultsFI) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsFI to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsFIFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsFIFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsFIBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsFIBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsFI")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsFI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsFI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsFIBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsFIBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsFIBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsFIBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsFIBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsFIBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsFIBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsFIBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsFIBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsFIFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsFIFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsFIFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsFIFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsFIFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsFIFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsFIFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsFIFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsFIFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsFR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsFR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsFR = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeasonWatchProvidersOKResultsFR from json.
func (s *TvSeasonWatchProvidersOKResultsFR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsFR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsFRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsFRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsFRBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsFRBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsFR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsFR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsFR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsFRBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsFRBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsFRBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsFRBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsFRBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsFRBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsFRBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsFRBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsFRBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsFRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsFRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsFRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsFRFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsFRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsFRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsFRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsFRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsFRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGB) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsGB) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsGB = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeasonWatchProvidersOKResultsGB from json.
func (s *TvSeasonWatchProvidersOKResultsGB) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsGB to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsGBFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsGBFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsGBBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsGBBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsGB")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsGB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGBBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsGBBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsGBBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsGBBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsGBBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsGBBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsGBBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGBBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsGBBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGBFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsGBFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsGBFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsGBFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsGBFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsGBFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsGBFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGBFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsGBFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGF) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsGF) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsGF = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsGF from json.
func (s *TvSeasonWatchProvidersOKResultsGF) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsGF to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsGFFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsGFFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsGF")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGF) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsGF) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGFFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsGFFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsGFFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsGFFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsGFFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsGFFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsGFFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGFFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsGFFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGH) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsGH) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsGH = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsGH from json.
func (s *TvSeasonWatchProvidersOKResultsGH) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsGH to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsGHFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsGHFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsGH")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsGH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGHFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsGHFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsGHFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsGHFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsGHFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsGHFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsGHFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGHFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsGHFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGQ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsGQ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsGQ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsGQ from json.
func (s *TvSeasonWatchProvidersOKResultsGQ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsGQ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsGQFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsGQFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsGQ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGQ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsGQ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGQFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsGQFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsGQFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsGQFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsGQFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsGQFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsGQFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGQFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsGQFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsGT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsGT = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsGT from json.
func (s *TvSeasonWatchProvidersOKResultsGT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsGT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsGTFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsGTFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsGT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsGT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGTFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsGTFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsGTFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsGTFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsGTFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsGTFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsGTFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsGTFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsGTFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsHK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsHK = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsHK from json.
func (s *TvSeasonWatchProvidersOKResultsHK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsHK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsHKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsHKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsHK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsHK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsHKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsHKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsHKFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsHKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsHKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsHKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsHKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHN) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsHN) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsHN = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsHN from json.
func (s *TvSeasonWatchProvidersOKResultsHN) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsHN to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsHNFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsHNFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsHN")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsHN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHNFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsHNFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsHNFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsHNFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsHNFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsHNFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsHNFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHNFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsHNFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsHR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsHR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsHR from json.
func (s *TvSeasonWatchProvidersOKResultsHR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsHR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsHRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsHRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsHR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsHR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsHRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsHRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsHRFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsHRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsHRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsHRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsHRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHU) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsHU) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsHU = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsHU from json.
func (s *TvSeasonWatchProvidersOKResultsHU) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsHU to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsHUFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsHUFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsHU")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsHU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHUFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsHUFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsHUFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsHUFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsHUFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsHUFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsHUFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsHUFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsHUFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsID) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsID = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsID from json.
func (s *TvSeasonWatchProvidersOKResultsID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsIDFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsIDFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIDFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsIDFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsIDFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsIDFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsIDFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsIDFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsIDFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIDFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsIDFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsIE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsIE = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsIE from json.
func (s *TvSeasonWatchProvidersOKResultsIE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsIE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsIEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsIEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsIEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsIEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsIE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsIE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsIEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsIEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsIEBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsIEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsIEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsIEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsIEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsIEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsIEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsIEFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsIEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsIEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsIEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsIEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsIL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsIL = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsIL from json.
func (s *TvSeasonWatchProvidersOKResultsIL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsIL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsILFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsILFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsIL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsIL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsILFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsILFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsILFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsILFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsILFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsILFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsILFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsILFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsILFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIQ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsIQ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsIQ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsIQ from json.
func (s *TvSeasonWatchProvidersOKResultsIQ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsIQ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsIQFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsIQFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsIQ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIQ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsIQ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIQFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsIQFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsIQFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsIQFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsIQFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsIQFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsIQFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIQFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsIQFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsIT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsIT = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeasonWatchProvidersOKResultsIT from json.
func (s *TvSeasonWatchProvidersOKResultsIT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsIT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsITFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsITFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsITBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsITBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsIT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsIT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsIT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsITBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsITBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsITBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsITBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsITBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsITBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsITBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsITBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsITBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsITFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsITFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsITFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsITFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsITFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsITFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsITFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsITFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsITFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsJM) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsJM) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsJM = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsJM from json.
func (s *TvSeasonWatchProvidersOKResultsJM) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsJM to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsJMFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsJMFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsJM")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsJM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsJM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsJMFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsJMFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsJMFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsJMFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsJMFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsJMFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsJMFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsJMFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsJMFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsJP) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsJP) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsJP = [4]string{
	0: "link",
	1: "buy",
	2: "flatrate",
	3: "rent",
}

// Decode decodes TvSeasonWatchProvidersOKResultsJP from json.
func (s *TvSeasonWatchProvidersOKResultsJP) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsJP to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsJPBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsJPBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsJPFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsJPFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]TvSeasonWatchProvidersOKResultsJPRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsJPRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsJP")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsJP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsJP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsJPBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsJPBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsJPBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsJPBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsJPBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsJPBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsJPBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsJPBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsJPBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsJPFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsJPFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsJPFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsJPFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsJPFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsJPFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsJPFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsJPFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsJPFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsJPRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsJPRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsJPRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsJPRentItem from json.
func (s *TvSeasonWatchProvidersOKResultsJPRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsJPRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsJPRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsJPRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsJPRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsKE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsKE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsKE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsKE from json.
func (s *TvSeasonWatchProvidersOKResultsKE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsKE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsKEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsKEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsKE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsKE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsKE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsKEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsKEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsKEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsKEFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsKEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsKEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsKEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsKEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsKEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsKR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsKR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsKR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsKR from json.
func (s *TvSeasonWatchProvidersOKResultsKR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsKR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsKRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsKRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsKR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsKR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsKR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsKRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsKRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsKRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsKRFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsKRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsKRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsKRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsKRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsKRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsLB) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsLB) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsLB = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsLB from json.
func (s *TvSeasonWatchProvidersOKResultsLB) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsLB to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsLBFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsLBFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsLB")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsLB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsLB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsLBFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsLBFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsLBFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsLBFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsLBFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsLBFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsLBFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsLBFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsLBFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsLY) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsLY) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsLY = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsLY from json.
func (s *TvSeasonWatchProvidersOKResultsLY) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsLY to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsLYFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsLYFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsLY")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsLY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsLY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsLYFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsLYFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsLYFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsLYFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsLYFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsLYFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsLYFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsLYFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsLYFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMD) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsMD) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsMD = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsMD from json.
func (s *TvSeasonWatchProvidersOKResultsMD) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsMD to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsMDFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsMDFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsMD")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMD) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsMD) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMDFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsMDFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsMDFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsMDFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsMDFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsMDFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsMDFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMDFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsMDFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsMK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsMK = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsMK from json.
func (s *TvSeasonWatchProvidersOKResultsMK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsMK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsMKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsMKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsMK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsMK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsMKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsMKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsMKFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsMKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsMKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsMKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsMKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMU) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsMU) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsMU = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsMU from json.
func (s *TvSeasonWatchProvidersOKResultsMU) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsMU to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsMUFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsMUFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsMU")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsMU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMUFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsMUFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsMUFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsMUFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsMUFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsMUFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsMUFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMUFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsMUFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMX) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsMX) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsMX = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsMX from json.
func (s *TvSeasonWatchProvidersOKResultsMX) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsMX to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsMXFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsMXFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsMX")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMX) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsMX) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMXFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsMXFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsMXFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsMXFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsMXFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsMXFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsMXFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMXFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsMXFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMY) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsMY) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsMY = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsMY from json.
func (s *TvSeasonWatchProvidersOKResultsMY) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsMY to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsMYFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsMYFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsMY")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsMY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMYFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsMYFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsMYFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsMYFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsMYFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsMYFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsMYFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMYFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsMYFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsMZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsMZ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsMZ from json.
func (s *TvSeasonWatchProvidersOKResultsMZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsMZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsMZFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsMZFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsMZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsMZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMZFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsMZFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsMZFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsMZFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsMZFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsMZFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsMZFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsMZFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsMZFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsNE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsNE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsNE from json.
func (s *TvSeasonWatchProvidersOKResultsNE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsNE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsNEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsNEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsNE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsNE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsNEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsNEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsNEFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsNEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsNEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsNEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsNEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsNG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsNG = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsNG from json.
func (s *TvSeasonWatchProvidersOKResultsNG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsNG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsNGFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsNGFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsNG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsNG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNGFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsNGFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsNGFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsNGFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsNGFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsNGFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsNGFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNGFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsNGFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsNL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsNL = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsNL from json.
func (s *TvSeasonWatchProvidersOKResultsNL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsNL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsNLBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsNLBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsNLFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsNLFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsNL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsNL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNLBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsNLBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsNLBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsNLBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsNLBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsNLBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsNLBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNLBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsNLBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNLFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsNLFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsNLFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsNLFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsNLFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsNLFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsNLFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNLFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsNLFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsNO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsNO = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsNO from json.
func (s *TvSeasonWatchProvidersOKResultsNO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsNO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsNOBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsNOBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsNOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsNOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsNO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsNO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNOBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsNOBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsNOBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsNOBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsNOBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsNOBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsNOBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNOBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsNOBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsNOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsNOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsNOFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsNOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsNOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsNOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsNOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsNZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsNZ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsNZ from json.
func (s *TvSeasonWatchProvidersOKResultsNZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsNZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsNZFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsNZFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsNZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsNZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNZFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsNZFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsNZFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsNZFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsNZFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsNZFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsNZFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsNZFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsNZFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPA = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPA from json.
func (s *TvSeasonWatchProvidersOKResultsPA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsPAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsPAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPAFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsPAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPE from json.
func (s *TvSeasonWatchProvidersOKResultsPE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsPEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsPEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPEFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsPEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPH) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPH) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPH = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPH from json.
func (s *TvSeasonWatchProvidersOKResultsPH) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPH to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsPHFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsPHFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPH")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPHFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPHFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPHFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPHFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsPHFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPHFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPHFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPHFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPHFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPL = [3]string{
	0: "link",
	1: "rent",
	2: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPL from json.
func (s *TvSeasonWatchProvidersOKResultsPL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]TvSeasonWatchProvidersOKResultsPLRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsPLRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsPLFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsPLFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPLFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPLFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPLFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPLFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsPLFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPLFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPLFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPLFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPLFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPLRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPLRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPLRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPLRentItem from json.
func (s *TvSeasonWatchProvidersOKResultsPLRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPLRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPLRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPLRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPLRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPS = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPS from json.
func (s *TvSeasonWatchProvidersOKResultsPS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsPSFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsPSFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPSFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPSFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPSFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPSFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsPSFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPSFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPSFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPSFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPSFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPT = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPT from json.
func (s *TvSeasonWatchProvidersOKResultsPT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsPTFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsPTFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPTFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPTFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPTFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPTFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsPTFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPTFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPTFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPTFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPTFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPY) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPY) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPY = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPY from json.
func (s *TvSeasonWatchProvidersOKResultsPY) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPY to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsPYFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsPYFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPY")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPYFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsPYFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsPYFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsPYFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsPYFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsPYFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsPYFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsPYFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsPYFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsRO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsRO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsRO = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsRO from json.
func (s *TvSeasonWatchProvidersOKResultsRO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsRO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsROFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsROFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsRO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsRO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsRO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsROFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsROFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsROFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsROFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsROFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsROFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsROFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsROFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsROFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsRS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsRS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsRS = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsRS from json.
func (s *TvSeasonWatchProvidersOKResultsRS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsRS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsRSFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsRSFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsRS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsRS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsRS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsRSFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsRSFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsRSFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsRSFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsRSFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsRSFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsRSFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsRSFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsRSFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsRU) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsRU) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsRU = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsRU from json.
func (s *TvSeasonWatchProvidersOKResultsRU) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsRU to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsRUFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsRUFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsRU")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsRU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsRU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsRUFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsRUFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsRUFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsRUFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsRUFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsRUFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsRUFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsRUFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsRUFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSA = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSA from json.
func (s *TvSeasonWatchProvidersOKResultsSA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsSAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsSAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSAFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsSAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSC) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSC) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSC = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSC from json.
func (s *TvSeasonWatchProvidersOKResultsSC) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSC to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsSCFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsSCFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSC")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSC) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSC) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSCFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSCFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSCFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSCFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsSCFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSCFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSCFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSCFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSCFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSE = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSE from json.
func (s *TvSeasonWatchProvidersOKResultsSE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsSEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsSEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsSEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsSEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSEBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsSEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSEFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsSEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSG = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSG from json.
func (s *TvSeasonWatchProvidersOKResultsSG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsSGFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsSGFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSGFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSGFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSGFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSGFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsSGFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSGFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSGFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSGFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSGFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSI) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSI) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSI = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSI from json.
func (s *TvSeasonWatchProvidersOKResultsSI) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSI to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsSIFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsSIFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSI")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSIFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSIFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSIFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSIFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsSIFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSIFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSIFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSIFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSIFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSK = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSK from json.
func (s *TvSeasonWatchProvidersOKResultsSK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsSKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsSKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSKFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsSKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSN) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSN) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSN = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSN from json.
func (s *TvSeasonWatchProvidersOKResultsSN) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSN to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsSNFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsSNFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSN")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSNFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSNFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSNFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSNFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsSNFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSNFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSNFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSNFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSNFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSV) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSV) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSV = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSV from json.
func (s *TvSeasonWatchProvidersOKResultsSV) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSV to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsSVFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsSVFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSV")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSV) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSV) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSVFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsSVFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsSVFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsSVFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsSVFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsSVFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsSVFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsSVFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsSVFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTH) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsTH) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsTH = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsTH from json.
func (s *TvSeasonWatchProvidersOKResultsTH) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsTH to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsTHFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsTHFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsTH")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsTH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTHFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsTHFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsTHFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsTHFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsTHFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsTHFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsTHFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTHFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsTHFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsTR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsTR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsTR from json.
func (s *TvSeasonWatchProvidersOKResultsTR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsTR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsTRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsTRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsTR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsTR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsTRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsTRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsTRFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsTRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsTRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsTRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsTRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsTT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsTT = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsTT from json.
func (s *TvSeasonWatchProvidersOKResultsTT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsTT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsTTFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsTTFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsTT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsTT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTTFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsTTFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsTTFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsTTFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsTTFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsTTFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsTTFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTTFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsTTFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTW) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsTW) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsTW = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsTW from json.
func (s *TvSeasonWatchProvidersOKResultsTW) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsTW to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsTWFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsTWFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsTW")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTW) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsTW) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTWFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsTWFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsTWFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsTWFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsTWFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsTWFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsTWFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTWFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsTWFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsTZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsTZ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsTZ from json.
func (s *TvSeasonWatchProvidersOKResultsTZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsTZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsTZFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsTZFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsTZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsTZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTZFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsTZFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsTZFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsTZFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsTZFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsTZFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsTZFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsTZFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsTZFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsUG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsUG = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsUG from json.
func (s *TvSeasonWatchProvidersOKResultsUG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsUG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsUGFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsUGFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsUG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsUG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUGFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsUGFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsUGFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsUGFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsUGFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsUGFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsUGFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUGFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsUGFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsUS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Free != nil {
			e.FieldStart("free")
			e.ArrStart()
			for _, elem := range s.Free {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsUS = [4]string{
	0: "link",
	1: "buy",
	2: "free",
	3: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsUS from json.
func (s *TvSeasonWatchProvidersOKResultsUS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsUS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeasonWatchProvidersOKResultsUSBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsUSBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "free":
			if err := func() error {
				s.Free = make([]TvSeasonWatchProvidersOKResultsUSFreeItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsUSFreeItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Free = append(s.Free, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"free\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsUSFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsUSFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsUS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsUS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUSBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsUSBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsUSBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsUSBuyItem from json.
func (s *TvSeasonWatchProvidersOKResultsUSBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsUSBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsUSBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUSBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsUSBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUSFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsUSFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsUSFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsUSFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsUSFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsUSFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsUSFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUSFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsUSFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUSFreeItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsUSFreeItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsUSFreeItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsUSFreeItem from json.
func (s *TvSeasonWatchProvidersOKResultsUSFreeItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsUSFreeItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsUSFreeItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUSFreeItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsUSFreeItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUY) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsUY) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsUY = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsUY from json.
func (s *TvSeasonWatchProvidersOKResultsUY) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsUY to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsUYFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsUYFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsUY")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsUY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUYFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsUYFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsUYFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsUYFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsUYFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsUYFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsUYFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsUYFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsUYFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsVE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsVE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsVE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsVE from json.
func (s *TvSeasonWatchProvidersOKResultsVE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsVE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsVEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsVEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsVE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsVE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsVE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsVEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsVEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsVEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsVEFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsVEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsVEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsVEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsVEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsVEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsZA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsZA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsZA = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsZA from json.
func (s *TvSeasonWatchProvidersOKResultsZA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsZA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsZAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsZAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsZA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsZA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsZA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsZAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsZAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsZAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsZAFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsZAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsZAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsZAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsZAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsZAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsZM) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsZM) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsZM = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeasonWatchProvidersOKResultsZM from json.
func (s *TvSeasonWatchProvidersOKResultsZM) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsZM to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeasonWatchProvidersOKResultsZMFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeasonWatchProvidersOKResultsZMFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsZM")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsZM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsZM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsZMFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeasonWatchProvidersOKResultsZMFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeasonWatchProvidersOKResultsZMFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeasonWatchProvidersOKResultsZMFlatrateItem from json.
func (s *TvSeasonWatchProvidersOKResultsZMFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeasonWatchProvidersOKResultsZMFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeasonWatchProvidersOKResultsZMFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeasonWatchProvidersOKResultsZMFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeasonWatchProvidersOKResultsZMFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAccountStatesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAccountStatesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Favorite.Set {
			e.FieldStart("favorite")
			s.Favorite.Encode(e)
		}
	}
	{
		if s.Rated.Set {
			e.FieldStart("rated")
			s.Rated.Encode(e)
		}
	}
	{
		if s.Watchlist.Set {
			e.FieldStart("watchlist")
			s.Watchlist.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesAccountStatesOK = [4]string{
	0: "id",
	1: "favorite",
	2: "rated",
	3: "watchlist",
}

// Decode decodes TvSeriesAccountStatesOK from json.
func (s *TvSeriesAccountStatesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAccountStatesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "favorite":
			if err := func() error {
				s.Favorite.Reset()
				if err := s.Favorite.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"favorite\"")
			}
		case "rated":
			if err := func() error {
				s.Rated.Reset()
				if err := s.Rated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rated\"")
			}
		case "watchlist":
			if err := func() error {
				s.Watchlist.Reset()
				if err := s.Watchlist.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"watchlist\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAccountStatesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAccountStatesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAccountStatesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAccountStatesOKRated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAccountStatesOKRated) encodeFields(e *jx.Encoder) {
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesAccountStatesOKRated = [1]string{
	0: "value",
}

// Decode decodes TvSeriesAccountStatesOKRated from json.
func (s *TvSeriesAccountStatesOKRated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAccountStatesOKRated to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAccountStatesOKRated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAccountStatesOKRated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAccountStatesOKRated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAddRatingOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAddRatingOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesAddRatingOK = [2]string{
	0: "status_code",
	1: "status_message",
}

// Decode decodes TvSeriesAddRatingOK from json.
func (s *TvSeriesAddRatingOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAddRatingOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAddRatingOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAddRatingOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAddRatingOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAddRatingReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAddRatingReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("RAW_BODY")
		e.Str(s.RAWBODY)
	}
}

var jsonFieldsNameOfTvSeriesAddRatingReq = [1]string{
	0: "RAW_BODY",
}

// Decode decodes TvSeriesAddRatingReq from json.
func (s *TvSeriesAddRatingReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAddRatingReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "RAW_BODY":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RAWBODY = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RAW_BODY\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAddRatingReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfTvSeriesAddRatingReq) {
					name = jsonFieldsNameOfTvSeriesAddRatingReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAddRatingReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAddRatingReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAggregateCreditsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAggregateCreditsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Cast != nil {
			e.FieldStart("cast")
			e.ArrStart()
			for _, elem := range s.Cast {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Crew != nil {
			e.FieldStart("crew")
			e.ArrStart()
			for _, elem := range s.Crew {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesAggregateCreditsOK = [3]string{
	0: "cast",
	1: "crew",
	2: "id",
}

// Decode decodes TvSeriesAggregateCreditsOK from json.
func (s *TvSeriesAggregateCreditsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAggregateCreditsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cast":
			if err := func() error {
				s.Cast = make([]TvSeriesAggregateCreditsOKCastItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesAggregateCreditsOKCastItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Cast = append(s.Cast, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cast\"")
			}
		case "crew":
			if err := func() error {
				s.Crew = make([]TvSeriesAggregateCreditsOKCrewItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesAggregateCreditsOKCrewItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Crew = append(s.Crew, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"crew\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAggregateCreditsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAggregateCreditsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAggregateCreditsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAggregateCreditsOKCastItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAggregateCreditsOKCastItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.Roles != nil {
			e.FieldStart("roles")
			e.ArrStart()
			for _, elem := range s.Roles {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalEpisodeCount.Set {
			e.FieldStart("total_episode_count")
			s.TotalEpisodeCount.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesAggregateCreditsOKCastItem = [11]string{
	0:  "adult",
	1:  "gender",
	2:  "id",
	3:  "known_for_department",
	4:  "name",
	5:  "original_name",
	6:  "popularity",
	7:  "profile_path",
	8:  "roles",
	9:  "total_episode_count",
	10: "order",
}

// Decode decodes TvSeriesAggregateCreditsOKCastItem from json.
func (s *TvSeriesAggregateCreditsOKCastItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAggregateCreditsOKCastItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "roles":
			if err := func() error {
				s.Roles = make([]TvSeriesAggregateCreditsOKCastItemRolesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesAggregateCreditsOKCastItemRolesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Roles = append(s.Roles, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"roles\"")
			}
		case "total_episode_count":
			if err := func() error {
				s.TotalEpisodeCount.Reset()
				if err := s.TotalEpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_episode_count\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAggregateCreditsOKCastItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAggregateCreditsOKCastItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAggregateCreditsOKCastItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAggregateCreditsOKCastItemRolesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAggregateCreditsOKCastItemRolesItem) encodeFields(e *jx.Encoder) {
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.EpisodeCount.Set {
			e.FieldStart("episode_count")
			s.EpisodeCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesAggregateCreditsOKCastItemRolesItem = [3]string{
	0: "credit_id",
	1: "character",
	2: "episode_count",
}

// Decode decodes TvSeriesAggregateCreditsOKCastItemRolesItem from json.
func (s *TvSeriesAggregateCreditsOKCastItemRolesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAggregateCreditsOKCastItemRolesItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "episode_count":
			if err := func() error {
				s.EpisodeCount.Reset()
				if err := s.EpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAggregateCreditsOKCastItemRolesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAggregateCreditsOKCastItemRolesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAggregateCreditsOKCastItemRolesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAggregateCreditsOKCrewItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAggregateCreditsOKCrewItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.Jobs != nil {
			e.FieldStart("jobs")
			e.ArrStart()
			for _, elem := range s.Jobs {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.TotalEpisodeCount.Set {
			e.FieldStart("total_episode_count")
			s.TotalEpisodeCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesAggregateCreditsOKCrewItem = [11]string{
	0:  "adult",
	1:  "gender",
	2:  "id",
	3:  "known_for_department",
	4:  "name",
	5:  "original_name",
	6:  "popularity",
	7:  "profile_path",
	8:  "jobs",
	9:  "department",
	10: "total_episode_count",
}

// Decode decodes TvSeriesAggregateCreditsOKCrewItem from json.
func (s *TvSeriesAggregateCreditsOKCrewItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAggregateCreditsOKCrewItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "jobs":
			if err := func() error {
				s.Jobs = make([]TvSeriesAggregateCreditsOKCrewItemJobsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesAggregateCreditsOKCrewItemJobsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Jobs = append(s.Jobs, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jobs\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "total_episode_count":
			if err := func() error {
				s.TotalEpisodeCount.Reset()
				if err := s.TotalEpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_episode_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAggregateCreditsOKCrewItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAggregateCreditsOKCrewItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAggregateCreditsOKCrewItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAggregateCreditsOKCrewItemJobsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAggregateCreditsOKCrewItemJobsItem) encodeFields(e *jx.Encoder) {
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Job.Set {
			e.FieldStart("job")
			s.Job.Encode(e)
		}
	}
	{
		if s.EpisodeCount.Set {
			e.FieldStart("episode_count")
			s.EpisodeCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesAggregateCreditsOKCrewItemJobsItem = [3]string{
	0: "credit_id",
	1: "job",
	2: "episode_count",
}

// Decode decodes TvSeriesAggregateCreditsOKCrewItemJobsItem from json.
func (s *TvSeriesAggregateCreditsOKCrewItemJobsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAggregateCreditsOKCrewItemJobsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "job":
			if err := func() error {
				s.Job.Reset()
				if err := s.Job.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job\"")
			}
		case "episode_count":
			if err := func() error {
				s.EpisodeCount.Reset()
				if err := s.EpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAggregateCreditsOKCrewItemJobsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAggregateCreditsOKCrewItemJobsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAggregateCreditsOKCrewItemJobsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAiringTodayListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAiringTodayListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesAiringTodayListOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes TvSeriesAiringTodayListOK from json.
func (s *TvSeriesAiringTodayListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAiringTodayListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesAiringTodayListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesAiringTodayListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAiringTodayListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAiringTodayListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAiringTodayListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAiringTodayListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAiringTodayListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesAiringTodayListOKResultsItem = [13]string{
	0:  "backdrop_path",
	1:  "first_air_date",
	2:  "genre_ids",
	3:  "id",
	4:  "name",
	5:  "origin_country",
	6:  "original_language",
	7:  "original_name",
	8:  "overview",
	9:  "popularity",
	10: "poster_path",
	11: "vote_average",
	12: "vote_count",
}

// Decode decodes TvSeriesAiringTodayListOKResultsItem from json.
func (s *TvSeriesAiringTodayListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAiringTodayListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAiringTodayListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAiringTodayListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAiringTodayListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAlternativeTitlesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAlternativeTitlesOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesAlternativeTitlesOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes TvSeriesAlternativeTitlesOK from json.
func (s *TvSeriesAlternativeTitlesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAlternativeTitlesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesAlternativeTitlesOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesAlternativeTitlesOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAlternativeTitlesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAlternativeTitlesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAlternativeTitlesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesAlternativeTitlesOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesAlternativeTitlesOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesAlternativeTitlesOKResultsItem = [3]string{
	0: "iso_3166_1",
	1: "title",
	2: "type",
}

// Decode decodes TvSeriesAlternativeTitlesOKResultsItem from json.
func (s *TvSeriesAlternativeTitlesOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesAlternativeTitlesOKResultsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesAlternativeTitlesOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesAlternativeTitlesOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesAlternativeTitlesOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesChangesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesChangesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Changes != nil {
			e.FieldStart("changes")
			e.ArrStart()
			for _, elem := range s.Changes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesChangesOK = [1]string{
	0: "changes",
}

// Decode decodes TvSeriesChangesOK from json.
func (s *TvSeriesChangesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesChangesOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "changes":
			if err := func() error {
				s.Changes = make([]TvSeriesChangesOKChangesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesChangesOKChangesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Changes = append(s.Changes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"changes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesChangesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesChangesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesChangesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesChangesOKChangesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesChangesOKChangesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Items != nil {
			e.FieldStart("items")
			e.ArrStart()
			for _, elem := range s.Items {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesChangesOKChangesItem = [2]string{
	0: "key",
	1: "items",
}

// Decode decodes TvSeriesChangesOKChangesItem from json.
func (s *TvSeriesChangesOKChangesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesChangesOKChangesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "items":
			if err := func() error {
				s.Items = make([]TvSeriesChangesOKChangesItemItemsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesChangesOKChangesItemItemsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Items = append(s.Items, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"items\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesChangesOKChangesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesChangesOKChangesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesChangesOKChangesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesChangesOKChangesItemItemsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesChangesOKChangesItemItemsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Action.Set {
			e.FieldStart("action")
			s.Action.Encode(e)
		}
	}
	{
		if s.Time.Set {
			e.FieldStart("time")
			s.Time.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
	{
		if s.OriginalValue.Set {
			e.FieldStart("original_value")
			s.OriginalValue.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesChangesOKChangesItemItemsItem = [7]string{
	0: "id",
	1: "action",
	2: "time",
	3: "iso_639_1",
	4: "iso_3166_1",
	5: "value",
	6: "original_value",
}

// Decode decodes TvSeriesChangesOKChangesItemItemsItem from json.
func (s *TvSeriesChangesOKChangesItemItemsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesChangesOKChangesItemItemsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "action":
			if err := func() error {
				s.Action.Reset()
				if err := s.Action.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"action\"")
			}
		case "time":
			if err := func() error {
				s.Time.Reset()
				if err := s.Time.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		case "original_value":
			if err := func() error {
				s.OriginalValue.Reset()
				if err := s.OriginalValue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_value\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesChangesOKChangesItemItemsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesChangesOKChangesItemItemsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesChangesOKChangesItemItemsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesChangesOKChangesItemItemsItemOriginalValue) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesChangesOKChangesItemItemsItemOriginalValue) encodeFields(e *jx.Encoder) {
	{
		if s.Poster.Set {
			e.FieldStart("poster")
			s.Poster.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesChangesOKChangesItemItemsItemOriginalValue = [1]string{
	0: "poster",
}

// Decode decodes TvSeriesChangesOKChangesItemItemsItemOriginalValue from json.
func (s *TvSeriesChangesOKChangesItemItemsItemOriginalValue) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesChangesOKChangesItemItemsItemOriginalValue to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "poster":
			if err := func() error {
				s.Poster.Reset()
				if err := s.Poster.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesChangesOKChangesItemItemsItemOriginalValue")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesChangesOKChangesItemItemsItemOriginalValue) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesChangesOKChangesItemItemsItemOriginalValue) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesChangesOKChangesItemItemsItemOriginalValuePoster) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesChangesOKChangesItemItemsItemOriginalValuePoster) encodeFields(e *jx.Encoder) {
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesChangesOKChangesItemItemsItemOriginalValuePoster = [2]string{
	0: "file_path",
	1: "iso_639_1",
}

// Decode decodes TvSeriesChangesOKChangesItemItemsItemOriginalValuePoster from json.
func (s *TvSeriesChangesOKChangesItemItemsItemOriginalValuePoster) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesChangesOKChangesItemItemsItemOriginalValuePoster to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesChangesOKChangesItemItemsItemOriginalValuePoster")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesChangesOKChangesItemItemsItemOriginalValuePoster) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesChangesOKChangesItemItemsItemOriginalValuePoster) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesChangesOKChangesItemItemsItemValue) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesChangesOKChangesItemItemsItemValue) encodeFields(e *jx.Encoder) {
	{
		if s.Poster.Set {
			e.FieldStart("poster")
			s.Poster.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesChangesOKChangesItemItemsItemValue = [1]string{
	0: "poster",
}

// Decode decodes TvSeriesChangesOKChangesItemItemsItemValue from json.
func (s *TvSeriesChangesOKChangesItemItemsItemValue) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesChangesOKChangesItemItemsItemValue to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "poster":
			if err := func() error {
				s.Poster.Reset()
				if err := s.Poster.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesChangesOKChangesItemItemsItemValue")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesChangesOKChangesItemItemsItemValue) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesChangesOKChangesItemItemsItemValue) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesChangesOKChangesItemItemsItemValuePoster) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesChangesOKChangesItemItemsItemValuePoster) encodeFields(e *jx.Encoder) {
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesChangesOKChangesItemItemsItemValuePoster = [2]string{
	0: "file_path",
	1: "iso_639_1",
}

// Decode decodes TvSeriesChangesOKChangesItemItemsItemValuePoster from json.
func (s *TvSeriesChangesOKChangesItemItemsItemValuePoster) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesChangesOKChangesItemItemsItemValuePoster to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesChangesOKChangesItemItemsItemValuePoster")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesChangesOKChangesItemItemsItemValuePoster) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesChangesOKChangesItemItemsItemValuePoster) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesContentRatingsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesContentRatingsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesContentRatingsOK = [2]string{
	0: "results",
	1: "id",
}

// Decode decodes TvSeriesContentRatingsOK from json.
func (s *TvSeriesContentRatingsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesContentRatingsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesContentRatingsOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesContentRatingsOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesContentRatingsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesContentRatingsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesContentRatingsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesContentRatingsOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesContentRatingsOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Descriptors != nil {
			e.FieldStart("descriptors")
			e.ArrStart()
			for _, elem := range s.Descriptors {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Rating.Set {
			e.FieldStart("rating")
			s.Rating.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesContentRatingsOKResultsItem = [3]string{
	0: "descriptors",
	1: "iso_3166_1",
	2: "rating",
}

// Decode decodes TvSeriesContentRatingsOKResultsItem from json.
func (s *TvSeriesContentRatingsOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesContentRatingsOKResultsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "descriptors":
			if err := func() error {
				s.Descriptors = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.Descriptors = append(s.Descriptors, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"descriptors\"")
			}
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "rating":
			if err := func() error {
				s.Rating.Reset()
				if err := s.Rating.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rating\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesContentRatingsOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesContentRatingsOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesContentRatingsOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesCreditsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesCreditsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Cast != nil {
			e.FieldStart("cast")
			e.ArrStart()
			for _, elem := range s.Cast {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Crew != nil {
			e.FieldStart("crew")
			e.ArrStart()
			for _, elem := range s.Crew {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesCreditsOK = [3]string{
	0: "cast",
	1: "crew",
	2: "id",
}

// Decode decodes TvSeriesCreditsOK from json.
func (s *TvSeriesCreditsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesCreditsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cast":
			if err := func() error {
				s.Cast = make([]TvSeriesCreditsOKCastItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesCreditsOKCastItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Cast = append(s.Cast, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cast\"")
			}
		case "crew":
			if err := func() error {
				s.Crew = make([]TvSeriesCreditsOKCrewItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesCreditsOKCrewItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Crew = append(s.Crew, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"crew\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesCreditsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesCreditsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesCreditsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesCreditsOKCastItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesCreditsOKCastItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.Character.Set {
			e.FieldStart("character")
			s.Character.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesCreditsOKCastItem = [11]string{
	0:  "adult",
	1:  "gender",
	2:  "id",
	3:  "known_for_department",
	4:  "name",
	5:  "original_name",
	6:  "popularity",
	7:  "profile_path",
	8:  "character",
	9:  "credit_id",
	10: "order",
}

// Decode decodes TvSeriesCreditsOKCastItem from json.
func (s *TvSeriesCreditsOKCastItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesCreditsOKCastItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "character":
			if err := func() error {
				s.Character.Reset()
				if err := s.Character.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"character\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesCreditsOKCastItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesCreditsOKCastItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesCreditsOKCastItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesCreditsOKCrewItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesCreditsOKCrewItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.KnownForDepartment.Set {
			e.FieldStart("known_for_department")
			s.KnownForDepartment.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Job.Set {
			e.FieldStart("job")
			s.Job.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesCreditsOKCrewItem = [11]string{
	0:  "adult",
	1:  "gender",
	2:  "id",
	3:  "known_for_department",
	4:  "name",
	5:  "original_name",
	6:  "popularity",
	7:  "profile_path",
	8:  "credit_id",
	9:  "department",
	10: "job",
}

// Decode decodes TvSeriesCreditsOKCrewItem from json.
func (s *TvSeriesCreditsOKCrewItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesCreditsOKCrewItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "known_for_department":
			if err := func() error {
				s.KnownForDepartment.Reset()
				if err := s.KnownForDepartment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"known_for_department\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "job":
			if err := func() error {
				s.Job.Reset()
				if err := s.Job.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesCreditsOKCrewItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesCreditsOKCrewItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesCreditsOKCrewItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesDeleteRatingOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesDeleteRatingOK) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.StatusMessage.Set {
			e.FieldStart("status_message")
			s.StatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesDeleteRatingOK = [2]string{
	0: "status_code",
	1: "status_message",
}

// Decode decodes TvSeriesDeleteRatingOK from json.
func (s *TvSeriesDeleteRatingOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesDeleteRatingOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status_message":
			if err := func() error {
				s.StatusMessage.Reset()
				if err := s.StatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesDeleteRatingOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesDeleteRatingOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesDeleteRatingOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesDetailsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesDetailsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.CreatedBy != nil {
			e.FieldStart("created_by")
			e.ArrStart()
			for _, elem := range s.CreatedBy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.EpisodeRunTime != nil {
			e.FieldStart("episode_run_time")
			e.ArrStart()
			for _, elem := range s.EpisodeRunTime {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.Genres != nil {
			e.FieldStart("genres")
			e.ArrStart()
			for _, elem := range s.Genres {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Homepage.Set {
			e.FieldStart("homepage")
			s.Homepage.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.InProduction.Set {
			e.FieldStart("in_production")
			s.InProduction.Encode(e)
		}
	}
	{
		if s.Languages != nil {
			e.FieldStart("languages")
			e.ArrStart()
			for _, elem := range s.Languages {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.LastAirDate.Set {
			e.FieldStart("last_air_date")
			s.LastAirDate.Encode(e)
		}
	}
	{
		if s.LastEpisodeToAir.Set {
			e.FieldStart("last_episode_to_air")
			s.LastEpisodeToAir.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if len(s.NextEpisodeToAir) != 0 {
			e.FieldStart("next_episode_to_air")
			e.Raw(s.NextEpisodeToAir)
		}
	}
	{
		if s.Networks != nil {
			e.FieldStart("networks")
			e.ArrStart()
			for _, elem := range s.Networks {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NumberOfEpisodes.Set {
			e.FieldStart("number_of_episodes")
			s.NumberOfEpisodes.Encode(e)
		}
	}
	{
		if s.NumberOfSeasons.Set {
			e.FieldStart("number_of_seasons")
			s.NumberOfSeasons.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ProductionCompanies != nil {
			e.FieldStart("production_companies")
			e.ArrStart()
			for _, elem := range s.ProductionCompanies {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ProductionCountries != nil {
			e.FieldStart("production_countries")
			e.ArrStart()
			for _, elem := range s.ProductionCountries {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Seasons != nil {
			e.FieldStart("seasons")
			e.ArrStart()
			for _, elem := range s.Seasons {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SpokenLanguages != nil {
			e.FieldStart("spoken_languages")
			e.ArrStart()
			for _, elem := range s.SpokenLanguages {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Tagline.Set {
			e.FieldStart("tagline")
			s.Tagline.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesDetailsOK = [32]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "created_by",
	3:  "episode_run_time",
	4:  "first_air_date",
	5:  "genres",
	6:  "homepage",
	7:  "id",
	8:  "in_production",
	9:  "languages",
	10: "last_air_date",
	11: "last_episode_to_air",
	12: "name",
	13: "next_episode_to_air",
	14: "networks",
	15: "number_of_episodes",
	16: "number_of_seasons",
	17: "origin_country",
	18: "original_language",
	19: "original_name",
	20: "overview",
	21: "popularity",
	22: "poster_path",
	23: "production_companies",
	24: "production_countries",
	25: "seasons",
	26: "spoken_languages",
	27: "status",
	28: "tagline",
	29: "type",
	30: "vote_average",
	31: "vote_count",
}

// Decode decodes TvSeriesDetailsOK from json.
func (s *TvSeriesDetailsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesDetailsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "created_by":
			if err := func() error {
				s.CreatedBy = make([]TvSeriesDetailsOKCreatedByItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesDetailsOKCreatedByItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CreatedBy = append(s.CreatedBy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_by\"")
			}
		case "episode_run_time":
			if err := func() error {
				s.EpisodeRunTime = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.EpisodeRunTime = append(s.EpisodeRunTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_run_time\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "genres":
			if err := func() error {
				s.Genres = make([]TvSeriesDetailsOKGenresItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesDetailsOKGenresItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Genres = append(s.Genres, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genres\"")
			}
		case "homepage":
			if err := func() error {
				s.Homepage.Reset()
				if err := s.Homepage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"homepage\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "in_production":
			if err := func() error {
				s.InProduction.Reset()
				if err := s.InProduction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"in_production\"")
			}
		case "languages":
			if err := func() error {
				s.Languages = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Languages = append(s.Languages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"languages\"")
			}
		case "last_air_date":
			if err := func() error {
				s.LastAirDate.Reset()
				if err := s.LastAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_air_date\"")
			}
		case "last_episode_to_air":
			if err := func() error {
				s.LastEpisodeToAir.Reset()
				if err := s.LastEpisodeToAir.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_episode_to_air\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "next_episode_to_air":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.NextEpisodeToAir = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_episode_to_air\"")
			}
		case "networks":
			if err := func() error {
				s.Networks = make([]TvSeriesDetailsOKNetworksItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesDetailsOKNetworksItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Networks = append(s.Networks, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networks\"")
			}
		case "number_of_episodes":
			if err := func() error {
				s.NumberOfEpisodes.Reset()
				if err := s.NumberOfEpisodes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_of_episodes\"")
			}
		case "number_of_seasons":
			if err := func() error {
				s.NumberOfSeasons.Reset()
				if err := s.NumberOfSeasons.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_of_seasons\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "production_companies":
			if err := func() error {
				s.ProductionCompanies = make([]TvSeriesDetailsOKProductionCompaniesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesDetailsOKProductionCompaniesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ProductionCompanies = append(s.ProductionCompanies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_companies\"")
			}
		case "production_countries":
			if err := func() error {
				s.ProductionCountries = make([]TvSeriesDetailsOKProductionCountriesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesDetailsOKProductionCountriesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ProductionCountries = append(s.ProductionCountries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_countries\"")
			}
		case "seasons":
			if err := func() error {
				s.Seasons = make([]TvSeriesDetailsOKSeasonsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesDetailsOKSeasonsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Seasons = append(s.Seasons, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"seasons\"")
			}
		case "spoken_languages":
			if err := func() error {
				s.SpokenLanguages = make([]TvSeriesDetailsOKSpokenLanguagesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesDetailsOKSpokenLanguagesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SpokenLanguages = append(s.SpokenLanguages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"spoken_languages\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "tagline":
			if err := func() error {
				s.Tagline.Reset()
				if err := s.Tagline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tagline\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesDetailsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesDetailsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesDetailsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesDetailsOKCreatedByItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesDetailsOKCreatedByItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.CreditID.Set {
			e.FieldStart("credit_id")
			s.CreditID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ProfilePath.Set {
			e.FieldStart("profile_path")
			s.ProfilePath.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesDetailsOKCreatedByItem = [5]string{
	0: "id",
	1: "credit_id",
	2: "name",
	3: "gender",
	4: "profile_path",
}

// Decode decodes TvSeriesDetailsOKCreatedByItem from json.
func (s *TvSeriesDetailsOKCreatedByItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesDetailsOKCreatedByItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "credit_id":
			if err := func() error {
				s.CreditID.Reset()
				if err := s.CreditID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "profile_path":
			if err := func() error {
				s.ProfilePath.Reset()
				if err := s.ProfilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profile_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesDetailsOKCreatedByItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesDetailsOKCreatedByItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesDetailsOKCreatedByItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesDetailsOKGenresItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesDetailsOKGenresItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesDetailsOKGenresItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes TvSeriesDetailsOKGenresItem from json.
func (s *TvSeriesDetailsOKGenresItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesDetailsOKGenresItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesDetailsOKGenresItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesDetailsOKGenresItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesDetailsOKGenresItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesDetailsOKLastEpisodeToAir) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesDetailsOKLastEpisodeToAir) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.AirDate.Set {
			e.FieldStart("air_date")
			s.AirDate.Encode(e)
		}
	}
	{
		if s.EpisodeNumber.Set {
			e.FieldStart("episode_number")
			s.EpisodeNumber.Encode(e)
		}
	}
	{
		if s.ProductionCode.Set {
			e.FieldStart("production_code")
			s.ProductionCode.Encode(e)
		}
	}
	{
		if s.Runtime.Set {
			e.FieldStart("runtime")
			s.Runtime.Encode(e)
		}
	}
	{
		if s.SeasonNumber.Set {
			e.FieldStart("season_number")
			s.SeasonNumber.Encode(e)
		}
	}
	{
		if s.ShowID.Set {
			e.FieldStart("show_id")
			s.ShowID.Encode(e)
		}
	}
	{
		if s.StillPath.Set {
			e.FieldStart("still_path")
			s.StillPath.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesDetailsOKLastEpisodeToAir = [12]string{
	0:  "id",
	1:  "name",
	2:  "overview",
	3:  "vote_average",
	4:  "vote_count",
	5:  "air_date",
	6:  "episode_number",
	7:  "production_code",
	8:  "runtime",
	9:  "season_number",
	10: "show_id",
	11: "still_path",
}

// Decode decodes TvSeriesDetailsOKLastEpisodeToAir from json.
func (s *TvSeriesDetailsOKLastEpisodeToAir) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesDetailsOKLastEpisodeToAir to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "air_date":
			if err := func() error {
				s.AirDate.Reset()
				if err := s.AirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"air_date\"")
			}
		case "episode_number":
			if err := func() error {
				s.EpisodeNumber.Reset()
				if err := s.EpisodeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_number\"")
			}
		case "production_code":
			if err := func() error {
				s.ProductionCode.Reset()
				if err := s.ProductionCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_code\"")
			}
		case "runtime":
			if err := func() error {
				s.Runtime.Reset()
				if err := s.Runtime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runtime\"")
			}
		case "season_number":
			if err := func() error {
				s.SeasonNumber.Reset()
				if err := s.SeasonNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"season_number\"")
			}
		case "show_id":
			if err := func() error {
				s.ShowID.Reset()
				if err := s.ShowID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_id\"")
			}
		case "still_path":
			if err := func() error {
				s.StillPath.Reset()
				if err := s.StillPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"still_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesDetailsOKLastEpisodeToAir")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesDetailsOKLastEpisodeToAir) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesDetailsOKLastEpisodeToAir) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesDetailsOKNetworksItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesDetailsOKNetworksItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry.Set {
			e.FieldStart("origin_country")
			s.OriginCountry.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesDetailsOKNetworksItem = [4]string{
	0: "id",
	1: "logo_path",
	2: "name",
	3: "origin_country",
}

// Decode decodes TvSeriesDetailsOKNetworksItem from json.
func (s *TvSeriesDetailsOKNetworksItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesDetailsOKNetworksItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry.Reset()
				if err := s.OriginCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesDetailsOKNetworksItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesDetailsOKNetworksItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesDetailsOKNetworksItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesDetailsOKProductionCompaniesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesDetailsOKProductionCompaniesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry.Set {
			e.FieldStart("origin_country")
			s.OriginCountry.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesDetailsOKProductionCompaniesItem = [4]string{
	0: "id",
	1: "logo_path",
	2: "name",
	3: "origin_country",
}

// Decode decodes TvSeriesDetailsOKProductionCompaniesItem from json.
func (s *TvSeriesDetailsOKProductionCompaniesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesDetailsOKProductionCompaniesItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry.Reset()
				if err := s.OriginCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesDetailsOKProductionCompaniesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesDetailsOKProductionCompaniesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesDetailsOKProductionCompaniesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesDetailsOKProductionCountriesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesDetailsOKProductionCountriesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesDetailsOKProductionCountriesItem = [2]string{
	0: "iso_3166_1",
	1: "name",
}

// Decode decodes TvSeriesDetailsOKProductionCountriesItem from json.
func (s *TvSeriesDetailsOKProductionCountriesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesDetailsOKProductionCountriesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesDetailsOKProductionCountriesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesDetailsOKProductionCountriesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesDetailsOKProductionCountriesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesDetailsOKSeasonsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesDetailsOKSeasonsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AirDate.Set {
			e.FieldStart("air_date")
			s.AirDate.Encode(e)
		}
	}
	{
		if s.EpisodeCount.Set {
			e.FieldStart("episode_count")
			s.EpisodeCount.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.SeasonNumber.Set {
			e.FieldStart("season_number")
			s.SeasonNumber.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesDetailsOKSeasonsItem = [8]string{
	0: "air_date",
	1: "episode_count",
	2: "id",
	3: "name",
	4: "overview",
	5: "poster_path",
	6: "season_number",
	7: "vote_average",
}

// Decode decodes TvSeriesDetailsOKSeasonsItem from json.
func (s *TvSeriesDetailsOKSeasonsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesDetailsOKSeasonsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "air_date":
			if err := func() error {
				s.AirDate.Reset()
				if err := s.AirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"air_date\"")
			}
		case "episode_count":
			if err := func() error {
				s.EpisodeCount.Reset()
				if err := s.EpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_count\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "season_number":
			if err := func() error {
				s.SeasonNumber.Reset()
				if err := s.SeasonNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"season_number\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesDetailsOKSeasonsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesDetailsOKSeasonsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesDetailsOKSeasonsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesDetailsOKSpokenLanguagesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesDetailsOKSpokenLanguagesItem) encodeFields(e *jx.Encoder) {
	{
		if s.EnglishName.Set {
			e.FieldStart("english_name")
			s.EnglishName.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesDetailsOKSpokenLanguagesItem = [3]string{
	0: "english_name",
	1: "iso_639_1",
	2: "name",
}

// Decode decodes TvSeriesDetailsOKSpokenLanguagesItem from json.
func (s *TvSeriesDetailsOKSpokenLanguagesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesDetailsOKSpokenLanguagesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "english_name":
			if err := func() error {
				s.EnglishName.Reset()
				if err := s.EnglishName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"english_name\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesDetailsOKSpokenLanguagesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesDetailsOKSpokenLanguagesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesDetailsOKSpokenLanguagesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesEpisodeGroupsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesEpisodeGroupsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesEpisodeGroupsOK = [2]string{
	0: "results",
	1: "id",
}

// Decode decodes TvSeriesEpisodeGroupsOK from json.
func (s *TvSeriesEpisodeGroupsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesEpisodeGroupsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesEpisodeGroupsOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesEpisodeGroupsOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesEpisodeGroupsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesEpisodeGroupsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesEpisodeGroupsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesEpisodeGroupsOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesEpisodeGroupsOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.EpisodeCount.Set {
			e.FieldStart("episode_count")
			s.EpisodeCount.Encode(e)
		}
	}
	{
		if s.GroupCount.Set {
			e.FieldStart("group_count")
			s.GroupCount.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Network.Set {
			e.FieldStart("network")
			s.Network.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesEpisodeGroupsOKResultsItem = [7]string{
	0: "description",
	1: "episode_count",
	2: "group_count",
	3: "id",
	4: "name",
	5: "network",
	6: "type",
}

// Decode decodes TvSeriesEpisodeGroupsOKResultsItem from json.
func (s *TvSeriesEpisodeGroupsOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesEpisodeGroupsOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "episode_count":
			if err := func() error {
				s.EpisodeCount.Reset()
				if err := s.EpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_count\"")
			}
		case "group_count":
			if err := func() error {
				s.GroupCount.Reset()
				if err := s.GroupCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group_count\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "network":
			if err := func() error {
				s.Network.Reset()
				if err := s.Network.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"network\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesEpisodeGroupsOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesEpisodeGroupsOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesEpisodeGroupsOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesEpisodeGroupsOKResultsItemNetwork) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesEpisodeGroupsOKResultsItemNetwork) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry.Set {
			e.FieldStart("origin_country")
			s.OriginCountry.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesEpisodeGroupsOKResultsItemNetwork = [4]string{
	0: "id",
	1: "logo_path",
	2: "name",
	3: "origin_country",
}

// Decode decodes TvSeriesEpisodeGroupsOKResultsItemNetwork from json.
func (s *TvSeriesEpisodeGroupsOKResultsItemNetwork) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesEpisodeGroupsOKResultsItemNetwork to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry.Reset()
				if err := s.OriginCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesEpisodeGroupsOKResultsItemNetwork")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesEpisodeGroupsOKResultsItemNetwork) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesEpisodeGroupsOKResultsItemNetwork) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesExternalIdsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesExternalIdsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ImdbID.Set {
			e.FieldStart("imdb_id")
			s.ImdbID.Encode(e)
		}
	}
	{
		if s.FreebaseMid.Set {
			e.FieldStart("freebase_mid")
			s.FreebaseMid.Encode(e)
		}
	}
	{
		if s.FreebaseID.Set {
			e.FieldStart("freebase_id")
			s.FreebaseID.Encode(e)
		}
	}
	{
		if s.TvdbID.Set {
			e.FieldStart("tvdb_id")
			s.TvdbID.Encode(e)
		}
	}
	{
		if s.TvrageID.Set {
			e.FieldStart("tvrage_id")
			s.TvrageID.Encode(e)
		}
	}
	{
		if s.WikidataID.Set {
			e.FieldStart("wikidata_id")
			s.WikidataID.Encode(e)
		}
	}
	{
		if s.FacebookID.Set {
			e.FieldStart("facebook_id")
			s.FacebookID.Encode(e)
		}
	}
	{
		if s.InstagramID.Set {
			e.FieldStart("instagram_id")
			s.InstagramID.Encode(e)
		}
	}
	{
		if s.TwitterID.Set {
			e.FieldStart("twitter_id")
			s.TwitterID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesExternalIdsOK = [10]string{
	0: "id",
	1: "imdb_id",
	2: "freebase_mid",
	3: "freebase_id",
	4: "tvdb_id",
	5: "tvrage_id",
	6: "wikidata_id",
	7: "facebook_id",
	8: "instagram_id",
	9: "twitter_id",
}

// Decode decodes TvSeriesExternalIdsOK from json.
func (s *TvSeriesExternalIdsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesExternalIdsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "imdb_id":
			if err := func() error {
				s.ImdbID.Reset()
				if err := s.ImdbID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"imdb_id\"")
			}
		case "freebase_mid":
			if err := func() error {
				s.FreebaseMid.Reset()
				if err := s.FreebaseMid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"freebase_mid\"")
			}
		case "freebase_id":
			if err := func() error {
				s.FreebaseID.Reset()
				if err := s.FreebaseID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"freebase_id\"")
			}
		case "tvdb_id":
			if err := func() error {
				s.TvdbID.Reset()
				if err := s.TvdbID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tvdb_id\"")
			}
		case "tvrage_id":
			if err := func() error {
				s.TvrageID.Reset()
				if err := s.TvrageID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tvrage_id\"")
			}
		case "wikidata_id":
			if err := func() error {
				s.WikidataID.Reset()
				if err := s.WikidataID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wikidata_id\"")
			}
		case "facebook_id":
			if err := func() error {
				s.FacebookID.Reset()
				if err := s.FacebookID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"facebook_id\"")
			}
		case "instagram_id":
			if err := func() error {
				s.InstagramID.Reset()
				if err := s.InstagramID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"instagram_id\"")
			}
		case "twitter_id":
			if err := func() error {
				s.TwitterID.Reset()
				if err := s.TwitterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"twitter_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesExternalIdsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesExternalIdsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesExternalIdsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesImagesOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesImagesOK) encodeFields(e *jx.Encoder) {
	{
		if s.Backdrops != nil {
			e.FieldStart("backdrops")
			e.ArrStart()
			for _, elem := range s.Backdrops {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Logos != nil {
			e.FieldStart("logos")
			e.ArrStart()
			for _, elem := range s.Logos {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Posters != nil {
			e.FieldStart("posters")
			e.ArrStart()
			for _, elem := range s.Posters {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesImagesOK = [4]string{
	0: "backdrops",
	1: "id",
	2: "logos",
	3: "posters",
}

// Decode decodes TvSeriesImagesOK from json.
func (s *TvSeriesImagesOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesImagesOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "backdrops":
			if err := func() error {
				s.Backdrops = make([]TvSeriesImagesOKBackdropsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesImagesOKBackdropsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Backdrops = append(s.Backdrops, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrops\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "logos":
			if err := func() error {
				s.Logos = make([]TvSeriesImagesOKLogosItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesImagesOKLogosItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Logos = append(s.Logos, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logos\"")
			}
		case "posters":
			if err := func() error {
				s.Posters = make([]TvSeriesImagesOKPostersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesImagesOKPostersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Posters = append(s.Posters, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"posters\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesImagesOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesImagesOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesImagesOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesImagesOKBackdropsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesImagesOKBackdropsItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesImagesOKBackdropsItem = [7]string{
	0: "aspect_ratio",
	1: "height",
	2: "iso_639_1",
	3: "file_path",
	4: "vote_average",
	5: "vote_count",
	6: "width",
}

// Decode decodes TvSeriesImagesOKBackdropsItem from json.
func (s *TvSeriesImagesOKBackdropsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesImagesOKBackdropsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesImagesOKBackdropsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesImagesOKBackdropsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesImagesOKBackdropsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesImagesOKLogosItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesImagesOKLogosItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesImagesOKLogosItem = [7]string{
	0: "aspect_ratio",
	1: "height",
	2: "iso_639_1",
	3: "file_path",
	4: "vote_average",
	5: "vote_count",
	6: "width",
}

// Decode decodes TvSeriesImagesOKLogosItem from json.
func (s *TvSeriesImagesOKLogosItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesImagesOKLogosItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesImagesOKLogosItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesImagesOKLogosItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesImagesOKLogosItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesImagesOKPostersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesImagesOKPostersItem) encodeFields(e *jx.Encoder) {
	{
		if s.AspectRatio.Set {
			e.FieldStart("aspect_ratio")
			s.AspectRatio.Encode(e)
		}
	}
	{
		if s.Height.Set {
			e.FieldStart("height")
			s.Height.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("file_path")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.Width.Set {
			e.FieldStart("width")
			s.Width.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesImagesOKPostersItem = [7]string{
	0: "aspect_ratio",
	1: "height",
	2: "iso_639_1",
	3: "file_path",
	4: "vote_average",
	5: "vote_count",
	6: "width",
}

// Decode decodes TvSeriesImagesOKPostersItem from json.
func (s *TvSeriesImagesOKPostersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesImagesOKPostersItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aspect_ratio":
			if err := func() error {
				s.AspectRatio.Reset()
				if err := s.AspectRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aspect_ratio\"")
			}
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"height\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "file_path":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"width\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesImagesOKPostersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesImagesOKPostersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesImagesOKPostersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesKeywordsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesKeywordsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesKeywordsOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes TvSeriesKeywordsOK from json.
func (s *TvSeriesKeywordsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesKeywordsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesKeywordsOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesKeywordsOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesKeywordsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesKeywordsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesKeywordsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesKeywordsOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesKeywordsOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesKeywordsOKResultsItem = [2]string{
	0: "name",
	1: "id",
}

// Decode decodes TvSeriesKeywordsOKResultsItem from json.
func (s *TvSeriesKeywordsOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesKeywordsOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesKeywordsOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesKeywordsOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesKeywordsOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesLatestIDOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesLatestIDOK) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.CreatedBy != nil {
			e.FieldStart("created_by")
			e.ArrStart()
			for _, elem := range s.CreatedBy {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.EpisodeRunTime != nil {
			e.FieldStart("episode_run_time")
			e.ArrStart()
			for _, elem := range s.EpisodeRunTime {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.Genres != nil {
			e.FieldStart("genres")
			e.ArrStart()
			for _, elem := range s.Genres {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.Homepage.Set {
			e.FieldStart("homepage")
			s.Homepage.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.InProduction.Set {
			e.FieldStart("in_production")
			s.InProduction.Encode(e)
		}
	}
	{
		if s.Languages != nil {
			e.FieldStart("languages")
			e.ArrStart()
			for _, elem := range s.Languages {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.LastAirDate.Set {
			e.FieldStart("last_air_date")
			s.LastAirDate.Encode(e)
		}
	}
	{
		if s.LastEpisodeToAir.Set {
			e.FieldStart("last_episode_to_air")
			s.LastEpisodeToAir.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if len(s.NextEpisodeToAir) != 0 {
			e.FieldStart("next_episode_to_air")
			e.Raw(s.NextEpisodeToAir)
		}
	}
	{
		if s.Networks != nil {
			e.FieldStart("networks")
			e.ArrStart()
			for _, elem := range s.Networks {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.NumberOfEpisodes.Set {
			e.FieldStart("number_of_episodes")
			s.NumberOfEpisodes.Encode(e)
		}
	}
	{
		if s.NumberOfSeasons.Set {
			e.FieldStart("number_of_seasons")
			s.NumberOfSeasons.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.ProductionCompanies != nil {
			e.FieldStart("production_companies")
			e.ArrStart()
			for _, elem := range s.ProductionCompanies {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.ProductionCountries != nil {
			e.FieldStart("production_countries")
			e.ArrStart()
			for _, elem := range s.ProductionCountries {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.Seasons != nil {
			e.FieldStart("seasons")
			e.ArrStart()
			for _, elem := range s.Seasons {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SpokenLanguages != nil {
			e.FieldStart("spoken_languages")
			e.ArrStart()
			for _, elem := range s.SpokenLanguages {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Tagline.Set {
			e.FieldStart("tagline")
			s.Tagline.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesLatestIDOK = [32]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "created_by",
	3:  "episode_run_time",
	4:  "first_air_date",
	5:  "genres",
	6:  "homepage",
	7:  "id",
	8:  "in_production",
	9:  "languages",
	10: "last_air_date",
	11: "last_episode_to_air",
	12: "name",
	13: "next_episode_to_air",
	14: "networks",
	15: "number_of_episodes",
	16: "number_of_seasons",
	17: "origin_country",
	18: "original_language",
	19: "original_name",
	20: "overview",
	21: "popularity",
	22: "poster_path",
	23: "production_companies",
	24: "production_countries",
	25: "seasons",
	26: "spoken_languages",
	27: "status",
	28: "tagline",
	29: "type",
	30: "vote_average",
	31: "vote_count",
}

// Decode decodes TvSeriesLatestIDOK from json.
func (s *TvSeriesLatestIDOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesLatestIDOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "created_by":
			if err := func() error {
				s.CreatedBy = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.CreatedBy = append(s.CreatedBy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_by\"")
			}
		case "episode_run_time":
			if err := func() error {
				s.EpisodeRunTime = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.EpisodeRunTime = append(s.EpisodeRunTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_run_time\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "genres":
			if err := func() error {
				s.Genres = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.Genres = append(s.Genres, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genres\"")
			}
		case "homepage":
			if err := func() error {
				s.Homepage.Reset()
				if err := s.Homepage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"homepage\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "in_production":
			if err := func() error {
				s.InProduction.Reset()
				if err := s.InProduction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"in_production\"")
			}
		case "languages":
			if err := func() error {
				s.Languages = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.Languages = append(s.Languages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"languages\"")
			}
		case "last_air_date":
			if err := func() error {
				s.LastAirDate.Reset()
				if err := s.LastAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_air_date\"")
			}
		case "last_episode_to_air":
			if err := func() error {
				s.LastEpisodeToAir.Reset()
				if err := s.LastEpisodeToAir.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_episode_to_air\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "next_episode_to_air":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.NextEpisodeToAir = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_episode_to_air\"")
			}
		case "networks":
			if err := func() error {
				s.Networks = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.Networks = append(s.Networks, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networks\"")
			}
		case "number_of_episodes":
			if err := func() error {
				s.NumberOfEpisodes.Reset()
				if err := s.NumberOfEpisodes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_of_episodes\"")
			}
		case "number_of_seasons":
			if err := func() error {
				s.NumberOfSeasons.Reset()
				if err := s.NumberOfSeasons.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number_of_seasons\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "production_companies":
			if err := func() error {
				s.ProductionCompanies = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.ProductionCompanies = append(s.ProductionCompanies, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_companies\"")
			}
		case "production_countries":
			if err := func() error {
				s.ProductionCountries = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.ProductionCountries = append(s.ProductionCountries, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_countries\"")
			}
		case "seasons":
			if err := func() error {
				s.Seasons = make([]TvSeriesLatestIDOKSeasonsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesLatestIDOKSeasonsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Seasons = append(s.Seasons, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"seasons\"")
			}
		case "spoken_languages":
			if err := func() error {
				s.SpokenLanguages = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.SpokenLanguages = append(s.SpokenLanguages, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"spoken_languages\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "tagline":
			if err := func() error {
				s.Tagline.Reset()
				if err := s.Tagline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tagline\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesLatestIDOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesLatestIDOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesLatestIDOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesLatestIDOKLastEpisodeToAir) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesLatestIDOKLastEpisodeToAir) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.AirDate.Set {
			e.FieldStart("air_date")
			s.AirDate.Encode(e)
		}
	}
	{
		if s.EpisodeNumber.Set {
			e.FieldStart("episode_number")
			s.EpisodeNumber.Encode(e)
		}
	}
	{
		if s.ProductionCode.Set {
			e.FieldStart("production_code")
			s.ProductionCode.Encode(e)
		}
	}
	{
		if len(s.Runtime) != 0 {
			e.FieldStart("runtime")
			e.Raw(s.Runtime)
		}
	}
	{
		if s.SeasonNumber.Set {
			e.FieldStart("season_number")
			s.SeasonNumber.Encode(e)
		}
	}
	{
		if s.ShowID.Set {
			e.FieldStart("show_id")
			s.ShowID.Encode(e)
		}
	}
	{
		if s.StillPath.Set {
			e.FieldStart("still_path")
			s.StillPath.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesLatestIDOKLastEpisodeToAir = [12]string{
	0:  "id",
	1:  "name",
	2:  "overview",
	3:  "vote_average",
	4:  "vote_count",
	5:  "air_date",
	6:  "episode_number",
	7:  "production_code",
	8:  "runtime",
	9:  "season_number",
	10: "show_id",
	11: "still_path",
}

// Decode decodes TvSeriesLatestIDOKLastEpisodeToAir from json.
func (s *TvSeriesLatestIDOKLastEpisodeToAir) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesLatestIDOKLastEpisodeToAir to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "air_date":
			if err := func() error {
				s.AirDate.Reset()
				if err := s.AirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"air_date\"")
			}
		case "episode_number":
			if err := func() error {
				s.EpisodeNumber.Reset()
				if err := s.EpisodeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_number\"")
			}
		case "production_code":
			if err := func() error {
				s.ProductionCode.Reset()
				if err := s.ProductionCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"production_code\"")
			}
		case "runtime":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Runtime = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"runtime\"")
			}
		case "season_number":
			if err := func() error {
				s.SeasonNumber.Reset()
				if err := s.SeasonNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"season_number\"")
			}
		case "show_id":
			if err := func() error {
				s.ShowID.Reset()
				if err := s.ShowID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"show_id\"")
			}
		case "still_path":
			if err := func() error {
				s.StillPath.Reset()
				if err := s.StillPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"still_path\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesLatestIDOKLastEpisodeToAir")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesLatestIDOKLastEpisodeToAir) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesLatestIDOKLastEpisodeToAir) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesLatestIDOKSeasonsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesLatestIDOKSeasonsItem) encodeFields(e *jx.Encoder) {
	{
		if len(s.AirDate) != 0 {
			e.FieldStart("air_date")
			e.Raw(s.AirDate)
		}
	}
	{
		if s.EpisodeCount.Set {
			e.FieldStart("episode_count")
			s.EpisodeCount.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.SeasonNumber.Set {
			e.FieldStart("season_number")
			s.SeasonNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesLatestIDOKSeasonsItem = [7]string{
	0: "air_date",
	1: "episode_count",
	2: "id",
	3: "name",
	4: "overview",
	5: "poster_path",
	6: "season_number",
}

// Decode decodes TvSeriesLatestIDOKSeasonsItem from json.
func (s *TvSeriesLatestIDOKSeasonsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesLatestIDOKSeasonsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "air_date":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.AirDate = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"air_date\"")
			}
		case "episode_count":
			if err := func() error {
				s.EpisodeCount.Reset()
				if err := s.EpisodeCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_count\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "season_number":
			if err := func() error {
				s.SeasonNumber.Reset()
				if err := s.SeasonNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"season_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesLatestIDOKSeasonsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesLatestIDOKSeasonsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesLatestIDOKSeasonsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesOnTheAirListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesOnTheAirListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesOnTheAirListOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes TvSeriesOnTheAirListOK from json.
func (s *TvSeriesOnTheAirListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesOnTheAirListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesOnTheAirListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesOnTheAirListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesOnTheAirListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesOnTheAirListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesOnTheAirListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesOnTheAirListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesOnTheAirListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesOnTheAirListOKResultsItem = [13]string{
	0:  "backdrop_path",
	1:  "first_air_date",
	2:  "genre_ids",
	3:  "id",
	4:  "name",
	5:  "origin_country",
	6:  "original_language",
	7:  "original_name",
	8:  "overview",
	9:  "popularity",
	10: "poster_path",
	11: "vote_average",
	12: "vote_count",
}

// Decode decodes TvSeriesOnTheAirListOKResultsItem from json.
func (s *TvSeriesOnTheAirListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesOnTheAirListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesOnTheAirListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesOnTheAirListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesOnTheAirListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesPopularListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesPopularListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesPopularListOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes TvSeriesPopularListOK from json.
func (s *TvSeriesPopularListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesPopularListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesPopularListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesPopularListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesPopularListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesPopularListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesPopularListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesPopularListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesPopularListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesPopularListOKResultsItem = [13]string{
	0:  "backdrop_path",
	1:  "first_air_date",
	2:  "genre_ids",
	3:  "id",
	4:  "name",
	5:  "origin_country",
	6:  "original_language",
	7:  "original_name",
	8:  "overview",
	9:  "popularity",
	10: "poster_path",
	11: "vote_average",
	12: "vote_count",
}

// Decode decodes TvSeriesPopularListOKResultsItem from json.
func (s *TvSeriesPopularListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesPopularListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesPopularListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesPopularListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesPopularListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesRecommendationsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesRecommendationsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesRecommendationsOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes TvSeriesRecommendationsOK from json.
func (s *TvSeriesRecommendationsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesRecommendationsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesRecommendationsOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesRecommendationsOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesRecommendationsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesRecommendationsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesRecommendationsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesRecommendationsOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesRecommendationsOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.MediaType.Set {
			e.FieldStart("media_type")
			s.MediaType.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesRecommendationsOKResultsItem = [15]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "id",
	3:  "name",
	4:  "original_language",
	5:  "original_name",
	6:  "overview",
	7:  "poster_path",
	8:  "media_type",
	9:  "genre_ids",
	10: "popularity",
	11: "first_air_date",
	12: "vote_average",
	13: "vote_count",
	14: "origin_country",
}

// Decode decodes TvSeriesRecommendationsOKResultsItem from json.
func (s *TvSeriesRecommendationsOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesRecommendationsOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "media_type":
			if err := func() error {
				s.MediaType.Reset()
				if err := s.MediaType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"media_type\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesRecommendationsOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesRecommendationsOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesRecommendationsOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesReviewsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesReviewsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesReviewsOK = [5]string{
	0: "id",
	1: "page",
	2: "results",
	3: "total_pages",
	4: "total_results",
}

// Decode decodes TvSeriesReviewsOK from json.
func (s *TvSeriesReviewsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesReviewsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesReviewsOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesReviewsOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesReviewsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesReviewsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesReviewsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesReviewsOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesReviewsOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Author.Set {
			e.FieldStart("author")
			s.Author.Encode(e)
		}
	}
	{
		if s.AuthorDetails.Set {
			e.FieldStart("author_details")
			s.AuthorDetails.Encode(e)
		}
	}
	{
		if s.Content.Set {
			e.FieldStart("content")
			s.Content.Encode(e)
		}
	}
	{
		if s.CreatedAt.Set {
			e.FieldStart("created_at")
			s.CreatedAt.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.UpdatedAt.Set {
			e.FieldStart("updated_at")
			s.UpdatedAt.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesReviewsOKResultsItem = [7]string{
	0: "author",
	1: "author_details",
	2: "content",
	3: "created_at",
	4: "id",
	5: "updated_at",
	6: "url",
}

// Decode decodes TvSeriesReviewsOKResultsItem from json.
func (s *TvSeriesReviewsOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesReviewsOKResultsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "author":
			if err := func() error {
				s.Author.Reset()
				if err := s.Author.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"author\"")
			}
		case "author_details":
			if err := func() error {
				s.AuthorDetails.Reset()
				if err := s.AuthorDetails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"author_details\"")
			}
		case "content":
			if err := func() error {
				s.Content.Reset()
				if err := s.Content.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content\"")
			}
		case "created_at":
			if err := func() error {
				s.CreatedAt.Reset()
				if err := s.CreatedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_at\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "updated_at":
			if err := func() error {
				s.UpdatedAt.Reset()
				if err := s.UpdatedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated_at\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesReviewsOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesReviewsOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesReviewsOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesReviewsOKResultsItemAuthorDetails) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesReviewsOKResultsItemAuthorDetails) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Username.Set {
			e.FieldStart("username")
			s.Username.Encode(e)
		}
	}
	{
		if s.AvatarPath.Set {
			e.FieldStart("avatar_path")
			s.AvatarPath.Encode(e)
		}
	}
	{
		if s.Rating.Set {
			e.FieldStart("rating")
			s.Rating.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesReviewsOKResultsItemAuthorDetails = [4]string{
	0: "name",
	1: "username",
	2: "avatar_path",
	3: "rating",
}

// Decode decodes TvSeriesReviewsOKResultsItemAuthorDetails from json.
func (s *TvSeriesReviewsOKResultsItemAuthorDetails) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesReviewsOKResultsItemAuthorDetails to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		case "avatar_path":
			if err := func() error {
				s.AvatarPath.Reset()
				if err := s.AvatarPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"avatar_path\"")
			}
		case "rating":
			if err := func() error {
				s.Rating.Reset()
				if err := s.Rating.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rating\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesReviewsOKResultsItemAuthorDetails")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesReviewsOKResultsItemAuthorDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesReviewsOKResultsItemAuthorDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesScreenedTheatricallyOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesScreenedTheatricallyOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesScreenedTheatricallyOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes TvSeriesScreenedTheatricallyOK from json.
func (s *TvSeriesScreenedTheatricallyOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesScreenedTheatricallyOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesScreenedTheatricallyOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesScreenedTheatricallyOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesScreenedTheatricallyOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesScreenedTheatricallyOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesScreenedTheatricallyOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesScreenedTheatricallyOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesScreenedTheatricallyOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.EpisodeNumber.Set {
			e.FieldStart("episode_number")
			s.EpisodeNumber.Encode(e)
		}
	}
	{
		if s.SeasonNumber.Set {
			e.FieldStart("season_number")
			s.SeasonNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesScreenedTheatricallyOKResultsItem = [3]string{
	0: "id",
	1: "episode_number",
	2: "season_number",
}

// Decode decodes TvSeriesScreenedTheatricallyOKResultsItem from json.
func (s *TvSeriesScreenedTheatricallyOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesScreenedTheatricallyOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "episode_number":
			if err := func() error {
				s.EpisodeNumber.Reset()
				if err := s.EpisodeNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"episode_number\"")
			}
		case "season_number":
			if err := func() error {
				s.SeasonNumber.Reset()
				if err := s.SeasonNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"season_number\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesScreenedTheatricallyOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesScreenedTheatricallyOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesScreenedTheatricallyOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesSimilarOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesSimilarOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesSimilarOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes TvSeriesSimilarOK from json.
func (s *TvSeriesSimilarOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesSimilarOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesSimilarOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesSimilarOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesSimilarOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesSimilarOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesSimilarOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesSimilarOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesSimilarOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Adult.Set {
			e.FieldStart("adult")
			s.Adult.Encode(e)
		}
	}
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesSimilarOKResultsItem = [14]string{
	0:  "adult",
	1:  "backdrop_path",
	2:  "genre_ids",
	3:  "id",
	4:  "origin_country",
	5:  "original_language",
	6:  "original_name",
	7:  "overview",
	8:  "popularity",
	9:  "poster_path",
	10: "first_air_date",
	11: "name",
	12: "vote_average",
	13: "vote_count",
}

// Decode decodes TvSeriesSimilarOKResultsItem from json.
func (s *TvSeriesSimilarOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesSimilarOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adult":
			if err := func() error {
				s.Adult.Reset()
				if err := s.Adult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adult\"")
			}
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesSimilarOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesSimilarOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesSimilarOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesTopRatedListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesTopRatedListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Page.Set {
			e.FieldStart("page")
			s.Page.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TotalPages.Set {
			e.FieldStart("total_pages")
			s.TotalPages.Encode(e)
		}
	}
	{
		if s.TotalResults.Set {
			e.FieldStart("total_results")
			s.TotalResults.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesTopRatedListOK = [4]string{
	0: "page",
	1: "results",
	2: "total_pages",
	3: "total_results",
}

// Decode decodes TvSeriesTopRatedListOK from json.
func (s *TvSeriesTopRatedListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesTopRatedListOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "page":
			if err := func() error {
				s.Page.Reset()
				if err := s.Page.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesTopRatedListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesTopRatedListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		case "total_pages":
			if err := func() error {
				s.TotalPages.Reset()
				if err := s.TotalPages.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_pages\"")
			}
		case "total_results":
			if err := func() error {
				s.TotalResults.Reset()
				if err := s.TotalResults.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesTopRatedListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesTopRatedListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesTopRatedListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesTopRatedListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesTopRatedListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.BackdropPath.Set {
			e.FieldStart("backdrop_path")
			s.BackdropPath.Encode(e)
		}
	}
	{
		if s.FirstAirDate.Set {
			e.FieldStart("first_air_date")
			s.FirstAirDate.Encode(e)
		}
	}
	{
		if s.GenreIds != nil {
			e.FieldStart("genre_ids")
			e.ArrStart()
			for _, elem := range s.GenreIds {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.OriginCountry != nil {
			e.FieldStart("origin_country")
			e.ArrStart()
			for _, elem := range s.OriginCountry {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OriginalLanguage.Set {
			e.FieldStart("original_language")
			s.OriginalLanguage.Encode(e)
		}
	}
	{
		if s.OriginalName.Set {
			e.FieldStart("original_name")
			s.OriginalName.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Popularity.Set {
			e.FieldStart("popularity")
			s.Popularity.Encode(e)
		}
	}
	{
		if s.PosterPath.Set {
			e.FieldStart("poster_path")
			s.PosterPath.Encode(e)
		}
	}
	{
		if s.VoteAverage.Set {
			e.FieldStart("vote_average")
			s.VoteAverage.Encode(e)
		}
	}
	{
		if s.VoteCount.Set {
			e.FieldStart("vote_count")
			s.VoteCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesTopRatedListOKResultsItem = [13]string{
	0:  "backdrop_path",
	1:  "first_air_date",
	2:  "genre_ids",
	3:  "id",
	4:  "name",
	5:  "origin_country",
	6:  "original_language",
	7:  "original_name",
	8:  "overview",
	9:  "popularity",
	10: "poster_path",
	11: "vote_average",
	12: "vote_count",
}

// Decode decodes TvSeriesTopRatedListOKResultsItem from json.
func (s *TvSeriesTopRatedListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesTopRatedListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "backdrop_path":
			if err := func() error {
				s.BackdropPath.Reset()
				if err := s.BackdropPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"backdrop_path\"")
			}
		case "first_air_date":
			if err := func() error {
				s.FirstAirDate.Reset()
				if err := s.FirstAirDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"first_air_date\"")
			}
		case "genre_ids":
			if err := func() error {
				s.GenreIds = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.GenreIds = append(s.GenreIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"genre_ids\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "origin_country":
			if err := func() error {
				s.OriginCountry = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OriginCountry = append(s.OriginCountry, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origin_country\"")
			}
		case "original_language":
			if err := func() error {
				s.OriginalLanguage.Reset()
				if err := s.OriginalLanguage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_language\"")
			}
		case "original_name":
			if err := func() error {
				s.OriginalName.Reset()
				if err := s.OriginalName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"original_name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "popularity":
			if err := func() error {
				s.Popularity.Reset()
				if err := s.Popularity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"popularity\"")
			}
		case "poster_path":
			if err := func() error {
				s.PosterPath.Reset()
				if err := s.PosterPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"poster_path\"")
			}
		case "vote_average":
			if err := func() error {
				s.VoteAverage.Reset()
				if err := s.VoteAverage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_average\"")
			}
		case "vote_count":
			if err := func() error {
				s.VoteCount.Reset()
				if err := s.VoteCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vote_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesTopRatedListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesTopRatedListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesTopRatedListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesTranslationsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesTranslationsOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Translations != nil {
			e.FieldStart("translations")
			e.ArrStart()
			for _, elem := range s.Translations {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesTranslationsOK = [2]string{
	0: "id",
	1: "translations",
}

// Decode decodes TvSeriesTranslationsOK from json.
func (s *TvSeriesTranslationsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesTranslationsOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "translations":
			if err := func() error {
				s.Translations = make([]TvSeriesTranslationsOKTranslationsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesTranslationsOKTranslationsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Translations = append(s.Translations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"translations\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesTranslationsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesTranslationsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesTranslationsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesTranslationsOKTranslationsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesTranslationsOKTranslationsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.EnglishName.Set {
			e.FieldStart("english_name")
			s.EnglishName.Encode(e)
		}
	}
	{
		if s.Data.Set {
			e.FieldStart("data")
			s.Data.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesTranslationsOKTranslationsItem = [5]string{
	0: "iso_3166_1",
	1: "iso_639_1",
	2: "name",
	3: "english_name",
	4: "data",
}

// Decode decodes TvSeriesTranslationsOKTranslationsItem from json.
func (s *TvSeriesTranslationsOKTranslationsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesTranslationsOKTranslationsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "english_name":
			if err := func() error {
				s.EnglishName.Reset()
				if err := s.EnglishName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"english_name\"")
			}
		case "data":
			if err := func() error {
				s.Data.Reset()
				if err := s.Data.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesTranslationsOKTranslationsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesTranslationsOKTranslationsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesTranslationsOKTranslationsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesTranslationsOKTranslationsItemData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesTranslationsOKTranslationsItemData) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Overview.Set {
			e.FieldStart("overview")
			s.Overview.Encode(e)
		}
	}
	{
		if s.Homepage.Set {
			e.FieldStart("homepage")
			s.Homepage.Encode(e)
		}
	}
	{
		if s.Tagline.Set {
			e.FieldStart("tagline")
			s.Tagline.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesTranslationsOKTranslationsItemData = [4]string{
	0: "name",
	1: "overview",
	2: "homepage",
	3: "tagline",
}

// Decode decodes TvSeriesTranslationsOKTranslationsItemData from json.
func (s *TvSeriesTranslationsOKTranslationsItemData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesTranslationsOKTranslationsItemData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "overview":
			if err := func() error {
				s.Overview.Reset()
				if err := s.Overview.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overview\"")
			}
		case "homepage":
			if err := func() error {
				s.Homepage.Reset()
				if err := s.Homepage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"homepage\"")
			}
		case "tagline":
			if err := func() error {
				s.Tagline.Reset()
				if err := s.Tagline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tagline\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesTranslationsOKTranslationsItemData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesTranslationsOKTranslationsItemData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesTranslationsOKTranslationsItemData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesVideosOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesVideosOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesVideosOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes TvSeriesVideosOK from json.
func (s *TvSeriesVideosOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesVideosOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results = make([]TvSeriesVideosOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesVideosOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesVideosOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesVideosOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesVideosOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesVideosOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesVideosOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso6391.Set {
			e.FieldStart("iso_639_1")
			s.Iso6391.Encode(e)
		}
	}
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Site.Set {
			e.FieldStart("site")
			s.Site.Encode(e)
		}
	}
	{
		if s.Size.Set {
			e.FieldStart("size")
			s.Size.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Official.Set {
			e.FieldStart("official")
			s.Official.Encode(e)
		}
	}
	{
		if s.PublishedAt.Set {
			e.FieldStart("published_at")
			s.PublishedAt.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesVideosOKResultsItem = [10]string{
	0: "iso_639_1",
	1: "iso_3166_1",
	2: "name",
	3: "key",
	4: "site",
	5: "size",
	6: "type",
	7: "official",
	8: "published_at",
	9: "id",
}

// Decode decodes TvSeriesVideosOKResultsItem from json.
func (s *TvSeriesVideosOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesVideosOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_639_1":
			if err := func() error {
				s.Iso6391.Reset()
				if err := s.Iso6391.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_639_1\"")
			}
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "site":
			if err := func() error {
				s.Site.Reset()
				if err := s.Site.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site\"")
			}
		case "size":
			if err := func() error {
				s.Size.Reset()
				if err := s.Size.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "official":
			if err := func() error {
				s.Official.Reset()
				if err := s.Official.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"official\"")
			}
		case "published_at":
			if err := func() error {
				s.PublishedAt.Reset()
				if err := s.PublishedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"published_at\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesVideosOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesVideosOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesVideosOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Results.Set {
			e.FieldStart("results")
			s.Results.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOK = [2]string{
	0: "id",
	1: "results",
}

// Decode decodes TvSeriesWatchProvidersOK from json.
func (s *TvSeriesWatchProvidersOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "results":
			if err := func() error {
				s.Results.Reset()
				if err := s.Results.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResults) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResults) encodeFields(e *jx.Encoder) {
	{
		if s.AE.Set {
			e.FieldStart("AE")
			s.AE.Encode(e)
		}
	}
	{
		if s.AR.Set {
			e.FieldStart("AR")
			s.AR.Encode(e)
		}
	}
	{
		if s.AT.Set {
			e.FieldStart("AT")
			s.AT.Encode(e)
		}
	}
	{
		if s.AU.Set {
			e.FieldStart("AU")
			s.AU.Encode(e)
		}
	}
	{
		if s.BA.Set {
			e.FieldStart("BA")
			s.BA.Encode(e)
		}
	}
	{
		if s.BB.Set {
			e.FieldStart("BB")
			s.BB.Encode(e)
		}
	}
	{
		if s.BE.Set {
			e.FieldStart("BE")
			s.BE.Encode(e)
		}
	}
	{
		if s.BG.Set {
			e.FieldStart("BG")
			s.BG.Encode(e)
		}
	}
	{
		if s.BO.Set {
			e.FieldStart("BO")
			s.BO.Encode(e)
		}
	}
	{
		if s.BR.Set {
			e.FieldStart("BR")
			s.BR.Encode(e)
		}
	}
	{
		if s.BS.Set {
			e.FieldStart("BS")
			s.BS.Encode(e)
		}
	}
	{
		if s.CA.Set {
			e.FieldStart("CA")
			s.CA.Encode(e)
		}
	}
	{
		if s.CH.Set {
			e.FieldStart("CH")
			s.CH.Encode(e)
		}
	}
	{
		if s.CI.Set {
			e.FieldStart("CI")
			s.CI.Encode(e)
		}
	}
	{
		if s.CL.Set {
			e.FieldStart("CL")
			s.CL.Encode(e)
		}
	}
	{
		if s.CO.Set {
			e.FieldStart("CO")
			s.CO.Encode(e)
		}
	}
	{
		if s.CR.Set {
			e.FieldStart("CR")
			s.CR.Encode(e)
		}
	}
	{
		if s.CZ.Set {
			e.FieldStart("CZ")
			s.CZ.Encode(e)
		}
	}
	{
		if s.DE.Set {
			e.FieldStart("DE")
			s.DE.Encode(e)
		}
	}
	{
		if s.DK.Set {
			e.FieldStart("DK")
			s.DK.Encode(e)
		}
	}
	{
		if s.DO.Set {
			e.FieldStart("DO")
			s.DO.Encode(e)
		}
	}
	{
		if s.DZ.Set {
			e.FieldStart("DZ")
			s.DZ.Encode(e)
		}
	}
	{
		if s.EC.Set {
			e.FieldStart("EC")
			s.EC.Encode(e)
		}
	}
	{
		if s.EG.Set {
			e.FieldStart("EG")
			s.EG.Encode(e)
		}
	}
	{
		if s.ES.Set {
			e.FieldStart("ES")
			s.ES.Encode(e)
		}
	}
	{
		if s.FI.Set {
			e.FieldStart("FI")
			s.FI.Encode(e)
		}
	}
	{
		if s.FR.Set {
			e.FieldStart("FR")
			s.FR.Encode(e)
		}
	}
	{
		if s.GB.Set {
			e.FieldStart("GB")
			s.GB.Encode(e)
		}
	}
	{
		if s.GF.Set {
			e.FieldStart("GF")
			s.GF.Encode(e)
		}
	}
	{
		if s.GH.Set {
			e.FieldStart("GH")
			s.GH.Encode(e)
		}
	}
	{
		if s.GQ.Set {
			e.FieldStart("GQ")
			s.GQ.Encode(e)
		}
	}
	{
		if s.GT.Set {
			e.FieldStart("GT")
			s.GT.Encode(e)
		}
	}
	{
		if s.HK.Set {
			e.FieldStart("HK")
			s.HK.Encode(e)
		}
	}
	{
		if s.HN.Set {
			e.FieldStart("HN")
			s.HN.Encode(e)
		}
	}
	{
		if s.HR.Set {
			e.FieldStart("HR")
			s.HR.Encode(e)
		}
	}
	{
		if s.HU.Set {
			e.FieldStart("HU")
			s.HU.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("ID")
			s.ID.Encode(e)
		}
	}
	{
		if s.IE.Set {
			e.FieldStart("IE")
			s.IE.Encode(e)
		}
	}
	{
		if s.IL.Set {
			e.FieldStart("IL")
			s.IL.Encode(e)
		}
	}
	{
		if s.IQ.Set {
			e.FieldStart("IQ")
			s.IQ.Encode(e)
		}
	}
	{
		if s.IT.Set {
			e.FieldStart("IT")
			s.IT.Encode(e)
		}
	}
	{
		if s.JM.Set {
			e.FieldStart("JM")
			s.JM.Encode(e)
		}
	}
	{
		if s.JP.Set {
			e.FieldStart("JP")
			s.JP.Encode(e)
		}
	}
	{
		if s.KE.Set {
			e.FieldStart("KE")
			s.KE.Encode(e)
		}
	}
	{
		if s.KR.Set {
			e.FieldStart("KR")
			s.KR.Encode(e)
		}
	}
	{
		if s.LB.Set {
			e.FieldStart("LB")
			s.LB.Encode(e)
		}
	}
	{
		if s.LT.Set {
			e.FieldStart("LT")
			s.LT.Encode(e)
		}
	}
	{
		if s.LY.Set {
			e.FieldStart("LY")
			s.LY.Encode(e)
		}
	}
	{
		if s.MD.Set {
			e.FieldStart("MD")
			s.MD.Encode(e)
		}
	}
	{
		if s.MK.Set {
			e.FieldStart("MK")
			s.MK.Encode(e)
		}
	}
	{
		if s.MU.Set {
			e.FieldStart("MU")
			s.MU.Encode(e)
		}
	}
	{
		if s.MX.Set {
			e.FieldStart("MX")
			s.MX.Encode(e)
		}
	}
	{
		if s.MY.Set {
			e.FieldStart("MY")
			s.MY.Encode(e)
		}
	}
	{
		if s.MZ.Set {
			e.FieldStart("MZ")
			s.MZ.Encode(e)
		}
	}
	{
		if s.NE.Set {
			e.FieldStart("NE")
			s.NE.Encode(e)
		}
	}
	{
		if s.NG.Set {
			e.FieldStart("NG")
			s.NG.Encode(e)
		}
	}
	{
		if s.NL.Set {
			e.FieldStart("NL")
			s.NL.Encode(e)
		}
	}
	{
		if s.NO.Set {
			e.FieldStart("NO")
			s.NO.Encode(e)
		}
	}
	{
		if s.NZ.Set {
			e.FieldStart("NZ")
			s.NZ.Encode(e)
		}
	}
	{
		if s.PA.Set {
			e.FieldStart("PA")
			s.PA.Encode(e)
		}
	}
	{
		if s.PE.Set {
			e.FieldStart("PE")
			s.PE.Encode(e)
		}
	}
	{
		if s.PH.Set {
			e.FieldStart("PH")
			s.PH.Encode(e)
		}
	}
	{
		if s.PL.Set {
			e.FieldStart("PL")
			s.PL.Encode(e)
		}
	}
	{
		if s.PS.Set {
			e.FieldStart("PS")
			s.PS.Encode(e)
		}
	}
	{
		if s.PT.Set {
			e.FieldStart("PT")
			s.PT.Encode(e)
		}
	}
	{
		if s.PY.Set {
			e.FieldStart("PY")
			s.PY.Encode(e)
		}
	}
	{
		if s.RO.Set {
			e.FieldStart("RO")
			s.RO.Encode(e)
		}
	}
	{
		if s.RS.Set {
			e.FieldStart("RS")
			s.RS.Encode(e)
		}
	}
	{
		if s.RU.Set {
			e.FieldStart("RU")
			s.RU.Encode(e)
		}
	}
	{
		if s.SA.Set {
			e.FieldStart("SA")
			s.SA.Encode(e)
		}
	}
	{
		if s.SC.Set {
			e.FieldStart("SC")
			s.SC.Encode(e)
		}
	}
	{
		if s.SE.Set {
			e.FieldStart("SE")
			s.SE.Encode(e)
		}
	}
	{
		if s.SG.Set {
			e.FieldStart("SG")
			s.SG.Encode(e)
		}
	}
	{
		if s.SI.Set {
			e.FieldStart("SI")
			s.SI.Encode(e)
		}
	}
	{
		if s.SK.Set {
			e.FieldStart("SK")
			s.SK.Encode(e)
		}
	}
	{
		if s.SN.Set {
			e.FieldStart("SN")
			s.SN.Encode(e)
		}
	}
	{
		if s.SV.Set {
			e.FieldStart("SV")
			s.SV.Encode(e)
		}
	}
	{
		if s.TH.Set {
			e.FieldStart("TH")
			s.TH.Encode(e)
		}
	}
	{
		if s.TR.Set {
			e.FieldStart("TR")
			s.TR.Encode(e)
		}
	}
	{
		if s.TT.Set {
			e.FieldStart("TT")
			s.TT.Encode(e)
		}
	}
	{
		if s.TW.Set {
			e.FieldStart("TW")
			s.TW.Encode(e)
		}
	}
	{
		if s.TZ.Set {
			e.FieldStart("TZ")
			s.TZ.Encode(e)
		}
	}
	{
		if s.UG.Set {
			e.FieldStart("UG")
			s.UG.Encode(e)
		}
	}
	{
		if s.US.Set {
			e.FieldStart("US")
			s.US.Encode(e)
		}
	}
	{
		if s.UY.Set {
			e.FieldStart("UY")
			s.UY.Encode(e)
		}
	}
	{
		if s.VE.Set {
			e.FieldStart("VE")
			s.VE.Encode(e)
		}
	}
	{
		if s.ZA.Set {
			e.FieldStart("ZA")
			s.ZA.Encode(e)
		}
	}
	{
		if s.ZM.Set {
			e.FieldStart("ZM")
			s.ZM.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResults = [88]string{
	0:  "AE",
	1:  "AR",
	2:  "AT",
	3:  "AU",
	4:  "BA",
	5:  "BB",
	6:  "BE",
	7:  "BG",
	8:  "BO",
	9:  "BR",
	10: "BS",
	11: "CA",
	12: "CH",
	13: "CI",
	14: "CL",
	15: "CO",
	16: "CR",
	17: "CZ",
	18: "DE",
	19: "DK",
	20: "DO",
	21: "DZ",
	22: "EC",
	23: "EG",
	24: "ES",
	25: "FI",
	26: "FR",
	27: "GB",
	28: "GF",
	29: "GH",
	30: "GQ",
	31: "GT",
	32: "HK",
	33: "HN",
	34: "HR",
	35: "HU",
	36: "ID",
	37: "IE",
	38: "IL",
	39: "IQ",
	40: "IT",
	41: "JM",
	42: "JP",
	43: "KE",
	44: "KR",
	45: "LB",
	46: "LT",
	47: "LY",
	48: "MD",
	49: "MK",
	50: "MU",
	51: "MX",
	52: "MY",
	53: "MZ",
	54: "NE",
	55: "NG",
	56: "NL",
	57: "NO",
	58: "NZ",
	59: "PA",
	60: "PE",
	61: "PH",
	62: "PL",
	63: "PS",
	64: "PT",
	65: "PY",
	66: "RO",
	67: "RS",
	68: "RU",
	69: "SA",
	70: "SC",
	71: "SE",
	72: "SG",
	73: "SI",
	74: "SK",
	75: "SN",
	76: "SV",
	77: "TH",
	78: "TR",
	79: "TT",
	80: "TW",
	81: "TZ",
	82: "UG",
	83: "US",
	84: "UY",
	85: "VE",
	86: "ZA",
	87: "ZM",
}

// Decode decodes TvSeriesWatchProvidersOKResults from json.
func (s *TvSeriesWatchProvidersOKResults) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResults to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "AE":
			if err := func() error {
				s.AE.Reset()
				if err := s.AE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AE\"")
			}
		case "AR":
			if err := func() error {
				s.AR.Reset()
				if err := s.AR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AR\"")
			}
		case "AT":
			if err := func() error {
				s.AT.Reset()
				if err := s.AT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AT\"")
			}
		case "AU":
			if err := func() error {
				s.AU.Reset()
				if err := s.AU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AU\"")
			}
		case "BA":
			if err := func() error {
				s.BA.Reset()
				if err := s.BA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BA\"")
			}
		case "BB":
			if err := func() error {
				s.BB.Reset()
				if err := s.BB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BB\"")
			}
		case "BE":
			if err := func() error {
				s.BE.Reset()
				if err := s.BE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BE\"")
			}
		case "BG":
			if err := func() error {
				s.BG.Reset()
				if err := s.BG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BG\"")
			}
		case "BO":
			if err := func() error {
				s.BO.Reset()
				if err := s.BO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BO\"")
			}
		case "BR":
			if err := func() error {
				s.BR.Reset()
				if err := s.BR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BR\"")
			}
		case "BS":
			if err := func() error {
				s.BS.Reset()
				if err := s.BS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BS\"")
			}
		case "CA":
			if err := func() error {
				s.CA.Reset()
				if err := s.CA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CA\"")
			}
		case "CH":
			if err := func() error {
				s.CH.Reset()
				if err := s.CH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CH\"")
			}
		case "CI":
			if err := func() error {
				s.CI.Reset()
				if err := s.CI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CI\"")
			}
		case "CL":
			if err := func() error {
				s.CL.Reset()
				if err := s.CL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CL\"")
			}
		case "CO":
			if err := func() error {
				s.CO.Reset()
				if err := s.CO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CO\"")
			}
		case "CR":
			if err := func() error {
				s.CR.Reset()
				if err := s.CR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CR\"")
			}
		case "CZ":
			if err := func() error {
				s.CZ.Reset()
				if err := s.CZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CZ\"")
			}
		case "DE":
			if err := func() error {
				s.DE.Reset()
				if err := s.DE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DE\"")
			}
		case "DK":
			if err := func() error {
				s.DK.Reset()
				if err := s.DK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DK\"")
			}
		case "DO":
			if err := func() error {
				s.DO.Reset()
				if err := s.DO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DO\"")
			}
		case "DZ":
			if err := func() error {
				s.DZ.Reset()
				if err := s.DZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DZ\"")
			}
		case "EC":
			if err := func() error {
				s.EC.Reset()
				if err := s.EC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EC\"")
			}
		case "EG":
			if err := func() error {
				s.EG.Reset()
				if err := s.EG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EG\"")
			}
		case "ES":
			if err := func() error {
				s.ES.Reset()
				if err := s.ES.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ES\"")
			}
		case "FI":
			if err := func() error {
				s.FI.Reset()
				if err := s.FI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FI\"")
			}
		case "FR":
			if err := func() error {
				s.FR.Reset()
				if err := s.FR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FR\"")
			}
		case "GB":
			if err := func() error {
				s.GB.Reset()
				if err := s.GB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GB\"")
			}
		case "GF":
			if err := func() error {
				s.GF.Reset()
				if err := s.GF.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GF\"")
			}
		case "GH":
			if err := func() error {
				s.GH.Reset()
				if err := s.GH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GH\"")
			}
		case "GQ":
			if err := func() error {
				s.GQ.Reset()
				if err := s.GQ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GQ\"")
			}
		case "GT":
			if err := func() error {
				s.GT.Reset()
				if err := s.GT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GT\"")
			}
		case "HK":
			if err := func() error {
				s.HK.Reset()
				if err := s.HK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HK\"")
			}
		case "HN":
			if err := func() error {
				s.HN.Reset()
				if err := s.HN.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HN\"")
			}
		case "HR":
			if err := func() error {
				s.HR.Reset()
				if err := s.HR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HR\"")
			}
		case "HU":
			if err := func() error {
				s.HU.Reset()
				if err := s.HU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HU\"")
			}
		case "ID":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ID\"")
			}
		case "IE":
			if err := func() error {
				s.IE.Reset()
				if err := s.IE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IE\"")
			}
		case "IL":
			if err := func() error {
				s.IL.Reset()
				if err := s.IL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IL\"")
			}
		case "IQ":
			if err := func() error {
				s.IQ.Reset()
				if err := s.IQ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IQ\"")
			}
		case "IT":
			if err := func() error {
				s.IT.Reset()
				if err := s.IT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IT\"")
			}
		case "JM":
			if err := func() error {
				s.JM.Reset()
				if err := s.JM.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JM\"")
			}
		case "JP":
			if err := func() error {
				s.JP.Reset()
				if err := s.JP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JP\"")
			}
		case "KE":
			if err := func() error {
				s.KE.Reset()
				if err := s.KE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"KE\"")
			}
		case "KR":
			if err := func() error {
				s.KR.Reset()
				if err := s.KR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"KR\"")
			}
		case "LB":
			if err := func() error {
				s.LB.Reset()
				if err := s.LB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LB\"")
			}
		case "LT":
			if err := func() error {
				s.LT.Reset()
				if err := s.LT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LT\"")
			}
		case "LY":
			if err := func() error {
				s.LY.Reset()
				if err := s.LY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LY\"")
			}
		case "MD":
			if err := func() error {
				s.MD.Reset()
				if err := s.MD.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MD\"")
			}
		case "MK":
			if err := func() error {
				s.MK.Reset()
				if err := s.MK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MK\"")
			}
		case "MU":
			if err := func() error {
				s.MU.Reset()
				if err := s.MU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MU\"")
			}
		case "MX":
			if err := func() error {
				s.MX.Reset()
				if err := s.MX.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MX\"")
			}
		case "MY":
			if err := func() error {
				s.MY.Reset()
				if err := s.MY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MY\"")
			}
		case "MZ":
			if err := func() error {
				s.MZ.Reset()
				if err := s.MZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MZ\"")
			}
		case "NE":
			if err := func() error {
				s.NE.Reset()
				if err := s.NE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NE\"")
			}
		case "NG":
			if err := func() error {
				s.NG.Reset()
				if err := s.NG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NG\"")
			}
		case "NL":
			if err := func() error {
				s.NL.Reset()
				if err := s.NL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NL\"")
			}
		case "NO":
			if err := func() error {
				s.NO.Reset()
				if err := s.NO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NO\"")
			}
		case "NZ":
			if err := func() error {
				s.NZ.Reset()
				if err := s.NZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NZ\"")
			}
		case "PA":
			if err := func() error {
				s.PA.Reset()
				if err := s.PA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PA\"")
			}
		case "PE":
			if err := func() error {
				s.PE.Reset()
				if err := s.PE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PE\"")
			}
		case "PH":
			if err := func() error {
				s.PH.Reset()
				if err := s.PH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PH\"")
			}
		case "PL":
			if err := func() error {
				s.PL.Reset()
				if err := s.PL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PL\"")
			}
		case "PS":
			if err := func() error {
				s.PS.Reset()
				if err := s.PS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PS\"")
			}
		case "PT":
			if err := func() error {
				s.PT.Reset()
				if err := s.PT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PT\"")
			}
		case "PY":
			if err := func() error {
				s.PY.Reset()
				if err := s.PY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PY\"")
			}
		case "RO":
			if err := func() error {
				s.RO.Reset()
				if err := s.RO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RO\"")
			}
		case "RS":
			if err := func() error {
				s.RS.Reset()
				if err := s.RS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RS\"")
			}
		case "RU":
			if err := func() error {
				s.RU.Reset()
				if err := s.RU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RU\"")
			}
		case "SA":
			if err := func() error {
				s.SA.Reset()
				if err := s.SA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SA\"")
			}
		case "SC":
			if err := func() error {
				s.SC.Reset()
				if err := s.SC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SC\"")
			}
		case "SE":
			if err := func() error {
				s.SE.Reset()
				if err := s.SE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SE\"")
			}
		case "SG":
			if err := func() error {
				s.SG.Reset()
				if err := s.SG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SG\"")
			}
		case "SI":
			if err := func() error {
				s.SI.Reset()
				if err := s.SI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SI\"")
			}
		case "SK":
			if err := func() error {
				s.SK.Reset()
				if err := s.SK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SK\"")
			}
		case "SN":
			if err := func() error {
				s.SN.Reset()
				if err := s.SN.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SN\"")
			}
		case "SV":
			if err := func() error {
				s.SV.Reset()
				if err := s.SV.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SV\"")
			}
		case "TH":
			if err := func() error {
				s.TH.Reset()
				if err := s.TH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TH\"")
			}
		case "TR":
			if err := func() error {
				s.TR.Reset()
				if err := s.TR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TR\"")
			}
		case "TT":
			if err := func() error {
				s.TT.Reset()
				if err := s.TT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TT\"")
			}
		case "TW":
			if err := func() error {
				s.TW.Reset()
				if err := s.TW.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TW\"")
			}
		case "TZ":
			if err := func() error {
				s.TZ.Reset()
				if err := s.TZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TZ\"")
			}
		case "UG":
			if err := func() error {
				s.UG.Reset()
				if err := s.UG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"UG\"")
			}
		case "US":
			if err := func() error {
				s.US.Reset()
				if err := s.US.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"US\"")
			}
		case "UY":
			if err := func() error {
				s.UY.Reset()
				if err := s.UY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"UY\"")
			}
		case "VE":
			if err := func() error {
				s.VE.Reset()
				if err := s.VE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"VE\"")
			}
		case "ZA":
			if err := func() error {
				s.ZA.Reset()
				if err := s.ZA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ZA\"")
			}
		case "ZM":
			if err := func() error {
				s.ZM.Reset()
				if err := s.ZM.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ZM\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResults")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResults) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResults) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsAE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsAE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsAE from json.
func (s *TvSeriesWatchProvidersOKResultsAE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsAE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsAEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsAEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsAE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsAE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsAEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsAEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsAEFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsAEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsAEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsAEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsAEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsAR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsAR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsAR from json.
func (s *TvSeriesWatchProvidersOKResultsAR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsAR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsARFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsARFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsAR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsAR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsARFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsARFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsARFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsARFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsARFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsARFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsARFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsARFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsARFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsAT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsAT = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsAT from json.
func (s *TvSeriesWatchProvidersOKResultsAT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsAT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsATBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsATBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsATFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsATFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsAT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsAT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsATBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsATBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsATBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsATBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsATBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsATBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsATBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsATBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsATBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsATFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsATFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsATFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsATFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsATFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsATFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsATFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsATFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsATFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAU) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsAU) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsAU = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeriesWatchProvidersOKResultsAU from json.
func (s *TvSeriesWatchProvidersOKResultsAU) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsAU to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsAUFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsAUFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsAUBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsAUBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsAU")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsAU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAUBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsAUBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsAUBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsAUBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsAUBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsAUBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsAUBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAUBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsAUBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAUFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsAUFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsAUFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsAUFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsAUFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsAUFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsAUFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsAUFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsAUFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBA = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBA from json.
func (s *TvSeriesWatchProvidersOKResultsBA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsBAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsBAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBAFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsBAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBB) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBB) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBB = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBB from json.
func (s *TvSeriesWatchProvidersOKResultsBB) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBB to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsBBFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsBBFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBB")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBBFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBBFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBBFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBBFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsBBFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBBFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBBFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBBFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBBFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBE from json.
func (s *TvSeriesWatchProvidersOKResultsBE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsBEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsBEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBEFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsBEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBG = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBG from json.
func (s *TvSeriesWatchProvidersOKResultsBG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsBGFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsBGFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBGFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBGFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBGFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBGFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsBGFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBGFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBGFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBGFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBGFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBO = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBO from json.
func (s *TvSeriesWatchProvidersOKResultsBO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsBOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsBOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBOFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsBOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBR from json.
func (s *TvSeriesWatchProvidersOKResultsBR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsBRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsBRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBRFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsBRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBS = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBS from json.
func (s *TvSeriesWatchProvidersOKResultsBS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsBSFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsBSFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBSFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsBSFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsBSFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsBSFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsBSFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsBSFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsBSFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsBSFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsBSFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCA = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCA from json.
func (s *TvSeriesWatchProvidersOKResultsCA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsCABuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsCABuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsCAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsCAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCABuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCABuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCABuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCABuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsCABuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCABuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCABuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCABuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCABuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCAFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsCAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCH) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCH) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCH = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCH from json.
func (s *TvSeriesWatchProvidersOKResultsCH) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCH to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsCHFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsCHFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsCHBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsCHBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCH")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCHBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCHBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCHBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCHBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsCHBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCHBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCHBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCHBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCHBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCHFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCHFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCHFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCHFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsCHFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCHFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCHFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCHFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCHFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCI) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCI) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCI = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCI from json.
func (s *TvSeriesWatchProvidersOKResultsCI) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCI to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsCIFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsCIFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCI")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCIFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCIFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCIFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCIFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsCIFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCIFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCIFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCIFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCIFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCL = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCL from json.
func (s *TvSeriesWatchProvidersOKResultsCL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsCLFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsCLFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCLFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCLFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCLFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCLFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsCLFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCLFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCLFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCLFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCLFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCO = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCO from json.
func (s *TvSeriesWatchProvidersOKResultsCO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsCOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsCOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCOFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsCOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCR from json.
func (s *TvSeriesWatchProvidersOKResultsCR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsCRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsCRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCRFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsCRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCZ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCZ from json.
func (s *TvSeriesWatchProvidersOKResultsCZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsCZFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsCZFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCZFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsCZFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsCZFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsCZFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsCZFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsCZFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsCZFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsCZFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsCZFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsDE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsDE = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsDE from json.
func (s *TvSeriesWatchProvidersOKResultsDE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsDE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsDEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsDEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsDEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsDEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsDE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsDE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsDEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsDEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsDEBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsDEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsDEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsDEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsDEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsDEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsDEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsDEFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsDEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsDEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsDEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsDEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsDK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsDK = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsDK from json.
func (s *TvSeriesWatchProvidersOKResultsDK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsDK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsDKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsDKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsDK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsDK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsDKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsDKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsDKFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsDKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsDKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsDKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsDKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsDO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsDO = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsDO from json.
func (s *TvSeriesWatchProvidersOKResultsDO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsDO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsDOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsDOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsDO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsDO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsDOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsDOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsDOFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsDOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsDOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsDOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsDOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsDZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsDZ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsDZ from json.
func (s *TvSeriesWatchProvidersOKResultsDZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsDZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsDZFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsDZFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsDZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsDZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDZFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsDZFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsDZFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsDZFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsDZFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsDZFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsDZFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsDZFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsDZFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsEC) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsEC) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsEC = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsEC from json.
func (s *TvSeriesWatchProvidersOKResultsEC) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsEC to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsECFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsECFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsEC")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsEC) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsEC) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsECFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsECFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsECFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsECFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsECFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsECFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsECFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsECFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsECFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsEG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsEG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsEG = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsEG from json.
func (s *TvSeriesWatchProvidersOKResultsEG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsEG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsEGFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsEGFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsEG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsEG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsEG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsEGFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsEGFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsEGFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsEGFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsEGFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsEGFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsEGFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsEGFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsEGFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsES) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsES) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsES = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsES from json.
func (s *TvSeriesWatchProvidersOKResultsES) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsES to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsESFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsESFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsES")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsES) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsES) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsESFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsESFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsESFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsESFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsESFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsESFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsESFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsESFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsESFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsFI) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsFI) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsFI = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsFI from json.
func (s *TvSeriesWatchProvidersOKResultsFI) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsFI to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsFIBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsFIBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsFIFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsFIFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsFI")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsFI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsFI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsFIBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsFIBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsFIBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsFIBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsFIBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsFIBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsFIBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsFIBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsFIBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsFIFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsFIFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsFIFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsFIFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsFIFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsFIFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsFIFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsFIFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsFIFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsFR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsFR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsFR = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsFR from json.
func (s *TvSeriesWatchProvidersOKResultsFR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsFR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsFRBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsFRBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsFRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsFRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsFR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsFR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsFR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsFRBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsFRBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsFRBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsFRBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsFRBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsFRBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsFRBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsFRBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsFRBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsFRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsFRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsFRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsFRFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsFRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsFRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsFRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsFRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsFRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGB) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsGB) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsGB = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeriesWatchProvidersOKResultsGB from json.
func (s *TvSeriesWatchProvidersOKResultsGB) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsGB to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsGBFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsGBFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsGBBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsGBBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsGB")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsGB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGBBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsGBBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsGBBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsGBBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsGBBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsGBBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsGBBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGBBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsGBBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGBFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsGBFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsGBFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsGBFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsGBFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsGBFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsGBFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGBFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsGBFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGF) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsGF) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsGF = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsGF from json.
func (s *TvSeriesWatchProvidersOKResultsGF) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsGF to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsGFFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsGFFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsGF")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGF) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsGF) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGFFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsGFFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsGFFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsGFFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsGFFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsGFFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsGFFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGFFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsGFFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGH) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsGH) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsGH = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsGH from json.
func (s *TvSeriesWatchProvidersOKResultsGH) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsGH to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsGHFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsGHFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsGH")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsGH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGHFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsGHFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsGHFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsGHFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsGHFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsGHFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsGHFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGHFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsGHFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGQ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsGQ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsGQ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsGQ from json.
func (s *TvSeriesWatchProvidersOKResultsGQ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsGQ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsGQFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsGQFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsGQ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGQ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsGQ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGQFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsGQFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsGQFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsGQFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsGQFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsGQFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsGQFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGQFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsGQFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsGT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsGT = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsGT from json.
func (s *TvSeriesWatchProvidersOKResultsGT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsGT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsGTFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsGTFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsGT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsGT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGTFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsGTFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsGTFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsGTFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsGTFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsGTFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsGTFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsGTFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsGTFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsHK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsHK = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsHK from json.
func (s *TvSeriesWatchProvidersOKResultsHK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsHK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsHKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsHKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsHK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsHK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsHKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsHKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsHKFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsHKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsHKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsHKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsHKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHN) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsHN) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsHN = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsHN from json.
func (s *TvSeriesWatchProvidersOKResultsHN) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsHN to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsHNFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsHNFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsHN")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsHN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHNFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsHNFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsHNFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsHNFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsHNFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsHNFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsHNFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHNFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsHNFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsHR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsHR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsHR from json.
func (s *TvSeriesWatchProvidersOKResultsHR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsHR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsHRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsHRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsHR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsHR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsHRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsHRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsHRFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsHRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsHRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsHRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsHRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHU) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsHU) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsHU = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsHU from json.
func (s *TvSeriesWatchProvidersOKResultsHU) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsHU to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsHUFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsHUFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsHU")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsHU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHUFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsHUFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsHUFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsHUFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsHUFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsHUFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsHUFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsHUFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsHUFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsID) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsID = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsID from json.
func (s *TvSeriesWatchProvidersOKResultsID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsIDFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsIDFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIDFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsIDFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsIDFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsIDFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsIDFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsIDFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsIDFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIDFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsIDFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsIE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsIE = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeriesWatchProvidersOKResultsIE from json.
func (s *TvSeriesWatchProvidersOKResultsIE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsIE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsIEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsIEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsIEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsIEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsIE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsIE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsIEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsIEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsIEBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsIEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsIEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsIEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsIEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsIEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsIEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsIEFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsIEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsIEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsIEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsIEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsIL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsIL = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsIL from json.
func (s *TvSeriesWatchProvidersOKResultsIL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsIL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsILFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsILFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsIL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsIL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsILFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsILFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsILFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsILFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsILFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsILFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsILFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsILFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsILFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIQ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsIQ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsIQ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsIQ from json.
func (s *TvSeriesWatchProvidersOKResultsIQ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsIQ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsIQFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsIQFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsIQ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIQ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsIQ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIQFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsIQFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsIQFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsIQFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsIQFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsIQFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsIQFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIQFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsIQFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsIT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsIT = [3]string{
	0: "link",
	1: "buy",
	2: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsIT from json.
func (s *TvSeriesWatchProvidersOKResultsIT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsIT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsITBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsITBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsITFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsITFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsIT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsIT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsIT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsITBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsITBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsITBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsITBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsITBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsITBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsITBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsITBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsITBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsITFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsITFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsITFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsITFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsITFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsITFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsITFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsITFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsITFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsJM) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsJM) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsJM = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsJM from json.
func (s *TvSeriesWatchProvidersOKResultsJM) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsJM to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsJMFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsJMFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsJM")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsJM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsJM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsJMFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsJMFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsJMFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsJMFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsJMFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsJMFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsJMFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsJMFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsJMFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsJP) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsJP) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsJP = [4]string{
	0: "link",
	1: "flatrate",
	2: "buy",
	3: "rent",
}

// Decode decodes TvSeriesWatchProvidersOKResultsJP from json.
func (s *TvSeriesWatchProvidersOKResultsJP) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsJP to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsJPFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsJPFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsJPBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsJPBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]TvSeriesWatchProvidersOKResultsJPRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsJPRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsJP")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsJP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsJP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsJPBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsJPBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsJPBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsJPBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsJPBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsJPBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsJPBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsJPBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsJPBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsJPFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsJPFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsJPFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsJPFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsJPFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsJPFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsJPFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsJPFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsJPFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsJPRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsJPRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsJPRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsJPRentItem from json.
func (s *TvSeriesWatchProvidersOKResultsJPRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsJPRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsJPRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsJPRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsJPRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsKE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsKE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsKE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsKE from json.
func (s *TvSeriesWatchProvidersOKResultsKE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsKE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsKEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsKEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsKE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsKE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsKE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsKEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsKEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsKEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsKEFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsKEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsKEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsKEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsKEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsKEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsKR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsKR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsKR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsKR from json.
func (s *TvSeriesWatchProvidersOKResultsKR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsKR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsKRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsKRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsKR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsKR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsKR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsKRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsKRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsKRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsKRFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsKRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsKRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsKRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsKRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsKRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsLB) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsLB) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsLB = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsLB from json.
func (s *TvSeriesWatchProvidersOKResultsLB) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsLB to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsLBFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsLBFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsLB")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsLB) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsLB) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsLBFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsLBFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsLBFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsLBFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsLBFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsLBFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsLBFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsLBFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsLBFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsLT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsLT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsLT = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsLT from json.
func (s *TvSeriesWatchProvidersOKResultsLT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsLT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsLTFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsLTFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsLT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsLT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsLT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsLTFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsLTFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsLTFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsLTFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsLTFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsLTFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsLTFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsLTFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsLTFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsLY) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsLY) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsLY = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsLY from json.
func (s *TvSeriesWatchProvidersOKResultsLY) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsLY to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsLYFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsLYFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsLY")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsLY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsLY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsLYFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsLYFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsLYFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsLYFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsLYFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsLYFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsLYFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsLYFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsLYFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMD) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsMD) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsMD = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsMD from json.
func (s *TvSeriesWatchProvidersOKResultsMD) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsMD to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsMDFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsMDFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsMD")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMD) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsMD) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMDFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsMDFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsMDFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsMDFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsMDFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsMDFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsMDFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMDFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsMDFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsMK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsMK = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsMK from json.
func (s *TvSeriesWatchProvidersOKResultsMK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsMK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsMKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsMKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsMK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsMK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsMKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsMKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsMKFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsMKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsMKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsMKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsMKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMU) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsMU) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsMU = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsMU from json.
func (s *TvSeriesWatchProvidersOKResultsMU) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsMU to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsMUFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsMUFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsMU")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsMU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMUFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsMUFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsMUFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsMUFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsMUFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsMUFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsMUFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMUFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsMUFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMX) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsMX) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsMX = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsMX from json.
func (s *TvSeriesWatchProvidersOKResultsMX) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsMX to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsMXFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsMXFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsMX")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMX) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsMX) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMXFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsMXFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsMXFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsMXFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsMXFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsMXFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsMXFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMXFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsMXFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMY) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsMY) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsMY = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsMY from json.
func (s *TvSeriesWatchProvidersOKResultsMY) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsMY to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsMYFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsMYFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsMY")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsMY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMYFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsMYFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsMYFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsMYFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsMYFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsMYFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsMYFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMYFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsMYFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsMZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsMZ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsMZ from json.
func (s *TvSeriesWatchProvidersOKResultsMZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsMZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsMZFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsMZFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsMZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsMZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMZFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsMZFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsMZFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsMZFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsMZFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsMZFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsMZFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsMZFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsMZFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsNE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsNE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsNE from json.
func (s *TvSeriesWatchProvidersOKResultsNE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsNE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsNEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsNEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsNE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsNE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsNEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsNEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsNEFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsNEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsNEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsNEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsNEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsNG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsNG = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsNG from json.
func (s *TvSeriesWatchProvidersOKResultsNG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsNG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsNGFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsNGFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsNG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsNG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNGFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsNGFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsNGFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsNGFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsNGFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsNGFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsNGFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNGFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsNGFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsNL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsNL = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeriesWatchProvidersOKResultsNL from json.
func (s *TvSeriesWatchProvidersOKResultsNL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsNL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsNLFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsNLFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsNLBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsNLBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsNL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsNL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNLBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsNLBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsNLBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsNLBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsNLBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsNLBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsNLBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNLBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsNLBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNLFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsNLFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsNLFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsNLFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsNLFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsNLFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsNLFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNLFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsNLFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsNO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsNO = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeriesWatchProvidersOKResultsNO from json.
func (s *TvSeriesWatchProvidersOKResultsNO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsNO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsNOFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsNOFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsNOBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsNOBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsNO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsNO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNOBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsNOBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsNOBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsNOBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsNOBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsNOBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsNOBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNOBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsNOBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNOFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsNOFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsNOFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsNOFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsNOFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsNOFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsNOFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNOFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsNOFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsNZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsNZ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsNZ from json.
func (s *TvSeriesWatchProvidersOKResultsNZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsNZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsNZFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsNZFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsNZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsNZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNZFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsNZFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsNZFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsNZFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsNZFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsNZFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsNZFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsNZFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsNZFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPA = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPA from json.
func (s *TvSeriesWatchProvidersOKResultsPA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsPAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsPAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPAFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsPAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPE from json.
func (s *TvSeriesWatchProvidersOKResultsPE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsPEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsPEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPEFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsPEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPH) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPH) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPH = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPH from json.
func (s *TvSeriesWatchProvidersOKResultsPH) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPH to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsPHFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsPHFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPH")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPHFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPHFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPHFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPHFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsPHFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPHFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPHFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPHFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPHFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPL) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPL) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Rent != nil {
			e.FieldStart("rent")
			e.ArrStart()
			for _, elem := range s.Rent {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPL = [3]string{
	0: "link",
	1: "flatrate",
	2: "rent",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPL from json.
func (s *TvSeriesWatchProvidersOKResultsPL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPL to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsPLFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsPLFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "rent":
			if err := func() error {
				s.Rent = make([]TvSeriesWatchProvidersOKResultsPLRentItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsPLRentItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Rent = append(s.Rent, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPL")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPLFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPLFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPLFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPLFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsPLFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPLFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPLFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPLFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPLFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPLRentItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPLRentItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPLRentItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPLRentItem from json.
func (s *TvSeriesWatchProvidersOKResultsPLRentItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPLRentItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPLRentItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPLRentItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPLRentItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPS = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPS from json.
func (s *TvSeriesWatchProvidersOKResultsPS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsPSFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsPSFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPSFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPSFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPSFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPSFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsPSFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPSFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPSFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPSFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPSFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPT = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPT from json.
func (s *TvSeriesWatchProvidersOKResultsPT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsPTFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsPTFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPTFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPTFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPTFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPTFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsPTFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPTFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPTFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPTFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPTFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPY) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPY) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPY = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPY from json.
func (s *TvSeriesWatchProvidersOKResultsPY) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPY to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsPYFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsPYFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPY")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPYFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsPYFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsPYFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsPYFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsPYFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsPYFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsPYFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsPYFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsPYFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsRO) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsRO) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsRO = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsRO from json.
func (s *TvSeriesWatchProvidersOKResultsRO) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsRO to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsROFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsROFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsRO")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsRO) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsRO) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsROFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsROFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsROFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsROFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsROFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsROFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsROFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsROFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsROFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsRS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsRS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsRS = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsRS from json.
func (s *TvSeriesWatchProvidersOKResultsRS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsRS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsRSFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsRSFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsRS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsRS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsRS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsRSFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsRSFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsRSFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsRSFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsRSFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsRSFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsRSFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsRSFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsRSFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsRU) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsRU) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Ads != nil {
			e.FieldStart("ads")
			e.ArrStart()
			for _, elem := range s.Ads {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsRU = [3]string{
	0: "link",
	1: "flatrate",
	2: "ads",
}

// Decode decodes TvSeriesWatchProvidersOKResultsRU from json.
func (s *TvSeriesWatchProvidersOKResultsRU) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsRU to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsRUFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsRUFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "ads":
			if err := func() error {
				s.Ads = make([]TvSeriesWatchProvidersOKResultsRUAdsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsRUAdsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Ads = append(s.Ads, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ads\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsRU")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsRU) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsRU) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsRUAdsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsRUAdsItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsRUAdsItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsRUAdsItem from json.
func (s *TvSeriesWatchProvidersOKResultsRUAdsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsRUAdsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsRUAdsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsRUAdsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsRUAdsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsRUFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsRUFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsRUFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsRUFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsRUFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsRUFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsRUFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsRUFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsRUFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSA = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSA from json.
func (s *TvSeriesWatchProvidersOKResultsSA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsSAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsSAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSAFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsSAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSC) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSC) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSC = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSC from json.
func (s *TvSeriesWatchProvidersOKResultsSC) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSC to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsSCFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsSCFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSC")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSC) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSC) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSCFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSCFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSCFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSCFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsSCFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSCFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSCFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSCFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSCFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSE = [3]string{
	0: "link",
	1: "flatrate",
	2: "buy",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSE from json.
func (s *TvSeriesWatchProvidersOKResultsSE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsSEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsSEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsSEBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsSEBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSEBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSEBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSEBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSEBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsSEBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSEBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSEBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSEBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSEBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSEFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsSEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSG = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSG from json.
func (s *TvSeriesWatchProvidersOKResultsSG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsSGFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsSGFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSGFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSGFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSGFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSGFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsSGFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSGFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSGFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSGFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSGFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSI) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSI) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSI = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSI from json.
func (s *TvSeriesWatchProvidersOKResultsSI) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSI to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsSIFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsSIFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSI")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSIFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSIFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSIFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSIFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsSIFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSIFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSIFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSIFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSIFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSK) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSK = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSK from json.
func (s *TvSeriesWatchProvidersOKResultsSK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsSKFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsSKFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSKFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSKFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSKFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSKFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsSKFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSKFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSKFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSKFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSKFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSN) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSN) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSN = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSN from json.
func (s *TvSeriesWatchProvidersOKResultsSN) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSN to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsSNFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsSNFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSN")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSNFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSNFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSNFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSNFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsSNFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSNFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSNFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSNFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSNFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSV) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSV) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSV = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSV from json.
func (s *TvSeriesWatchProvidersOKResultsSV) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSV to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsSVFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsSVFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSV")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSV) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSV) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSVFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsSVFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsSVFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsSVFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsSVFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsSVFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsSVFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsSVFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsSVFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTH) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsTH) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsTH = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsTH from json.
func (s *TvSeriesWatchProvidersOKResultsTH) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsTH to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsTHFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsTHFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsTH")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTH) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsTH) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTHFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsTHFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsTHFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsTHFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsTHFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsTHFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsTHFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTHFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsTHFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTR) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsTR) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsTR = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsTR from json.
func (s *TvSeriesWatchProvidersOKResultsTR) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsTR to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsTRFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsTRFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsTR")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTR) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsTR) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTRFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsTRFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsTRFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsTRFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsTRFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsTRFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsTRFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTRFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsTRFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTT) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsTT) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsTT = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsTT from json.
func (s *TvSeriesWatchProvidersOKResultsTT) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsTT to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsTTFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsTTFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsTT")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTT) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsTT) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTTFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsTTFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsTTFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsTTFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsTTFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsTTFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsTTFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTTFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsTTFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTW) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsTW) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsTW = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsTW from json.
func (s *TvSeriesWatchProvidersOKResultsTW) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsTW to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsTWFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsTWFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsTW")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTW) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsTW) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTWFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsTWFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsTWFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsTWFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsTWFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsTWFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsTWFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTWFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsTWFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTZ) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsTZ) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsTZ = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsTZ from json.
func (s *TvSeriesWatchProvidersOKResultsTZ) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsTZ to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsTZFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsTZFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsTZ")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTZ) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsTZ) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTZFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsTZFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsTZFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsTZFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsTZFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsTZFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsTZFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsTZFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsTZFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUG) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsUG) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsUG = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsUG from json.
func (s *TvSeriesWatchProvidersOKResultsUG) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsUG to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsUGFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsUGFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsUG")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUG) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsUG) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUGFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsUGFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsUGFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsUGFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsUGFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsUGFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsUGFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUGFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsUGFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsUS) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Free != nil {
			e.FieldStart("free")
			e.ArrStart()
			for _, elem := range s.Free {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Buy != nil {
			e.FieldStart("buy")
			e.ArrStart()
			for _, elem := range s.Buy {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsUS = [4]string{
	0: "link",
	1: "free",
	2: "buy",
	3: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsUS from json.
func (s *TvSeriesWatchProvidersOKResultsUS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsUS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "free":
			if err := func() error {
				s.Free = make([]TvSeriesWatchProvidersOKResultsUSFreeItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsUSFreeItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Free = append(s.Free, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"free\"")
			}
		case "buy":
			if err := func() error {
				s.Buy = make([]TvSeriesWatchProvidersOKResultsUSBuyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsUSBuyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Buy = append(s.Buy, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsUSFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsUSFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsUS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsUS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUSBuyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsUSBuyItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsUSBuyItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsUSBuyItem from json.
func (s *TvSeriesWatchProvidersOKResultsUSBuyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsUSBuyItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsUSBuyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUSBuyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsUSBuyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUSFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsUSFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsUSFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsUSFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsUSFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsUSFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsUSFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUSFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsUSFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUSFreeItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsUSFreeItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsUSFreeItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsUSFreeItem from json.
func (s *TvSeriesWatchProvidersOKResultsUSFreeItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsUSFreeItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsUSFreeItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUSFreeItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsUSFreeItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUY) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsUY) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsUY = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsUY from json.
func (s *TvSeriesWatchProvidersOKResultsUY) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsUY to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsUYFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsUYFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsUY")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUY) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsUY) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUYFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsUYFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsUYFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsUYFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsUYFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsUYFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsUYFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsUYFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsUYFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsVE) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsVE) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsVE = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsVE from json.
func (s *TvSeriesWatchProvidersOKResultsVE) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsVE to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsVEFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsVEFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsVE")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsVE) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsVE) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsVEFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsVEFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsVEFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsVEFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsVEFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsVEFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsVEFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsVEFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsVEFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsZA) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsZA) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsZA = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsZA from json.
func (s *TvSeriesWatchProvidersOKResultsZA) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsZA to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsZAFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsZAFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsZA")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsZA) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsZA) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsZAFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsZAFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsZAFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsZAFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsZAFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsZAFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsZAFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsZAFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsZAFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsZM) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsZM) encodeFields(e *jx.Encoder) {
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.Flatrate != nil {
			e.FieldStart("flatrate")
			e.ArrStart()
			for _, elem := range s.Flatrate {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsZM = [2]string{
	0: "link",
	1: "flatrate",
}

// Decode decodes TvSeriesWatchProvidersOKResultsZM from json.
func (s *TvSeriesWatchProvidersOKResultsZM) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsZM to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "flatrate":
			if err := func() error {
				s.Flatrate = make([]TvSeriesWatchProvidersOKResultsZMFlatrateItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem TvSeriesWatchProvidersOKResultsZMFlatrateItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Flatrate = append(s.Flatrate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatrate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsZM")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsZM) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsZM) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsZMFlatrateItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TvSeriesWatchProvidersOKResultsZMFlatrateItem) encodeFields(e *jx.Encoder) {
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
}

var jsonFieldsNameOfTvSeriesWatchProvidersOKResultsZMFlatrateItem = [4]string{
	0: "logo_path",
	1: "provider_id",
	2: "provider_name",
	3: "display_priority",
}

// Decode decodes TvSeriesWatchProvidersOKResultsZMFlatrateItem from json.
func (s *TvSeriesWatchProvidersOKResultsZMFlatrateItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TvSeriesWatchProvidersOKResultsZMFlatrateItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TvSeriesWatchProvidersOKResultsZMFlatrateItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TvSeriesWatchProvidersOKResultsZMFlatrateItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TvSeriesWatchProvidersOKResultsZMFlatrateItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WatchProviderTvListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WatchProviderTvListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfWatchProviderTvListOK = [1]string{
	0: "results",
}

// Decode decodes WatchProviderTvListOK from json.
func (s *WatchProviderTvListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WatchProviderTvListOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "results":
			if err := func() error {
				s.Results = make([]WatchProviderTvListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem WatchProviderTvListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WatchProviderTvListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WatchProviderTvListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WatchProviderTvListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WatchProviderTvListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WatchProviderTvListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayPriorities.Set {
			e.FieldStart("display_priorities")
			s.DisplayPriorities.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
}

var jsonFieldsNameOfWatchProviderTvListOKResultsItem = [5]string{
	0: "display_priorities",
	1: "display_priority",
	2: "logo_path",
	3: "provider_name",
	4: "provider_id",
}

// Decode decodes WatchProviderTvListOKResultsItem from json.
func (s *WatchProviderTvListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WatchProviderTvListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_priorities":
			if err := func() error {
				s.DisplayPriorities.Reset()
				if err := s.DisplayPriorities.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priorities\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WatchProviderTvListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WatchProviderTvListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WatchProviderTvListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WatchProviderTvListOKResultsItemDisplayPriorities) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WatchProviderTvListOKResultsItemDisplayPriorities) encodeFields(e *jx.Encoder) {
	{
		if s.CA.Set {
			e.FieldStart("CA")
			s.CA.Encode(e)
		}
	}
	{
		if s.AE.Set {
			e.FieldStart("AE")
			s.AE.Encode(e)
		}
	}
	{
		if s.AR.Set {
			e.FieldStart("AR")
			s.AR.Encode(e)
		}
	}
	{
		if s.AT.Set {
			e.FieldStart("AT")
			s.AT.Encode(e)
		}
	}
	{
		if s.AU.Set {
			e.FieldStart("AU")
			s.AU.Encode(e)
		}
	}
	{
		if s.BE.Set {
			e.FieldStart("BE")
			s.BE.Encode(e)
		}
	}
	{
		if s.BO.Set {
			e.FieldStart("BO")
			s.BO.Encode(e)
		}
	}
	{
		if s.BR.Set {
			e.FieldStart("BR")
			s.BR.Encode(e)
		}
	}
	{
		if s.BG.Set {
			e.FieldStart("BG")
			s.BG.Encode(e)
		}
	}
	{
		if s.CH.Set {
			e.FieldStart("CH")
			s.CH.Encode(e)
		}
	}
	{
		if s.CL.Set {
			e.FieldStart("CL")
			s.CL.Encode(e)
		}
	}
	{
		if s.CO.Set {
			e.FieldStart("CO")
			s.CO.Encode(e)
		}
	}
	{
		if s.CR.Set {
			e.FieldStart("CR")
			s.CR.Encode(e)
		}
	}
	{
		if s.CZ.Set {
			e.FieldStart("CZ")
			s.CZ.Encode(e)
		}
	}
	{
		if s.DE.Set {
			e.FieldStart("DE")
			s.DE.Encode(e)
		}
	}
	{
		if s.DK.Set {
			e.FieldStart("DK")
			s.DK.Encode(e)
		}
	}
	{
		if s.EC.Set {
			e.FieldStart("EC")
			s.EC.Encode(e)
		}
	}
	{
		if s.EE.Set {
			e.FieldStart("EE")
			s.EE.Encode(e)
		}
	}
	{
		if s.EG.Set {
			e.FieldStart("EG")
			s.EG.Encode(e)
		}
	}
	{
		if s.ES.Set {
			e.FieldStart("ES")
			s.ES.Encode(e)
		}
	}
	{
		if s.FI.Set {
			e.FieldStart("FI")
			s.FI.Encode(e)
		}
	}
	{
		if s.FR.Set {
			e.FieldStart("FR")
			s.FR.Encode(e)
		}
	}
	{
		if s.GB.Set {
			e.FieldStart("GB")
			s.GB.Encode(e)
		}
	}
	{
		if s.GR.Set {
			e.FieldStart("GR")
			s.GR.Encode(e)
		}
	}
	{
		if s.GT.Set {
			e.FieldStart("GT")
			s.GT.Encode(e)
		}
	}
	{
		if s.HK.Set {
			e.FieldStart("HK")
			s.HK.Encode(e)
		}
	}
	{
		if s.HN.Set {
			e.FieldStart("HN")
			s.HN.Encode(e)
		}
	}
	{
		if s.HU.Set {
			e.FieldStart("HU")
			s.HU.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("ID")
			s.ID.Encode(e)
		}
	}
	{
		if s.IE.Set {
			e.FieldStart("IE")
			s.IE.Encode(e)
		}
	}
	{
		if s.IN.Set {
			e.FieldStart("IN")
			s.IN.Encode(e)
		}
	}
	{
		if s.IT.Set {
			e.FieldStart("IT")
			s.IT.Encode(e)
		}
	}
	{
		if s.JP.Set {
			e.FieldStart("JP")
			s.JP.Encode(e)
		}
	}
	{
		if s.LT.Set {
			e.FieldStart("LT")
			s.LT.Encode(e)
		}
	}
	{
		if s.LV.Set {
			e.FieldStart("LV")
			s.LV.Encode(e)
		}
	}
	{
		if s.MX.Set {
			e.FieldStart("MX")
			s.MX.Encode(e)
		}
	}
	{
		if s.MY.Set {
			e.FieldStart("MY")
			s.MY.Encode(e)
		}
	}
	{
		if s.NL.Set {
			e.FieldStart("NL")
			s.NL.Encode(e)
		}
	}
	{
		if s.NO.Set {
			e.FieldStart("NO")
			s.NO.Encode(e)
		}
	}
	{
		if s.NZ.Set {
			e.FieldStart("NZ")
			s.NZ.Encode(e)
		}
	}
	{
		if s.PE.Set {
			e.FieldStart("PE")
			s.PE.Encode(e)
		}
	}
	{
		if s.PH.Set {
			e.FieldStart("PH")
			s.PH.Encode(e)
		}
	}
	{
		if s.PL.Set {
			e.FieldStart("PL")
			s.PL.Encode(e)
		}
	}
	{
		if s.PT.Set {
			e.FieldStart("PT")
			s.PT.Encode(e)
		}
	}
	{
		if s.PY.Set {
			e.FieldStart("PY")
			s.PY.Encode(e)
		}
	}
	{
		if s.RU.Set {
			e.FieldStart("RU")
			s.RU.Encode(e)
		}
	}
	{
		if s.SA.Set {
			e.FieldStart("SA")
			s.SA.Encode(e)
		}
	}
	{
		if s.SE.Set {
			e.FieldStart("SE")
			s.SE.Encode(e)
		}
	}
	{
		if s.SG.Set {
			e.FieldStart("SG")
			s.SG.Encode(e)
		}
	}
	{
		if s.SK.Set {
			e.FieldStart("SK")
			s.SK.Encode(e)
		}
	}
	{
		if s.TH.Set {
			e.FieldStart("TH")
			s.TH.Encode(e)
		}
	}
	{
		if s.TR.Set {
			e.FieldStart("TR")
			s.TR.Encode(e)
		}
	}
	{
		if s.TW.Set {
			e.FieldStart("TW")
			s.TW.Encode(e)
		}
	}
	{
		if s.US.Set {
			e.FieldStart("US")
			s.US.Encode(e)
		}
	}
	{
		if s.VE.Set {
			e.FieldStart("VE")
			s.VE.Encode(e)
		}
	}
	{
		if s.ZA.Set {
			e.FieldStart("ZA")
			s.ZA.Encode(e)
		}
	}
	{
		if s.SI.Set {
			e.FieldStart("SI")
			s.SI.Encode(e)
		}
	}
	{
		if s.CV.Set {
			e.FieldStart("CV")
			s.CV.Encode(e)
		}
	}
	{
		if s.GH.Set {
			e.FieldStart("GH")
			s.GH.Encode(e)
		}
	}
	{
		if s.MU.Set {
			e.FieldStart("MU")
			s.MU.Encode(e)
		}
	}
	{
		if s.MZ.Set {
			e.FieldStart("MZ")
			s.MZ.Encode(e)
		}
	}
	{
		if s.UG.Set {
			e.FieldStart("UG")
			s.UG.Encode(e)
		}
	}
	{
		if s.IL.Set {
			e.FieldStart("IL")
			s.IL.Encode(e)
		}
	}
}

var jsonFieldsNameOfWatchProviderTvListOKResultsItemDisplayPriorities = [63]string{
	0:  "CA",
	1:  "AE",
	2:  "AR",
	3:  "AT",
	4:  "AU",
	5:  "BE",
	6:  "BO",
	7:  "BR",
	8:  "BG",
	9:  "CH",
	10: "CL",
	11: "CO",
	12: "CR",
	13: "CZ",
	14: "DE",
	15: "DK",
	16: "EC",
	17: "EE",
	18: "EG",
	19: "ES",
	20: "FI",
	21: "FR",
	22: "GB",
	23: "GR",
	24: "GT",
	25: "HK",
	26: "HN",
	27: "HU",
	28: "ID",
	29: "IE",
	30: "IN",
	31: "IT",
	32: "JP",
	33: "LT",
	34: "LV",
	35: "MX",
	36: "MY",
	37: "NL",
	38: "NO",
	39: "NZ",
	40: "PE",
	41: "PH",
	42: "PL",
	43: "PT",
	44: "PY",
	45: "RU",
	46: "SA",
	47: "SE",
	48: "SG",
	49: "SK",
	50: "TH",
	51: "TR",
	52: "TW",
	53: "US",
	54: "VE",
	55: "ZA",
	56: "SI",
	57: "CV",
	58: "GH",
	59: "MU",
	60: "MZ",
	61: "UG",
	62: "IL",
}

// Decode decodes WatchProviderTvListOKResultsItemDisplayPriorities from json.
func (s *WatchProviderTvListOKResultsItemDisplayPriorities) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WatchProviderTvListOKResultsItemDisplayPriorities to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "CA":
			if err := func() error {
				s.CA.Reset()
				if err := s.CA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CA\"")
			}
		case "AE":
			if err := func() error {
				s.AE.Reset()
				if err := s.AE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AE\"")
			}
		case "AR":
			if err := func() error {
				s.AR.Reset()
				if err := s.AR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AR\"")
			}
		case "AT":
			if err := func() error {
				s.AT.Reset()
				if err := s.AT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AT\"")
			}
		case "AU":
			if err := func() error {
				s.AU.Reset()
				if err := s.AU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AU\"")
			}
		case "BE":
			if err := func() error {
				s.BE.Reset()
				if err := s.BE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BE\"")
			}
		case "BO":
			if err := func() error {
				s.BO.Reset()
				if err := s.BO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BO\"")
			}
		case "BR":
			if err := func() error {
				s.BR.Reset()
				if err := s.BR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BR\"")
			}
		case "BG":
			if err := func() error {
				s.BG.Reset()
				if err := s.BG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BG\"")
			}
		case "CH":
			if err := func() error {
				s.CH.Reset()
				if err := s.CH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CH\"")
			}
		case "CL":
			if err := func() error {
				s.CL.Reset()
				if err := s.CL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CL\"")
			}
		case "CO":
			if err := func() error {
				s.CO.Reset()
				if err := s.CO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CO\"")
			}
		case "CR":
			if err := func() error {
				s.CR.Reset()
				if err := s.CR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CR\"")
			}
		case "CZ":
			if err := func() error {
				s.CZ.Reset()
				if err := s.CZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CZ\"")
			}
		case "DE":
			if err := func() error {
				s.DE.Reset()
				if err := s.DE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DE\"")
			}
		case "DK":
			if err := func() error {
				s.DK.Reset()
				if err := s.DK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DK\"")
			}
		case "EC":
			if err := func() error {
				s.EC.Reset()
				if err := s.EC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EC\"")
			}
		case "EE":
			if err := func() error {
				s.EE.Reset()
				if err := s.EE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EE\"")
			}
		case "EG":
			if err := func() error {
				s.EG.Reset()
				if err := s.EG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EG\"")
			}
		case "ES":
			if err := func() error {
				s.ES.Reset()
				if err := s.ES.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ES\"")
			}
		case "FI":
			if err := func() error {
				s.FI.Reset()
				if err := s.FI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FI\"")
			}
		case "FR":
			if err := func() error {
				s.FR.Reset()
				if err := s.FR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FR\"")
			}
		case "GB":
			if err := func() error {
				s.GB.Reset()
				if err := s.GB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GB\"")
			}
		case "GR":
			if err := func() error {
				s.GR.Reset()
				if err := s.GR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GR\"")
			}
		case "GT":
			if err := func() error {
				s.GT.Reset()
				if err := s.GT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GT\"")
			}
		case "HK":
			if err := func() error {
				s.HK.Reset()
				if err := s.HK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HK\"")
			}
		case "HN":
			if err := func() error {
				s.HN.Reset()
				if err := s.HN.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HN\"")
			}
		case "HU":
			if err := func() error {
				s.HU.Reset()
				if err := s.HU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HU\"")
			}
		case "ID":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ID\"")
			}
		case "IE":
			if err := func() error {
				s.IE.Reset()
				if err := s.IE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IE\"")
			}
		case "IN":
			if err := func() error {
				s.IN.Reset()
				if err := s.IN.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IN\"")
			}
		case "IT":
			if err := func() error {
				s.IT.Reset()
				if err := s.IT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IT\"")
			}
		case "JP":
			if err := func() error {
				s.JP.Reset()
				if err := s.JP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JP\"")
			}
		case "LT":
			if err := func() error {
				s.LT.Reset()
				if err := s.LT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LT\"")
			}
		case "LV":
			if err := func() error {
				s.LV.Reset()
				if err := s.LV.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LV\"")
			}
		case "MX":
			if err := func() error {
				s.MX.Reset()
				if err := s.MX.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MX\"")
			}
		case "MY":
			if err := func() error {
				s.MY.Reset()
				if err := s.MY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MY\"")
			}
		case "NL":
			if err := func() error {
				s.NL.Reset()
				if err := s.NL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NL\"")
			}
		case "NO":
			if err := func() error {
				s.NO.Reset()
				if err := s.NO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NO\"")
			}
		case "NZ":
			if err := func() error {
				s.NZ.Reset()
				if err := s.NZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NZ\"")
			}
		case "PE":
			if err := func() error {
				s.PE.Reset()
				if err := s.PE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PE\"")
			}
		case "PH":
			if err := func() error {
				s.PH.Reset()
				if err := s.PH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PH\"")
			}
		case "PL":
			if err := func() error {
				s.PL.Reset()
				if err := s.PL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PL\"")
			}
		case "PT":
			if err := func() error {
				s.PT.Reset()
				if err := s.PT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PT\"")
			}
		case "PY":
			if err := func() error {
				s.PY.Reset()
				if err := s.PY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PY\"")
			}
		case "RU":
			if err := func() error {
				s.RU.Reset()
				if err := s.RU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RU\"")
			}
		case "SA":
			if err := func() error {
				s.SA.Reset()
				if err := s.SA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SA\"")
			}
		case "SE":
			if err := func() error {
				s.SE.Reset()
				if err := s.SE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SE\"")
			}
		case "SG":
			if err := func() error {
				s.SG.Reset()
				if err := s.SG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SG\"")
			}
		case "SK":
			if err := func() error {
				s.SK.Reset()
				if err := s.SK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SK\"")
			}
		case "TH":
			if err := func() error {
				s.TH.Reset()
				if err := s.TH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TH\"")
			}
		case "TR":
			if err := func() error {
				s.TR.Reset()
				if err := s.TR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TR\"")
			}
		case "TW":
			if err := func() error {
				s.TW.Reset()
				if err := s.TW.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TW\"")
			}
		case "US":
			if err := func() error {
				s.US.Reset()
				if err := s.US.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"US\"")
			}
		case "VE":
			if err := func() error {
				s.VE.Reset()
				if err := s.VE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"VE\"")
			}
		case "ZA":
			if err := func() error {
				s.ZA.Reset()
				if err := s.ZA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ZA\"")
			}
		case "SI":
			if err := func() error {
				s.SI.Reset()
				if err := s.SI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SI\"")
			}
		case "CV":
			if err := func() error {
				s.CV.Reset()
				if err := s.CV.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CV\"")
			}
		case "GH":
			if err := func() error {
				s.GH.Reset()
				if err := s.GH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GH\"")
			}
		case "MU":
			if err := func() error {
				s.MU.Reset()
				if err := s.MU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MU\"")
			}
		case "MZ":
			if err := func() error {
				s.MZ.Reset()
				if err := s.MZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MZ\"")
			}
		case "UG":
			if err := func() error {
				s.UG.Reset()
				if err := s.UG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"UG\"")
			}
		case "IL":
			if err := func() error {
				s.IL.Reset()
				if err := s.IL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IL\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WatchProviderTvListOKResultsItemDisplayPriorities")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WatchProviderTvListOKResultsItemDisplayPriorities) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WatchProviderTvListOKResultsItemDisplayPriorities) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WatchProvidersAvailableRegionsOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WatchProvidersAvailableRegionsOK) encodeFields(e *jx.Encoder) {
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfWatchProvidersAvailableRegionsOK = [1]string{
	0: "results",
}

// Decode decodes WatchProvidersAvailableRegionsOK from json.
func (s *WatchProvidersAvailableRegionsOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WatchProvidersAvailableRegionsOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "results":
			if err := func() error {
				s.Results = make([]WatchProvidersAvailableRegionsOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem WatchProvidersAvailableRegionsOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WatchProvidersAvailableRegionsOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WatchProvidersAvailableRegionsOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WatchProvidersAvailableRegionsOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WatchProvidersAvailableRegionsOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WatchProvidersAvailableRegionsOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Iso31661.Set {
			e.FieldStart("iso_3166_1")
			s.Iso31661.Encode(e)
		}
	}
	{
		if s.EnglishName.Set {
			e.FieldStart("english_name")
			s.EnglishName.Encode(e)
		}
	}
	{
		if s.NativeName.Set {
			e.FieldStart("native_name")
			s.NativeName.Encode(e)
		}
	}
}

var jsonFieldsNameOfWatchProvidersAvailableRegionsOKResultsItem = [3]string{
	0: "iso_3166_1",
	1: "english_name",
	2: "native_name",
}

// Decode decodes WatchProvidersAvailableRegionsOKResultsItem from json.
func (s *WatchProvidersAvailableRegionsOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WatchProvidersAvailableRegionsOKResultsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "iso_3166_1":
			if err := func() error {
				s.Iso31661.Reset()
				if err := s.Iso31661.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iso_3166_1\"")
			}
		case "english_name":
			if err := func() error {
				s.EnglishName.Reset()
				if err := s.EnglishName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"english_name\"")
			}
		case "native_name":
			if err := func() error {
				s.NativeName.Reset()
				if err := s.NativeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"native_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WatchProvidersAvailableRegionsOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WatchProvidersAvailableRegionsOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WatchProvidersAvailableRegionsOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WatchProvidersMovieListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WatchProvidersMovieListOK) encodeFields(e *jx.Encoder) {
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfWatchProvidersMovieListOK = [1]string{
	0: "results",
}

// Decode decodes WatchProvidersMovieListOK from json.
func (s *WatchProvidersMovieListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WatchProvidersMovieListOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "results":
			if err := func() error {
				s.Results = make([]WatchProvidersMovieListOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem WatchProvidersMovieListOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WatchProvidersMovieListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WatchProvidersMovieListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WatchProvidersMovieListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WatchProvidersMovieListOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WatchProvidersMovieListOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayPriorities.Set {
			e.FieldStart("display_priorities")
			s.DisplayPriorities.Encode(e)
		}
	}
	{
		if s.DisplayPriority.Set {
			e.FieldStart("display_priority")
			s.DisplayPriority.Encode(e)
		}
	}
	{
		if s.LogoPath.Set {
			e.FieldStart("logo_path")
			s.LogoPath.Encode(e)
		}
	}
	{
		if s.ProviderName.Set {
			e.FieldStart("provider_name")
			s.ProviderName.Encode(e)
		}
	}
	{
		if s.ProviderID.Set {
			e.FieldStart("provider_id")
			s.ProviderID.Encode(e)
		}
	}
}

var jsonFieldsNameOfWatchProvidersMovieListOKResultsItem = [5]string{
	0: "display_priorities",
	1: "display_priority",
	2: "logo_path",
	3: "provider_name",
	4: "provider_id",
}

// Decode decodes WatchProvidersMovieListOKResultsItem from json.
func (s *WatchProvidersMovieListOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WatchProvidersMovieListOKResultsItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_priorities":
			if err := func() error {
				s.DisplayPriorities.Reset()
				if err := s.DisplayPriorities.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priorities\"")
			}
		case "display_priority":
			if err := func() error {
				s.DisplayPriority.Reset()
				if err := s.DisplayPriority.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_priority\"")
			}
		case "logo_path":
			if err := func() error {
				s.LogoPath.Reset()
				if err := s.LogoPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logo_path\"")
			}
		case "provider_name":
			if err := func() error {
				s.ProviderName.Reset()
				if err := s.ProviderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_name\"")
			}
		case "provider_id":
			if err := func() error {
				s.ProviderID.Reset()
				if err := s.ProviderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WatchProvidersMovieListOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WatchProvidersMovieListOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WatchProvidersMovieListOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WatchProvidersMovieListOKResultsItemDisplayPriorities) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WatchProvidersMovieListOKResultsItemDisplayPriorities) encodeFields(e *jx.Encoder) {
	{
		if s.CA.Set {
			e.FieldStart("CA")
			s.CA.Encode(e)
		}
	}
	{
		if s.AE.Set {
			e.FieldStart("AE")
			s.AE.Encode(e)
		}
	}
	{
		if s.AR.Set {
			e.FieldStart("AR")
			s.AR.Encode(e)
		}
	}
	{
		if s.AT.Set {
			e.FieldStart("AT")
			s.AT.Encode(e)
		}
	}
	{
		if s.AU.Set {
			e.FieldStart("AU")
			s.AU.Encode(e)
		}
	}
	{
		if s.BE.Set {
			e.FieldStart("BE")
			s.BE.Encode(e)
		}
	}
	{
		if s.BO.Set {
			e.FieldStart("BO")
			s.BO.Encode(e)
		}
	}
	{
		if s.BR.Set {
			e.FieldStart("BR")
			s.BR.Encode(e)
		}
	}
	{
		if s.BG.Set {
			e.FieldStart("BG")
			s.BG.Encode(e)
		}
	}
	{
		if s.CH.Set {
			e.FieldStart("CH")
			s.CH.Encode(e)
		}
	}
	{
		if s.CL.Set {
			e.FieldStart("CL")
			s.CL.Encode(e)
		}
	}
	{
		if s.CO.Set {
			e.FieldStart("CO")
			s.CO.Encode(e)
		}
	}
	{
		if s.CR.Set {
			e.FieldStart("CR")
			s.CR.Encode(e)
		}
	}
	{
		if s.CZ.Set {
			e.FieldStart("CZ")
			s.CZ.Encode(e)
		}
	}
	{
		if s.DE.Set {
			e.FieldStart("DE")
			s.DE.Encode(e)
		}
	}
	{
		if s.DK.Set {
			e.FieldStart("DK")
			s.DK.Encode(e)
		}
	}
	{
		if s.EC.Set {
			e.FieldStart("EC")
			s.EC.Encode(e)
		}
	}
	{
		if s.EE.Set {
			e.FieldStart("EE")
			s.EE.Encode(e)
		}
	}
	{
		if s.EG.Set {
			e.FieldStart("EG")
			s.EG.Encode(e)
		}
	}
	{
		if s.ES.Set {
			e.FieldStart("ES")
			s.ES.Encode(e)
		}
	}
	{
		if s.FI.Set {
			e.FieldStart("FI")
			s.FI.Encode(e)
		}
	}
	{
		if s.FR.Set {
			e.FieldStart("FR")
			s.FR.Encode(e)
		}
	}
	{
		if s.GB.Set {
			e.FieldStart("GB")
			s.GB.Encode(e)
		}
	}
	{
		if s.GR.Set {
			e.FieldStart("GR")
			s.GR.Encode(e)
		}
	}
	{
		if s.GT.Set {
			e.FieldStart("GT")
			s.GT.Encode(e)
		}
	}
	{
		if s.HK.Set {
			e.FieldStart("HK")
			s.HK.Encode(e)
		}
	}
	{
		if s.HN.Set {
			e.FieldStart("HN")
			s.HN.Encode(e)
		}
	}
	{
		if s.HU.Set {
			e.FieldStart("HU")
			s.HU.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("ID")
			s.ID.Encode(e)
		}
	}
	{
		if s.IE.Set {
			e.FieldStart("IE")
			s.IE.Encode(e)
		}
	}
	{
		if s.IN.Set {
			e.FieldStart("IN")
			s.IN.Encode(e)
		}
	}
	{
		if s.IT.Set {
			e.FieldStart("IT")
			s.IT.Encode(e)
		}
	}
	{
		if s.JP.Set {
			e.FieldStart("JP")
			s.JP.Encode(e)
		}
	}
	{
		if s.LT.Set {
			e.FieldStart("LT")
			s.LT.Encode(e)
		}
	}
	{
		if s.LV.Set {
			e.FieldStart("LV")
			s.LV.Encode(e)
		}
	}
	{
		if s.MX.Set {
			e.FieldStart("MX")
			s.MX.Encode(e)
		}
	}
	{
		if s.MY.Set {
			e.FieldStart("MY")
			s.MY.Encode(e)
		}
	}
	{
		if s.NL.Set {
			e.FieldStart("NL")
			s.NL.Encode(e)
		}
	}
	{
		if s.NO.Set {
			e.FieldStart("NO")
			s.NO.Encode(e)
		}
	}
	{
		if s.NZ.Set {
			e.FieldStart("NZ")
			s.NZ.Encode(e)
		}
	}
	{
		if s.PE.Set {
			e.FieldStart("PE")
			s.PE.Encode(e)
		}
	}
	{
		if s.PH.Set {
			e.FieldStart("PH")
			s.PH.Encode(e)
		}
	}
	{
		if s.PL.Set {
			e.FieldStart("PL")
			s.PL.Encode(e)
		}
	}
	{
		if s.PT.Set {
			e.FieldStart("PT")
			s.PT.Encode(e)
		}
	}
	{
		if s.PY.Set {
			e.FieldStart("PY")
			s.PY.Encode(e)
		}
	}
	{
		if s.RU.Set {
			e.FieldStart("RU")
			s.RU.Encode(e)
		}
	}
	{
		if s.SA.Set {
			e.FieldStart("SA")
			s.SA.Encode(e)
		}
	}
	{
		if s.SE.Set {
			e.FieldStart("SE")
			s.SE.Encode(e)
		}
	}
	{
		if s.SG.Set {
			e.FieldStart("SG")
			s.SG.Encode(e)
		}
	}
	{
		if s.SK.Set {
			e.FieldStart("SK")
			s.SK.Encode(e)
		}
	}
	{
		if s.TH.Set {
			e.FieldStart("TH")
			s.TH.Encode(e)
		}
	}
	{
		if s.TR.Set {
			e.FieldStart("TR")
			s.TR.Encode(e)
		}
	}
	{
		if s.TW.Set {
			e.FieldStart("TW")
			s.TW.Encode(e)
		}
	}
	{
		if s.US.Set {
			e.FieldStart("US")
			s.US.Encode(e)
		}
	}
	{
		if s.VE.Set {
			e.FieldStart("VE")
			s.VE.Encode(e)
		}
	}
	{
		if s.ZA.Set {
			e.FieldStart("ZA")
			s.ZA.Encode(e)
		}
	}
	{
		if s.SI.Set {
			e.FieldStart("SI")
			s.SI.Encode(e)
		}
	}
	{
		if s.CV.Set {
			e.FieldStart("CV")
			s.CV.Encode(e)
		}
	}
	{
		if s.GH.Set {
			e.FieldStart("GH")
			s.GH.Encode(e)
		}
	}
	{
		if s.MU.Set {
			e.FieldStart("MU")
			s.MU.Encode(e)
		}
	}
	{
		if s.MZ.Set {
			e.FieldStart("MZ")
			s.MZ.Encode(e)
		}
	}
	{
		if s.UG.Set {
			e.FieldStart("UG")
			s.UG.Encode(e)
		}
	}
	{
		if s.IL.Set {
			e.FieldStart("IL")
			s.IL.Encode(e)
		}
	}
}

var jsonFieldsNameOfWatchProvidersMovieListOKResultsItemDisplayPriorities = [63]string{
	0:  "CA",
	1:  "AE",
	2:  "AR",
	3:  "AT",
	4:  "AU",
	5:  "BE",
	6:  "BO",
	7:  "BR",
	8:  "BG",
	9:  "CH",
	10: "CL",
	11: "CO",
	12: "CR",
	13: "CZ",
	14: "DE",
	15: "DK",
	16: "EC",
	17: "EE",
	18: "EG",
	19: "ES",
	20: "FI",
	21: "FR",
	22: "GB",
	23: "GR",
	24: "GT",
	25: "HK",
	26: "HN",
	27: "HU",
	28: "ID",
	29: "IE",
	30: "IN",
	31: "IT",
	32: "JP",
	33: "LT",
	34: "LV",
	35: "MX",
	36: "MY",
	37: "NL",
	38: "NO",
	39: "NZ",
	40: "PE",
	41: "PH",
	42: "PL",
	43: "PT",
	44: "PY",
	45: "RU",
	46: "SA",
	47: "SE",
	48: "SG",
	49: "SK",
	50: "TH",
	51: "TR",
	52: "TW",
	53: "US",
	54: "VE",
	55: "ZA",
	56: "SI",
	57: "CV",
	58: "GH",
	59: "MU",
	60: "MZ",
	61: "UG",
	62: "IL",
}

// Decode decodes WatchProvidersMovieListOKResultsItemDisplayPriorities from json.
func (s *WatchProvidersMovieListOKResultsItemDisplayPriorities) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WatchProvidersMovieListOKResultsItemDisplayPriorities to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "CA":
			if err := func() error {
				s.CA.Reset()
				if err := s.CA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CA\"")
			}
		case "AE":
			if err := func() error {
				s.AE.Reset()
				if err := s.AE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AE\"")
			}
		case "AR":
			if err := func() error {
				s.AR.Reset()
				if err := s.AR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AR\"")
			}
		case "AT":
			if err := func() error {
				s.AT.Reset()
				if err := s.AT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AT\"")
			}
		case "AU":
			if err := func() error {
				s.AU.Reset()
				if err := s.AU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AU\"")
			}
		case "BE":
			if err := func() error {
				s.BE.Reset()
				if err := s.BE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BE\"")
			}
		case "BO":
			if err := func() error {
				s.BO.Reset()
				if err := s.BO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BO\"")
			}
		case "BR":
			if err := func() error {
				s.BR.Reset()
				if err := s.BR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BR\"")
			}
		case "BG":
			if err := func() error {
				s.BG.Reset()
				if err := s.BG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BG\"")
			}
		case "CH":
			if err := func() error {
				s.CH.Reset()
				if err := s.CH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CH\"")
			}
		case "CL":
			if err := func() error {
				s.CL.Reset()
				if err := s.CL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CL\"")
			}
		case "CO":
			if err := func() error {
				s.CO.Reset()
				if err := s.CO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CO\"")
			}
		case "CR":
			if err := func() error {
				s.CR.Reset()
				if err := s.CR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CR\"")
			}
		case "CZ":
			if err := func() error {
				s.CZ.Reset()
				if err := s.CZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CZ\"")
			}
		case "DE":
			if err := func() error {
				s.DE.Reset()
				if err := s.DE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DE\"")
			}
		case "DK":
			if err := func() error {
				s.DK.Reset()
				if err := s.DK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DK\"")
			}
		case "EC":
			if err := func() error {
				s.EC.Reset()
				if err := s.EC.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EC\"")
			}
		case "EE":
			if err := func() error {
				s.EE.Reset()
				if err := s.EE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EE\"")
			}
		case "EG":
			if err := func() error {
				s.EG.Reset()
				if err := s.EG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EG\"")
			}
		case "ES":
			if err := func() error {
				s.ES.Reset()
				if err := s.ES.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ES\"")
			}
		case "FI":
			if err := func() error {
				s.FI.Reset()
				if err := s.FI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FI\"")
			}
		case "FR":
			if err := func() error {
				s.FR.Reset()
				if err := s.FR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FR\"")
			}
		case "GB":
			if err := func() error {
				s.GB.Reset()
				if err := s.GB.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GB\"")
			}
		case "GR":
			if err := func() error {
				s.GR.Reset()
				if err := s.GR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GR\"")
			}
		case "GT":
			if err := func() error {
				s.GT.Reset()
				if err := s.GT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GT\"")
			}
		case "HK":
			if err := func() error {
				s.HK.Reset()
				if err := s.HK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HK\"")
			}
		case "HN":
			if err := func() error {
				s.HN.Reset()
				if err := s.HN.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HN\"")
			}
		case "HU":
			if err := func() error {
				s.HU.Reset()
				if err := s.HU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"HU\"")
			}
		case "ID":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ID\"")
			}
		case "IE":
			if err := func() error {
				s.IE.Reset()
				if err := s.IE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IE\"")
			}
		case "IN":
			if err := func() error {
				s.IN.Reset()
				if err := s.IN.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IN\"")
			}
		case "IT":
			if err := func() error {
				s.IT.Reset()
				if err := s.IT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IT\"")
			}
		case "JP":
			if err := func() error {
				s.JP.Reset()
				if err := s.JP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"JP\"")
			}
		case "LT":
			if err := func() error {
				s.LT.Reset()
				if err := s.LT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LT\"")
			}
		case "LV":
			if err := func() error {
				s.LV.Reset()
				if err := s.LV.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LV\"")
			}
		case "MX":
			if err := func() error {
				s.MX.Reset()
				if err := s.MX.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MX\"")
			}
		case "MY":
			if err := func() error {
				s.MY.Reset()
				if err := s.MY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MY\"")
			}
		case "NL":
			if err := func() error {
				s.NL.Reset()
				if err := s.NL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NL\"")
			}
		case "NO":
			if err := func() error {
				s.NO.Reset()
				if err := s.NO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NO\"")
			}
		case "NZ":
			if err := func() error {
				s.NZ.Reset()
				if err := s.NZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"NZ\"")
			}
		case "PE":
			if err := func() error {
				s.PE.Reset()
				if err := s.PE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PE\"")
			}
		case "PH":
			if err := func() error {
				s.PH.Reset()
				if err := s.PH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PH\"")
			}
		case "PL":
			if err := func() error {
				s.PL.Reset()
				if err := s.PL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PL\"")
			}
		case "PT":
			if err := func() error {
				s.PT.Reset()
				if err := s.PT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PT\"")
			}
		case "PY":
			if err := func() error {
				s.PY.Reset()
				if err := s.PY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PY\"")
			}
		case "RU":
			if err := func() error {
				s.RU.Reset()
				if err := s.RU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RU\"")
			}
		case "SA":
			if err := func() error {
				s.SA.Reset()
				if err := s.SA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SA\"")
			}
		case "SE":
			if err := func() error {
				s.SE.Reset()
				if err := s.SE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SE\"")
			}
		case "SG":
			if err := func() error {
				s.SG.Reset()
				if err := s.SG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SG\"")
			}
		case "SK":
			if err := func() error {
				s.SK.Reset()
				if err := s.SK.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SK\"")
			}
		case "TH":
			if err := func() error {
				s.TH.Reset()
				if err := s.TH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TH\"")
			}
		case "TR":
			if err := func() error {
				s.TR.Reset()
				if err := s.TR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TR\"")
			}
		case "TW":
			if err := func() error {
				s.TW.Reset()
				if err := s.TW.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"TW\"")
			}
		case "US":
			if err := func() error {
				s.US.Reset()
				if err := s.US.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"US\"")
			}
		case "VE":
			if err := func() error {
				s.VE.Reset()
				if err := s.VE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"VE\"")
			}
		case "ZA":
			if err := func() error {
				s.ZA.Reset()
				if err := s.ZA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ZA\"")
			}
		case "SI":
			if err := func() error {
				s.SI.Reset()
				if err := s.SI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SI\"")
			}
		case "CV":
			if err := func() error {
				s.CV.Reset()
				if err := s.CV.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CV\"")
			}
		case "GH":
			if err := func() error {
				s.GH.Reset()
				if err := s.GH.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"GH\"")
			}
		case "MU":
			if err := func() error {
				s.MU.Reset()
				if err := s.MU.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MU\"")
			}
		case "MZ":
			if err := func() error {
				s.MZ.Reset()
				if err := s.MZ.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"MZ\"")
			}
		case "UG":
			if err := func() error {
				s.UG.Reset()
				if err := s.UG.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"UG\"")
			}
		case "IL":
			if err := func() error {
				s.IL.Reset()
				if err := s.IL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IL\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WatchProvidersMovieListOKResultsItemDisplayPriorities")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WatchProvidersMovieListOKResultsItemDisplayPriorities) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WatchProvidersMovieListOKResultsItemDisplayPriorities) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
